{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/Yelee/source/apple-touch-icon.png","path":"apple-touch-icon.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/background/bg-1.jpg","path":"background/bg-1.jpg","modified":0,"renderable":1},{"_id":"themes/Yelee/source/background/bg-2.jpg","path":"background/bg-2.jpg","modified":0,"renderable":1},{"_id":"themes/Yelee/source/background/bg-3.jpg","path":"background/bg-3.jpg","modified":0,"renderable":1},{"_id":"themes/Yelee/source/background/bg-4.jpg","path":"background/bg-4.jpg","modified":0,"renderable":1},{"_id":"themes/Yelee/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/AcFun.png","path":"img/AcFun.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/CSDN.png","path":"img/CSDN.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/Coding.png","path":"img/Coding.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/LOFTER.png","path":"img/LOFTER.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/Plunker.png","path":"img/Plunker.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/Quora.png","path":"img/Quora.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/SegmentFault.png","path":"img/SegmentFault.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/TiddlyWiki.png","path":"img/TiddlyWiki.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/V2EX.png","path":"img/V2EX.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/bilibili.png","path":"img/bilibili.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/face.jpg","path":"img/face.jpg","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/niconico.png","path":"img/niconico.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/博客园.png","path":"img/博客园.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/新浪微博.png","path":"img/新浪微博.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/知乎.png","path":"img/知乎.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/简书.png","path":"img/简书.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/网易云音乐.png","path":"img/网易云音乐.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/虾米音乐.png","path":"img/虾米音乐.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/img/豆瓣.png","path":"img/豆瓣.png","modified":0,"renderable":1},{"_id":"themes/Yelee/source/js/GithubRepoWidget.js","path":"js/GithubRepoWidget.js","modified":0,"renderable":1},{"_id":"themes/Yelee/source/js/instagram.js","path":"js/instagram.js","modified":0,"renderable":1},{"_id":"themes/Yelee/source/js/mobile.js","path":"js/mobile.js","modified":0,"renderable":1},{"_id":"themes/Yelee/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/Yelee/source/js/pc.js","path":"js/pc.js","modified":0,"renderable":1},{"_id":"themes/Yelee/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/Yelee/source/js/toc.js","path":"js/toc.js","modified":0,"renderable":1},{"_id":"themes/Yelee/source/background/bg-5.jpg","path":"background/bg-5.jpg","modified":0,"renderable":1},{"_id":"themes/Yelee/source/background/bg-6.jpg","path":"background/bg-6.jpg","modified":0,"renderable":1},{"_id":"themes/Yelee/source/background/backup/bg-2.jpg","path":"background/backup/bg-2.jpg","modified":0,"renderable":1},{"_id":"themes/Yelee/source/background/backup/bg-1.jpg","path":"background/backup/bg-1.jpg","modified":0,"renderable":1},{"_id":"themes/Yelee/source/background/backup/bg-3.jpg","path":"background/backup/bg-3.jpg","modified":0,"renderable":1},{"_id":"themes/Yelee/source/background/backup/bg-4.jpg","path":"background/backup/bg-4.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"73ec81ff59cc8a729648643fa004f73d9d289e30","modified":1524324895929},{"_id":"source/404.html","hash":"c99a2e88b3aa7431bf981d22f6325b86f4983061","modified":1524323249833},{"_id":"themes/Yelee/_config.yml","hash":"b1cb2691ade5366bf310cc24a2e17131f72553fb","modified":1524371699931},{"_id":"themes/Yelee/README.md","hash":"12bc9cdb68f51df81bcc36a5263e0a6c5860f646","modified":1524321449139},{"_id":"themes/Yelee/package.json","hash":"0199dfb3d44cf520b67464817d13c44a7766b8d6","modified":1524321449156},{"_id":"source/about/index.md","hash":"0b5c96d28708f396a7f018bed0c315058c1b3496","modified":1524322781880},{"_id":"source/_posts/SpringMVC自定义注解验证器.md","hash":"ae31355607e20c80314d4e4bdee1ba0aafaadea6","modified":1524325026978},{"_id":"source/_posts/将你自己的项目发布到maven中央仓库.md","hash":"8946de456f24a40a8c2e86a5ad5457d942dd9238","modified":1524324187002},{"_id":"themes/Yelee/languages/default.yml","hash":"3bdad891c90029447b4fbaedbbb11b8a59d06418","modified":1524321449140},{"_id":"themes/Yelee/languages/en.yml","hash":"ff991c2c80d9ab69c984acb1c40480c8b98be2bc","modified":1524321449140},{"_id":"themes/Yelee/languages/zh-Hans.yml","hash":"4fa4068a65089810e7dd95692f9157eb80c2e8de","modified":1524321449141},{"_id":"themes/Yelee/languages/zh-Hant-HK.yml","hash":"bbc73dcd9170fe9efaab6fbbe1571886e0b8aa89","modified":1524321449141},{"_id":"themes/Yelee/languages/zh-Hant-TW.yml","hash":"88b4678bba940bc270c7aea2debbf869ecf6cc18","modified":1524321449141},{"_id":"themes/Yelee/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1524321449154},{"_id":"themes/Yelee/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1524321449154},{"_id":"themes/Yelee/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1524321449154},{"_id":"themes/Yelee/layout/layout.ejs","hash":"3a4350f23a1286345f76c949466c97a7200dae8e","modified":1524321449155},{"_id":"themes/Yelee/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1524321449155},{"_id":"themes/Yelee/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1524321449155},{"_id":"themes/Yelee/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1524321449156},{"_id":"themes/Yelee/source/apple-touch-icon.png","hash":"c0fda117fa166d63b9eb690cc5e4fb2caaf493b3","modified":1524321449157},{"_id":"themes/Yelee/layout/_partial/after-footer.ejs","hash":"748391b89b661fa1ed7da0b15ed6870981ec4dc3","modified":1524321449142},{"_id":"themes/Yelee/layout/_partial/archive-post.ejs","hash":"0ecc2ad07b4abad80f564ac1858c50bcbdff34f8","modified":1524321449143},{"_id":"themes/Yelee/layout/_partial/archive.ejs","hash":"a4eacc2bc1278095a0ef99f904b0634c78f980eb","modified":1524321449143},{"_id":"themes/Yelee/layout/_partial/article.ejs","hash":"afd85b362d732fa9b439af7dc44b657d0d1aae3d","modified":1524321449143},{"_id":"themes/Yelee/layout/_partial/background.ejs","hash":"aeef39abef66ee0bd6c9efe856eaeb1b81416d41","modified":1524321449144},{"_id":"themes/Yelee/layout/_partial/footer.ejs","hash":"82653e3bbdc605b51e1b0a36e30f3ac1180c838e","modified":1524321449146},{"_id":"themes/Yelee/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1524321449147},{"_id":"themes/Yelee/layout/_partial/head.ejs","hash":"55e90c3d5de6d7ffcfe26c4dc22189a7a27b6651","modified":1524321449147},{"_id":"themes/Yelee/layout/_partial/header.ejs","hash":"b69855e07b65117769adc515cb64b803932068c9","modified":1524321449147},{"_id":"themes/Yelee/layout/_partial/ie-updater.ejs","hash":"8d1e1f3953efbcf5ec84a451439a62a1c95b55d7","modified":1524321449148},{"_id":"themes/Yelee/layout/_partial/left-col.ejs","hash":"90fd7c763faf8d64d58612f592cbacbefdaea161","modified":1524321449148},{"_id":"themes/Yelee/layout/_partial/mathjax.ejs","hash":"ce868f8b2b5b377cadc270e3a5bb5826f8bf0dee","modified":1524321449148},{"_id":"themes/Yelee/layout/_partial/mobile-nav.ejs","hash":"306be982577b0ef968f855d0dfeaab6b180b8a50","modified":1524321449149},{"_id":"themes/Yelee/layout/_partial/open-in-new-tab.ejs","hash":"a59d4c768009dd621e741a29cf6446ebc2668fe9","modified":1524321449149},{"_id":"themes/Yelee/layout/_partial/page.ejs","hash":"cfce60062cdb60893baeda7fa0266ae4086c2bc8","modified":1524321449149},{"_id":"themes/Yelee/layout/_partial/post-nav-button.ejs","hash":"0a98bffdd14f6677721841c0ac4487a86c77266c","modified":1524321449150},{"_id":"themes/Yelee/layout/_partial/scrolling-button.ejs","hash":"c5e1c3a8e1e6b0d927ac25a7fb8720ee7ac83ad8","modified":1524321449152},{"_id":"themes/Yelee/layout/_partial/tab-title-change.ejs","hash":"7c4a7177e0c77de2d7607ca29fc395abebd34db7","modified":1524321449153},{"_id":"themes/Yelee/layout/_partial/toc.ejs","hash":"7ee88b1a98eea5cbd44c0f9a11b86b46aa2d6752","modified":1524321449153},{"_id":"themes/Yelee/layout/_partial/tag-cloud-page.ejs","hash":"c7b25ef136e129c948ac37d6ff19e8815ab9fee6","modified":1524321449153},{"_id":"themes/Yelee/source/background/bg-1.jpg","hash":"9a5241de4c880f13a278f6980bf11d4dfb214d82","modified":1524321449161},{"_id":"themes/Yelee/source/background/bg-2.jpg","hash":"d1e0b92e8fa822e44d185b5e1bf94ab47bc98a0a","modified":1524321449161},{"_id":"themes/Yelee/source/background/bg-3.jpg","hash":"d476909f06fe8267c676952e3582bf9e9ff73585","modified":1524321449162},{"_id":"themes/Yelee/source/background/bg-4.jpg","hash":"8e80d0b7786c3bf7b9648c0190719e78001e9eeb","modified":1524321449163},{"_id":"themes/Yelee/source/css/_extend.styl","hash":"8ab1ad313bd6707d248c5ca1ee9a5eab8d815e42","modified":1524321449165},{"_id":"themes/Yelee/source/css/_variables.styl","hash":"f429eb9bc9f0a270ec68c4f4c63903250746a01c","modified":1524321449176},{"_id":"themes/Yelee/source/css/style.styl","hash":"b285f9a75abd09c7d06fe89e70f9e1819eac27dd","modified":1524321449176},{"_id":"themes/Yelee/source/img/AcFun.png","hash":"df6b0fa39ced4dc988359fc7b7cd1e5403de08a6","modified":1524321449177},{"_id":"themes/Yelee/source/img/CSDN.png","hash":"59f7d89eda8a7310a0ee1607e153c0829af7eb6e","modified":1524321449177},{"_id":"themes/Yelee/source/img/Coding.png","hash":"afb4bce19bebf61e3c486fd5199369d6eb191b78","modified":1524321449177},{"_id":"themes/Yelee/source/img/LOFTER.png","hash":"88670eaea8612839e9d6a40a3636e4231ab56c0f","modified":1524321449178},{"_id":"themes/Yelee/source/img/Plunker.png","hash":"14a0054b9b4a0e459987f34b9ab48ab22dbe5cf9","modified":1524321449178},{"_id":"themes/Yelee/source/img/Quora.png","hash":"1a624ade0d07f2482b21bef1e2a5ddd0110ba352","modified":1524321449178},{"_id":"themes/Yelee/source/img/SegmentFault.png","hash":"1afbc7e575e2e9ed9404be84a3f92f7ca8345a9c","modified":1524321449179},{"_id":"themes/Yelee/source/img/TiddlyWiki.png","hash":"b7f68f8f9c45561a9455aee0bfb80e35cae6f8df","modified":1524321449179},{"_id":"themes/Yelee/source/img/V2EX.png","hash":"d0768de8555f9be0ee8ce956198cef454d4e4d7c","modified":1524321449179},{"_id":"themes/Yelee/source/img/avatar.png","hash":"e4bca3d60087cd6e775d8e2aa2bf0d35e3859592","modified":1524321449180},{"_id":"themes/Yelee/source/img/bilibili.png","hash":"be37b7e9a091c8547b8ee8b9d29583af8ded61c0","modified":1524321449180},{"_id":"themes/Yelee/source/img/face.jpg","hash":"b6c103cefaace24b16de0e1f78c41992b33f3092","modified":1524321879106},{"_id":"themes/Yelee/source/img/niconico.png","hash":"fabc7ca45e9ee5698db33a25de8b1f8a7c7d6723","modified":1524321449180},{"_id":"themes/Yelee/source/img/scrollbar_arrow.png","hash":"af987032f2171867bb58b165d2180eb5dcbea637","modified":1524321449181},{"_id":"themes/Yelee/source/img/博客园.png","hash":"5ff6f4c9f1fc1695217a57436d58b246d9d2f197","modified":1524321449181},{"_id":"themes/Yelee/source/img/新浪微博.png","hash":"7a145ed1daee0c172cda77098f4254fc21f9eeee","modified":1524321449181},{"_id":"themes/Yelee/source/img/知乎.png","hash":"ed6d3c304789e112d09f40784fa6add1f1a38bd6","modified":1524321449182},{"_id":"themes/Yelee/source/img/简书.png","hash":"5c91ee83cab4abe160240e09de345b6935c8cb37","modified":1524321449182},{"_id":"themes/Yelee/source/img/网易云音乐.png","hash":"4fd1275fd988584811cf710207eb077f2306f271","modified":1524321449182},{"_id":"themes/Yelee/source/img/虾米音乐.png","hash":"a0039b049779b1f37c0b0b91760943b7bf25c8f1","modified":1524321449183},{"_id":"themes/Yelee/source/img/豆瓣.png","hash":"f1fc97f98612bcdf4a681542e5388483b40a5300","modified":1524321449183},{"_id":"themes/Yelee/source/js/GithubRepoWidget.js","hash":"5fb1bf6cf973062771ddf275ceeca5bc69c81c77","modified":1524321449184},{"_id":"themes/Yelee/source/js/instagram.js","hash":"81e13cacf4947118ed1920e59b04ccf6beef6b86","modified":1524321449184},{"_id":"themes/Yelee/source/js/mobile.js","hash":"8abc32d18f16db56f51caad607cffb6ca756eca9","modified":1524321449185},{"_id":"themes/Yelee/source/js/main.js","hash":"369774a7ff45a2e5117a796330a04aeb50a61fdf","modified":1524321449184},{"_id":"themes/Yelee/source/js/pc.js","hash":"bc289c5dc610e2a34d308daeb9adea96d01f7788","modified":1524321449185},{"_id":"themes/Yelee/source/js/search.js","hash":"001e324844e63f3bfb6f60d173b9c6954127be0b","modified":1524321449186},{"_id":"themes/Yelee/source/js/toc.js","hash":"973c1a4e2c9de8f4f662b99623027658fe6d94c2","modified":1524321449186},{"_id":"themes/Yelee/source/background/bg-5.jpg","hash":"e4a3631b6b0f94ebce30a6f01ecb2b6ed7cfdb0b","modified":1524321449164},{"_id":"themes/Yelee/source/background/bg-6.jpg","hash":"51b427f07ffc6f2ad97651f23cc16e8f19ed02f9","modified":1524321449165},{"_id":"themes/Yelee/layout/_partial/comments/click2show.ejs","hash":"ecc4d3ca997c6fd127e00fa2edf0158b925d1d3e","modified":1524321449144},{"_id":"themes/Yelee/layout/_partial/comments/disqus.ejs","hash":"df7ee469b648b12b5ee3104ef513d54cbb7418af","modified":1524321449145},{"_id":"themes/Yelee/layout/_partial/comments/duoshuo.ejs","hash":"e7f12f1246a67a5b556c2d5b37dc78733f1cf15a","modified":1524321449145},{"_id":"themes/Yelee/layout/_partial/comments/count-comment.ejs","hash":"ada2032e401b73b312c50b75bdbb8ee71d5a291e","modified":1524321449145},{"_id":"themes/Yelee/layout/_partial/comments/youyan.ejs","hash":"d150085faee4809ba50f69c55d904605699040cb","modified":1524321449146},{"_id":"themes/Yelee/layout/_partial/post/category.ejs","hash":"08c8d98bc6a73d3f72a3b0b30521ff28e1b657a7","modified":1524321449150},{"_id":"themes/Yelee/layout/_partial/post/date.ejs","hash":"329ed372296a86bce73ff8936af5601723fdd70a","modified":1524321449151},{"_id":"themes/Yelee/layout/_partial/post/share.ejs","hash":"58c2db54a9867aaafe68a7f052b04701c7c3df0f","modified":1524321449151},{"_id":"themes/Yelee/layout/_partial/post/nav.ejs","hash":"6f531dbc9cc7ae42d2486d6707f826cfe7d9d8bc","modified":1524321449151},{"_id":"themes/Yelee/layout/_partial/post/tag.ejs","hash":"7d2693a1162bf26e4b1ae9b789e0b2a2637ddbd5","modified":1524321449152},{"_id":"themes/Yelee/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1524321449152},{"_id":"themes/Yelee/source/background/backup/bg-2.jpg","hash":"7ae358f3ab8b41558444053400e796c41b3ba0e2","modified":1524321449158},{"_id":"themes/Yelee/source/background/backup/bg-1.jpg","hash":"31d7bb15211000c05656899302f8ec9ee3de0e9f","modified":1524321449158},{"_id":"themes/Yelee/source/background/backup/bg-3.jpg","hash":"1a06d3a660bfb99b62d760e4e1e09de168a4c74c","modified":1524321449159},{"_id":"themes/Yelee/source/background/backup/bg-4.jpg","hash":"6df1383d0f6134016d844df9abb740a6e0c0b2c5","modified":1524321449160},{"_id":"themes/Yelee/source/css/_partial/archive.styl","hash":"102c23dbb6cde3cbfca3b151c742e0d77911186e","modified":1524321449166},{"_id":"themes/Yelee/source/css/_partial/article.styl","hash":"190828c822096bb3098a7d14c3340eb004057aa0","modified":1524321449166},{"_id":"themes/Yelee/source/css/_partial/header.styl","hash":"67e59feb18eee6026717cb440d86ab9551782628","modified":1524371684401},{"_id":"themes/Yelee/source/css/_partial/footer.styl","hash":"a419108f1b820c59fcc56d218bfaaa4ffc4f1d4d","modified":1524321449170},{"_id":"themes/Yelee/source/css/_partial/highlight.styl","hash":"4e34bf9340ce9b15d2d59fc4ea761d1d110927cf","modified":1524321449170},{"_id":"themes/Yelee/source/css/_partial/instagram.styl","hash":"a093443add2f529396d6b6bdef1675bc3acf3958","modified":1524321449171},{"_id":"themes/Yelee/source/css/_partial/main.styl","hash":"405db411896f3c7de9e7dd27e58c920fb90b9834","modified":1524321449171},{"_id":"themes/Yelee/source/css/_partial/mobile-slider.styl","hash":"39db458d4e9f6973afc1390b4d3fc0291fff4c40","modified":1524321449172},{"_id":"themes/Yelee/source/css/_partial/mobile.styl","hash":"dfb20f2515a26d75e42fe09741e91cc889426b11","modified":1524321449172},{"_id":"themes/Yelee/source/css/_partial/page.styl","hash":"ca3f871adf8fdb296e4394070605dded53d93cb2","modified":1524321449172},{"_id":"themes/Yelee/source/css/_partial/scroll.styl","hash":"f32deb9192568a2ea789d77a23a08d07f4e57d59","modified":1524321449173},{"_id":"themes/Yelee/source/css/_partial/search.styl","hash":"688ff535a6005be02d947be75d22cfe1f8ce72cd","modified":1524321449173},{"_id":"themes/Yelee/source/css/_partial/share.styl","hash":"88c1277397b71eb1f3473a94d9542314f983cd09","modified":1524321449173},{"_id":"themes/Yelee/source/css/_partial/tagcloud.styl","hash":"b38b275728bfe11809defe1077b03cb423c3c92f","modified":1524321449174},{"_id":"themes/Yelee/source/css/_partial/toc.styl","hash":"8f2a057dc072285093e37f1f645e9cb53608642f","modified":1524321449174},{"_id":"themes/Yelee/source/css/_partial/wheelmenu.styl","hash":"9e57421eab562ea13d0ed2b2e1415eee79fa23d0","modified":1524321449174},{"_id":"themes/Yelee/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1524321449175},{"_id":"themes/Yelee/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1524321449175},{"_id":"themes/Yelee/source/css/_partial/customise/blockquote.styl","hash":"5e6edb9ad49288743ed550a2bd8c9a3c8e208455","modified":1524321449167},{"_id":"themes/Yelee/source/css/_partial/customise/code-block.styl","hash":"4db1a992a06fd92b779f0afc9bb8bb3667bdb101","modified":1524321449167},{"_id":"themes/Yelee/source/css/_partial/customise/heading.styl","hash":"c29799f09ebd87767fd9cc3b1fa795db44a94670","modified":1524321449168},{"_id":"themes/Yelee/source/css/_partial/customise/color-scheme.styl","hash":"b58262a9f8903e75df431291745e19ccd8ff243a","modified":1524321449168},{"_id":"themes/Yelee/source/css/_partial/customise/inline-code.styl","hash":"a15292b2b3541ea022c0fb7441875192dee5ad9d","modified":1524321449169},{"_id":"themes/Yelee/source/css/_partial/customise/social-icon.styl","hash":"bfa5c863d474266f32a570e34a0effda964f7f40","modified":1524321449169},{"_id":"themes/Yelee/source/css/_partial/customise/list.styl","hash":"7db683e2837a078ad7817fb88914535588e49cfa","modified":1524321449169},{"_id":"public/atom.xml","hash":"f804179b4f2d23295e5315d75978f5950c022420","modified":1524371719137},{"_id":"public/search.xml","hash":"6391e325a24ce8ede4b8d168489f927ad7325601","modified":1524371719242},{"_id":"public/404.html","hash":"86dc80d6282d01687666e4fbd5270f6aa1f6f897","modified":1524371719248},{"_id":"public/about/index.html","hash":"fe18c9dc79cbd9b449557b139a58046ce625cbb5","modified":1524371719248},{"_id":"public/archives/index.html","hash":"c5065d10f7c71573136907cd876a5fe6bd977789","modified":1524371719248},{"_id":"public/archives/2018/index.html","hash":"54351142a0fbd96280f67e9d743adc9738a91e2d","modified":1524371719248},{"_id":"public/archives/2018/04/index.html","hash":"4b41606eaa80a227c4d1ceb4a94ef6bf99386e78","modified":1524371719248},{"_id":"public/index.html","hash":"d96b1039f1f7c229dd093b286e6e7bb482718b37","modified":1524371719248},{"_id":"public/tags/SpringMVC-自定义注解验证器/index.html","hash":"2c45c89d4a47cf45a5f32e12f525c0afd5ea3f4f","modified":1524371719248},{"_id":"public/tags/maven中央仓库/index.html","hash":"96d6fb77bd0d214b355a431f2a8c3bae886be364","modified":1524371719248},{"_id":"public/2018/04/21/SpringMVC自定义注解验证器/index.html","hash":"abde308b981a9cabdc877d4049cf38aa43744095","modified":1524371719249},{"_id":"public/2018/04/21/将你自己的项目发布到maven中央仓库/index.html","hash":"11bd0644072dcd94adb2e240a8ba61aecc62c8f0","modified":1524371719249},{"_id":"public/CNAME","hash":"73ec81ff59cc8a729648643fa004f73d9d289e30","modified":1524371719258},{"_id":"public/apple-touch-icon.png","hash":"c0fda117fa166d63b9eb690cc5e4fb2caaf493b3","modified":1524371719258},{"_id":"public/background/bg-2.jpg","hash":"d1e0b92e8fa822e44d185b5e1bf94ab47bc98a0a","modified":1524371719258},{"_id":"public/background/bg-1.jpg","hash":"9a5241de4c880f13a278f6980bf11d4dfb214d82","modified":1524371719258},{"_id":"public/background/bg-3.jpg","hash":"d476909f06fe8267c676952e3582bf9e9ff73585","modified":1524371719258},{"_id":"public/background/bg-4.jpg","hash":"8e80d0b7786c3bf7b9648c0190719e78001e9eeb","modified":1524371719259},{"_id":"public/img/AcFun.png","hash":"df6b0fa39ced4dc988359fc7b7cd1e5403de08a6","modified":1524371719259},{"_id":"public/img/CSDN.png","hash":"59f7d89eda8a7310a0ee1607e153c0829af7eb6e","modified":1524371719259},{"_id":"public/img/Coding.png","hash":"afb4bce19bebf61e3c486fd5199369d6eb191b78","modified":1524371719259},{"_id":"public/img/LOFTER.png","hash":"88670eaea8612839e9d6a40a3636e4231ab56c0f","modified":1524371719259},{"_id":"public/img/Plunker.png","hash":"14a0054b9b4a0e459987f34b9ab48ab22dbe5cf9","modified":1524371719259},{"_id":"public/img/Quora.png","hash":"1a624ade0d07f2482b21bef1e2a5ddd0110ba352","modified":1524371719259},{"_id":"public/img/SegmentFault.png","hash":"1afbc7e575e2e9ed9404be84a3f92f7ca8345a9c","modified":1524371719259},{"_id":"public/img/TiddlyWiki.png","hash":"b7f68f8f9c45561a9455aee0bfb80e35cae6f8df","modified":1524371719259},{"_id":"public/img/V2EX.png","hash":"d0768de8555f9be0ee8ce956198cef454d4e4d7c","modified":1524371719259},{"_id":"public/img/avatar.png","hash":"e4bca3d60087cd6e775d8e2aa2bf0d35e3859592","modified":1524371719260},{"_id":"public/img/bilibili.png","hash":"be37b7e9a091c8547b8ee8b9d29583af8ded61c0","modified":1524371719260},{"_id":"public/img/face.jpg","hash":"b6c103cefaace24b16de0e1f78c41992b33f3092","modified":1524371719260},{"_id":"public/img/niconico.png","hash":"fabc7ca45e9ee5698db33a25de8b1f8a7c7d6723","modified":1524371719260},{"_id":"public/img/scrollbar_arrow.png","hash":"af987032f2171867bb58b165d2180eb5dcbea637","modified":1524371719260},{"_id":"public/img/博客园.png","hash":"5ff6f4c9f1fc1695217a57436d58b246d9d2f197","modified":1524371719260},{"_id":"public/img/新浪微博.png","hash":"7a145ed1daee0c172cda77098f4254fc21f9eeee","modified":1524371719260},{"_id":"public/img/知乎.png","hash":"ed6d3c304789e112d09f40784fa6add1f1a38bd6","modified":1524371719260},{"_id":"public/img/简书.png","hash":"5c91ee83cab4abe160240e09de345b6935c8cb37","modified":1524371719260},{"_id":"public/img/虾米音乐.png","hash":"a0039b049779b1f37c0b0b91760943b7bf25c8f1","modified":1524371719260},{"_id":"public/img/网易云音乐.png","hash":"4fd1275fd988584811cf710207eb077f2306f271","modified":1524371719260},{"_id":"public/img/豆瓣.png","hash":"f1fc97f98612bcdf4a681542e5388483b40a5300","modified":1524371719260},{"_id":"public/background/backup/bg-2.jpg","hash":"7ae358f3ab8b41558444053400e796c41b3ba0e2","modified":1524371719261},{"_id":"public/background/backup/bg-1.jpg","hash":"31d7bb15211000c05656899302f8ec9ee3de0e9f","modified":1524371719261},{"_id":"public/background/backup/bg-3.jpg","hash":"1a06d3a660bfb99b62d760e4e1e09de168a4c74c","modified":1524371719261},{"_id":"public/background/backup/bg-4.jpg","hash":"6df1383d0f6134016d844df9abb740a6e0c0b2c5","modified":1524371719261},{"_id":"public/background/bg-5.jpg","hash":"e4a3631b6b0f94ebce30a6f01ecb2b6ed7cfdb0b","modified":1524371720105},{"_id":"public/background/bg-6.jpg","hash":"51b427f07ffc6f2ad97651f23cc16e8f19ed02f9","modified":1524371720107},{"_id":"public/js/GithubRepoWidget.js","hash":"624e81a3b0e57495b0c0e0b3e056296c6e8ae5df","modified":1524371720111},{"_id":"public/js/instagram.js","hash":"f19adbcc0dac33536bc6660598059048ec901882","modified":1524371720111},{"_id":"public/js/pc.js","hash":"19a1660b10358046e7a1f398284491519b2ffd47","modified":1524371720112},{"_id":"public/js/mobile.js","hash":"0f4c1fcd6df47a196ed9495c225173402aa7d769","modified":1524371720112},{"_id":"public/js/search.js","hash":"b456aaab98bbc3b0906f8a16d1e6e4f74dfcffda","modified":1524371720112},{"_id":"public/js/main.js","hash":"d58bbc593d94d48e85d4ebfb002910444080cb06","modified":1524371720112},{"_id":"public/js/toc.js","hash":"72ba1228fc1a44df45b8f4b562eba78594f13016","modified":1524371720112},{"_id":"public/css/style.css","hash":"ec0538a0b309fa4cc5d71fcf20d3d5f32f9983fe","modified":1524371720112}],"Category":[],"Data":[],"Page":[{"_content":"<script type=\"text/javascript\" src=\"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js\" charset=\"utf-8\"></script>","source":"404.html","raw":"<script type=\"text/javascript\" src=\"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js\" charset=\"utf-8\"></script>","date":"2018-04-21T15:23:23.976Z","updated":"2018-04-21T15:07:29.833Z","path":"404.html","title":"","comments":1,"layout":"page","_id":"cjgabk9s50000v4g83pep6mfj","content":"<script type=\"text/javascript\" src=\"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js\" charset=\"utf-8\"></script>","site":{"data":{}},"excerpt":"","more":"<script type=\"text/javascript\" src=\"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js\" charset=\"utf-8\"></script>"},{"title":"about","date":"2018-04-21T14:59:41.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2018-04-21 22:59:41\n---\n","updated":"2018-04-21T14:59:41.880Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjgabk9tt0001v4g8kv9rc9h5","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"SpringMVC自定义注解验证器","date":"2018-04-21T15:35:41.000Z","_content":"<Excerpt in index | 首页摘要> \n# 背景\n大家可能会问,spring MVC支持验证注解,如常用的hibernate-validator,为什么要自己实现一套呢?\n最近做一个APP的服务端接口,项目中有自己的业务返回码.spring MVC支持的注解验证器无法设置验证不通过的时候的返回码,各种不方便,所以思前想后还是自己实现了一套.废话不多说,开始正文.\n+<!-- more -->\n<The rest of contents | 余下全文>\n# 状态码枚举\n状态码枚举中有两个属性: 状态码 和 对应的默认消息\n```\npublic enum ResponseCodeEnum {\n\n    _001(\"001\", \"用户未登录\");\n\n    /**\n     * @Fields code : 状态码\n     */\n    private String code;\n    \n    /**\n     * @Fields defaultMessage : 默认消息\n     */\n    private String defaultMessage;\n    \n    private ResponseCodeEnum (String code, String defaultMessage) {\n\tthis.code = code;\n\tthis.defaultMessage = defaultMessage;\n    }\n\n    @JsonValue  // com.fasterxml.jackson.annotation.JsonValue, 项目中用了 jackson 做为 \n                          // springMVC的JSON转换器,该注解表式这个方法的返回值生成到JSON中,其他忽略\n    public String getCode() {\n        return code;\n    }\n\n    public String getDefaultMessage() {\n        return defaultMessage;\n    }\n}\n```\n# 自定义业务异常\n业务数据(客户端提交的)验证不过等各种业务处理中的不通过,统一使用该异常,该异常被捕获后会生成统一格式的消息返回到客户端\n```\npublic class CustomValidatorException extends RuntimeException {\n\n    private static final long serialVersionUID = 5968495544349929856L;\n    \n    private ResponseCodeEnum statusCode;\n    \n    private String errorMsg;\n    \n    public CustomValidatorException (ResponseCodeEnum statusCode, String errorMsg) {\n\tthis.statusCode = statusCode;\n\tthis.errorMsg = errorMsg;\n    }\n\n    public ResponseCodeEnum getStatusCode() {\n        return statusCode;\n    }\n\n    public String getErrorMsg() {\n        return errorMsg;\n    }\n\n}\n```\n# 验证器接口\n该接口作为验证器注解必须实现的接口,负责真正的验证\n```\npublic interface IAnnotationsValidator {\n\n    public void doValidator(Object object, Annotation annotation) throws CustomValidatorException ;\n    \n}\n```\n# 验证器注解\n验证器相关注解定义,首先得有几个基础注解\n## 基础注解\n##### EnableValidator  负责开启验证,使用了该注解的参数Bean才会被验证\n```\n@Retention(RetentionPolicy.RUNTIME)\n@Target({ElementType.TYPE})\n@Documented\npublic @interface EnableValidator {\n\n}\n```\n##### CustomValidator 该注解作用于注解(该注解只能被其他注解使用,不能被非注解的类使用),使用了该注解的注解才被做为验证器注解\n```\n@Retention(RetentionPolicy.RUNTIME)\n@Target({ElementType.ANNOTATION_TYPE})\n@Documented\npublic @interface CustomValidator {\n\n}\n```\n## 验证器注解\n这里先只写2个注解吧,其他的可以由其他开发人员开发\n##### Required 必传参数注解,只有这个注解验证参数是否有值,其他注解有值才验证,没值直接通过\n```\n@Retention(RetentionPolicy.RUNTIME)\n@Target({ElementType.FIELD})\n@Documented\n@Inherited  // 子类可以继承父类的注解\n@CustomValidator\npublic @interface Required {\n\n    /**\n     * @Title: responseCode\n     * @Description: 验证失败(不通过)的code\n     * @return\n     */\n    ResponseCodeEnum responseCode();\n    \n    /**\n     * @Title: validatFailMessage\n     * @Description: 验证失败(不通过)的文字消息,可为空,默认使用ResponseCodeEnum对应的消息\n     * @return\n     */\n    String validatFailMessage() default \"\";\n    \n    /**\n     * @Fields validatorSpringBeanName : 此注解对应的验证器的springBean名称,该名称在定义注解的时候写死\n     */\n    final String validatorSpringBeanName = \"requiredValidator\";\n    \n}\n```\nRequired  注解中的几个属性是所有验证器注解都必须有的,大家可能注意到了validatorSpringBeanName , 没错,切面就是根据这个在spring容器中拿验证器实现的\n##### NotEmpty 用于验证字符串,List,集合,数组,Map等不能为空,这里的空不包括null,是null以外的空\n```\n@Retention(RetentionPolicy.RUNTIME)\n@Target({ElementType.FIELD})\n@Documented\n@Inherited  // 子类可以继承父类的注解\n@CustomValidator\npublic @interface NotEmpty {\n\n    /**\n     * @Title: responseCode\n     * @Description: 验证失败(不通过)的code\n     * @return\n     */\n    ResponseCodeEnum responseCode();\n    \n    /**\n     * @Title: validatFailMessage\n     * @Description: 验证失败(不通过)的文字消息,可为空,默认使用ResponseStatusCodeEnum对应的消息\n     * @return\n     */\n    String validatFailMessage() default \"\";\n    \n    /**\n     * @Fields validatorSpringBeanName : 此注解对应的验证器的springBean名称,该名称在定义注解的时候写死\n     */\n    final String validatorSpringBeanName = \"notEmptyValidator\";\n    \n}\n```\n除了上面两个验证器中的3个必须有的属性,还可以定义其他的属性,比如验证字符串长度的验证器,可以加一个长度的属性. 这些属性可以在验证器实现中获取\n## 验证器(注解)实现\n##### RequiredImpl: Required 的实现\n```\n@Component(\"requiredValidator\")\npublic class RequiredImpl implements IAnnotationsValidator {\n\n    @Override\n    public void doValidator(Object object, Annotation annotation) throws CustomValidatorException {\n        Required notEmpty = (Required) annotation;\n        ResponseStatusCodeEnum statusCode = notEmpty.responseStatusCode();\n        String message = notEmpty.validatFailMessage();\n        // TODO 获取验证器注解中的其他属性\n        // TODO 验证,如果验证不通过,抛出 CustomValidatorException \n    }\n\n}\n```\n##### NotEmptyImpl: NotEmpty 的实现,具体参考 Required 的实现\n# AOP\n自定义验证器的核心实现,没有它,上面的东西全是白费\n```\npublic class ValidatorAdvise {\n    \n    private static Logger logger = LoggerFactory.getLogger(ValidatorAdvise .class);\n\n    public Object validator(ProceedingJoinPoint pjp) {\n\t// 获取被拦截的方法的参数\n\tObject[] args = pjp.getArgs();\n\t// 遍历该方法的所有参数\n\tif (args != null && args.length > 0) {\n\t    for (Object arg : args) {\n\t\tClass<?> argClassz = arg.getClass();\n\t\tif (argClassz.getAnnotation(EnableValidator.class) != null) { // 只有当该参数有EnableValidator注解,也就是开启了验证才处理\n\t\t    List<Field> fieldList = getAllFields(null, argClassz); // 获取所有字段\n\t\t    // 遍历所有字段,并找出有注解的\n\t\t    for (Field field : fieldList) {\n\t\t\t// 检查每个字段的注解,有注解的才处理\n\t\t\tAnnotation[] fieldAnns = field.getAnnotations();\n\t\t\tif (fieldAnns != null && fieldAnns.length > 0) {\n\t\t\t    // 遍历该字段的注解,找到验证器的注解\n\t\t\t    for (Annotation fieldAnn : fieldAnns) {\n\t\t\t\ttry {\n\t\t\t\t    // 检查该注解是否有@CustomValidator,有就说明是验证器\n\t\t\t\t    if (fieldAnn.annotationType().getAnnotation(CustomValidator.class) != null) {\n\t\t\t\t\t// 通过反射拿验证器的springBeanName字段,不为null才处理\n\t\t\t\t\tField validatorSpringBeanNameFiled = fieldAnn.annotationType().getDeclaredField(\"validatorSpringBeanName\");\n\t\t\t\t\tif (validatorSpringBeanNameFiled != null) {\n\t\t\t\t\t    // 通过spring拿到验证器进行验证,先拿验证器的springBeanName\n\t\t\t\t\t    Object validatorSpringBeanName = validatorSpringBeanNameFiled.get(fieldAnn);\n\t\t\t\t\t    if(StringUtil.isNotNull(validatorSpringBeanName)) {\n\t\t\t\t\t\t// 名字有值,从spring容器中拿对应的验证器\n\t\t\t\t\t\tIAnnotationsValidator annotationsValidator = SystemApplicationContext.SPRING_CONTEXT.getBean((String)validatorSpringBeanName, IAnnotationsValidator.class);\n\t\t\t\t\t\tif(annotationsValidator != null) {\n\t\t\t\t\t\t    // 验证器不为空,调用验证器\n\t\t\t\t\t\t    field.setAccessible(true);\n\t\t\t\t\t\t    try {\n\t\t\t\t\t\t\tannotationsValidator.doValidator(field.get(arg), fieldAnn);\n\t\t\t\t\t\t    } catch (CustomValidatorException ex) {\n\t\t\t\t\t\t\tString errMsg = null;\n\t\t\t\t\t\t\tif(StringUtil.isNull(ex.getErrorMsg())) {\n\t\t\t\t\t\t\t    errMsg = ex.getStatusCode().getDefaultMessage();\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t    errMsg = ex.getErrorMsg();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t        return makeResponse(ex.getStatusCode(), errMsg);\n\t\t\t\t\t\t    } catch (Exception ex) {\n\t\t\t\t\t\t\tlogger.error(\"验证器【{}】里抛出了 CustomValidatorException 以外的异常,请验证器开发人员注意!!!\", ex, fieldAnn.annotationType());\n\t\t\t\t\t\t        return makeResponse(ResponseCodeEnum._500, \"服务器内部错误:====\" + ex.getMessage());\n\t\t\t\t\t\t    }\n\t\t\t\t\t\t}\n\t\t\t\t\t    }\n\t\t\t\t\t}\n\t\t\t\t    }\n\t\t\t\t} catch (NoSuchFieldException | SecurityException | IllegalArgumentException | IllegalAccessException e) {\n\t\t\t\t    logger.error(\"验证器处理切面出了点问题\", e);\n\t\t\t\t}\n\n\t\t\t    }\n\t\t\t}\n\t\t    }\n\t\t}\n\t    }\n\t}\n\tObject ret = null;\n\ttry {\n\t    ret = pjp.proceed();\n\t} catch (Throwable e) {\n\t    throw new RuntimeException(\"AOP Point Cut ValidatorAdvise Throw Exception :\", e);\n\t}\n\treturn ret;\n    }\n    \n    /**\n     * @Title: getAllFields\n     * @Description: 递归获取该类的所有属性包括父类的爷爷类的...祖宗类的\n     * @param fieldList\n     * @param classz\n     * @return\n     */\n    private List<Field> getAllFields(List<Field> fieldList, Class<?> classz) {\n\tif(classz == null) {\n\t    return fieldList;\n\t}\n\tif(fieldList == null) {\n\t    fieldList = Arrays.asList(classz.getDeclaredFields());  // 获得该类的所有字段,但不包括父类的\n\t} else {\n\t    Collections.addAll(fieldList, classz.getDeclaredFields());  // 获得该类的所有字段,但不包括父类的\n\t}\n\treturn getAllFields(fieldList, classz.getSuperclass());\n    }\n    \n    /**\n     * @Title: makeResponse\n     * @Description: 生成统一 Response\n     * @param statusCode\n     * @param statusMessage\n     * @return\n     */\n    private AppApiResponse<?> makeResponse(ResponseCodeEnum statusCode, String statusMessage) {\n\tAppApiResponse<Object> response = new AppApiResponse<>(new Object());\n\tAppApiResponseHeader respHeader = new AppApiResponseHeader();\n        response.setHeader(respHeader);\n        respHeader.setStatusCode(statusCode);\n        respHeader.setStatusMessage(statusMessage);\n        return response;\n    }\n    \n}\n```\n# 捕获异常,生成统一格式响应\n利用springMVC的@ControllerAdvice捕获所有来自 Controller 的异常\n```\n@ControllerAdvice(basePackages = \"org.test.appApi.actions\")\npublic class ErrorHandlingControllerAdvice {\n\n    private static Logger logger = LoggerFactory.getLogger(ErrorHandlingControllerAdvice.class);\n    \n    /**\n     * @Title: handleValidationError\n     * @Description: 处理表单验证,业务异常\n     * @param ex\n     * @return\n     */\n    @ExceptionHandler(CustomValidatorException.class)\n    @ResponseStatus(HttpStatus.OK)\n    @ResponseBody\n    public AppApiResponse<?> handleValidationError(CustomValidatorException ex) {\n\tString errMsg = null;\n\tif(StringUtil.isNull(ex.getErrorMsg())) {\n\t    errMsg = ex.getStatusCode().getDefaultMessage();\n\t} else {\n\t    errMsg = ex.getErrorMsg();\n\t}\n        return makeResponse(ex.getStatusCode(), errMsg);\n    }\n    \n    /**\n     * @Title: handleValidationError\n     * @Description: 处理其他异常\n     * @param ex\n     * @return\n     */\n    @ExceptionHandler(Exception.class)\n    @ResponseStatus(HttpStatus.OK)\n    @ResponseBody\n    public AppApiResponse<?> handleValidationError(Exception ex) {\n\tlogger.error(\"服务器内部错误:====\", ex);\n        return makeResponse(ResponseCodeEnum._500, \"服务器内部错误:====\" + ex.getMessage());\n    }\n    \n    private AppApiResponse<?> makeResponse(ResponseCodeEnum statusCode, String statusMessage) {\n\tAppApiResponse<Object> response = new AppApiResponse<>(new Object());\n\tAppApiResponseHeader respHeader = new AppApiResponseHeader();\n        response.setHeader(respHeader);\n        respHeader.setStatusCode(statusCode);\n        respHeader.setStatusMessage(statusMessage);\n        return response;\n    }\n    \n}\n```\n# 配制自定义验证器切面\nspringMVC的配制文件中增加\n```\n<bean id=\"validatorAdvise\" class=\"org.test.appApi.actions.validator.advises.ValidatorAdvise\" />\n\t<aop:config>\n\t\t<aop:aspect id=\"validatorAop\" ref=\"validatorAdvise\">\n\t\t\t<aop:pointcut id=\"validator\" expression=\"execution(* org.test.appApi.actions..*Action.*(..)) \n\t\t\tand !execution(* org.test.appApi.actions..*Action.initBinder(..)) \n\t\t\tand !execution(* org.test.appApi.actions..*Action.set*(..)) \n\t\t\tand !execution(* org.test.appApi.actions..*Action.get*(..))\" />\n\t\t\t<aop:around pointcut-ref=\"validator\" method=\"validator\" />\n\t\t</aop:aspect>\n\t</aop:config>\n```\n# 使用注解\n使用注解很简单,springMVC的控制器中的方法可以定义任意类型的参数,把各种参数放到一个java bean中,并在该bean使用类注解 @EnableValidator开启验证,并在需要验证的类属性上使用对应的验证器注解就行,验证器注解可以多个混合使用\n# 写在结束\n到这里,自定义验证器的开发就完成了.也许大家有更好的办法,欢迎讨论.也许spring MVC可以有办法实现我想做的但我不知道,也欢迎大家指出.","source":"_posts/SpringMVC自定义注解验证器.md","raw":"---\ntitle: SpringMVC自定义注解验证器\ndate: 2018-04-21 23:35:41\ntags: SpringMVC 自定义注解验证器\n---\n<Excerpt in index | 首页摘要> \n# 背景\n大家可能会问,spring MVC支持验证注解,如常用的hibernate-validator,为什么要自己实现一套呢?\n最近做一个APP的服务端接口,项目中有自己的业务返回码.spring MVC支持的注解验证器无法设置验证不通过的时候的返回码,各种不方便,所以思前想后还是自己实现了一套.废话不多说,开始正文.\n+<!-- more -->\n<The rest of contents | 余下全文>\n# 状态码枚举\n状态码枚举中有两个属性: 状态码 和 对应的默认消息\n```\npublic enum ResponseCodeEnum {\n\n    _001(\"001\", \"用户未登录\");\n\n    /**\n     * @Fields code : 状态码\n     */\n    private String code;\n    \n    /**\n     * @Fields defaultMessage : 默认消息\n     */\n    private String defaultMessage;\n    \n    private ResponseCodeEnum (String code, String defaultMessage) {\n\tthis.code = code;\n\tthis.defaultMessage = defaultMessage;\n    }\n\n    @JsonValue  // com.fasterxml.jackson.annotation.JsonValue, 项目中用了 jackson 做为 \n                          // springMVC的JSON转换器,该注解表式这个方法的返回值生成到JSON中,其他忽略\n    public String getCode() {\n        return code;\n    }\n\n    public String getDefaultMessage() {\n        return defaultMessage;\n    }\n}\n```\n# 自定义业务异常\n业务数据(客户端提交的)验证不过等各种业务处理中的不通过,统一使用该异常,该异常被捕获后会生成统一格式的消息返回到客户端\n```\npublic class CustomValidatorException extends RuntimeException {\n\n    private static final long serialVersionUID = 5968495544349929856L;\n    \n    private ResponseCodeEnum statusCode;\n    \n    private String errorMsg;\n    \n    public CustomValidatorException (ResponseCodeEnum statusCode, String errorMsg) {\n\tthis.statusCode = statusCode;\n\tthis.errorMsg = errorMsg;\n    }\n\n    public ResponseCodeEnum getStatusCode() {\n        return statusCode;\n    }\n\n    public String getErrorMsg() {\n        return errorMsg;\n    }\n\n}\n```\n# 验证器接口\n该接口作为验证器注解必须实现的接口,负责真正的验证\n```\npublic interface IAnnotationsValidator {\n\n    public void doValidator(Object object, Annotation annotation) throws CustomValidatorException ;\n    \n}\n```\n# 验证器注解\n验证器相关注解定义,首先得有几个基础注解\n## 基础注解\n##### EnableValidator  负责开启验证,使用了该注解的参数Bean才会被验证\n```\n@Retention(RetentionPolicy.RUNTIME)\n@Target({ElementType.TYPE})\n@Documented\npublic @interface EnableValidator {\n\n}\n```\n##### CustomValidator 该注解作用于注解(该注解只能被其他注解使用,不能被非注解的类使用),使用了该注解的注解才被做为验证器注解\n```\n@Retention(RetentionPolicy.RUNTIME)\n@Target({ElementType.ANNOTATION_TYPE})\n@Documented\npublic @interface CustomValidator {\n\n}\n```\n## 验证器注解\n这里先只写2个注解吧,其他的可以由其他开发人员开发\n##### Required 必传参数注解,只有这个注解验证参数是否有值,其他注解有值才验证,没值直接通过\n```\n@Retention(RetentionPolicy.RUNTIME)\n@Target({ElementType.FIELD})\n@Documented\n@Inherited  // 子类可以继承父类的注解\n@CustomValidator\npublic @interface Required {\n\n    /**\n     * @Title: responseCode\n     * @Description: 验证失败(不通过)的code\n     * @return\n     */\n    ResponseCodeEnum responseCode();\n    \n    /**\n     * @Title: validatFailMessage\n     * @Description: 验证失败(不通过)的文字消息,可为空,默认使用ResponseCodeEnum对应的消息\n     * @return\n     */\n    String validatFailMessage() default \"\";\n    \n    /**\n     * @Fields validatorSpringBeanName : 此注解对应的验证器的springBean名称,该名称在定义注解的时候写死\n     */\n    final String validatorSpringBeanName = \"requiredValidator\";\n    \n}\n```\nRequired  注解中的几个属性是所有验证器注解都必须有的,大家可能注意到了validatorSpringBeanName , 没错,切面就是根据这个在spring容器中拿验证器实现的\n##### NotEmpty 用于验证字符串,List,集合,数组,Map等不能为空,这里的空不包括null,是null以外的空\n```\n@Retention(RetentionPolicy.RUNTIME)\n@Target({ElementType.FIELD})\n@Documented\n@Inherited  // 子类可以继承父类的注解\n@CustomValidator\npublic @interface NotEmpty {\n\n    /**\n     * @Title: responseCode\n     * @Description: 验证失败(不通过)的code\n     * @return\n     */\n    ResponseCodeEnum responseCode();\n    \n    /**\n     * @Title: validatFailMessage\n     * @Description: 验证失败(不通过)的文字消息,可为空,默认使用ResponseStatusCodeEnum对应的消息\n     * @return\n     */\n    String validatFailMessage() default \"\";\n    \n    /**\n     * @Fields validatorSpringBeanName : 此注解对应的验证器的springBean名称,该名称在定义注解的时候写死\n     */\n    final String validatorSpringBeanName = \"notEmptyValidator\";\n    \n}\n```\n除了上面两个验证器中的3个必须有的属性,还可以定义其他的属性,比如验证字符串长度的验证器,可以加一个长度的属性. 这些属性可以在验证器实现中获取\n## 验证器(注解)实现\n##### RequiredImpl: Required 的实现\n```\n@Component(\"requiredValidator\")\npublic class RequiredImpl implements IAnnotationsValidator {\n\n    @Override\n    public void doValidator(Object object, Annotation annotation) throws CustomValidatorException {\n        Required notEmpty = (Required) annotation;\n        ResponseStatusCodeEnum statusCode = notEmpty.responseStatusCode();\n        String message = notEmpty.validatFailMessage();\n        // TODO 获取验证器注解中的其他属性\n        // TODO 验证,如果验证不通过,抛出 CustomValidatorException \n    }\n\n}\n```\n##### NotEmptyImpl: NotEmpty 的实现,具体参考 Required 的实现\n# AOP\n自定义验证器的核心实现,没有它,上面的东西全是白费\n```\npublic class ValidatorAdvise {\n    \n    private static Logger logger = LoggerFactory.getLogger(ValidatorAdvise .class);\n\n    public Object validator(ProceedingJoinPoint pjp) {\n\t// 获取被拦截的方法的参数\n\tObject[] args = pjp.getArgs();\n\t// 遍历该方法的所有参数\n\tif (args != null && args.length > 0) {\n\t    for (Object arg : args) {\n\t\tClass<?> argClassz = arg.getClass();\n\t\tif (argClassz.getAnnotation(EnableValidator.class) != null) { // 只有当该参数有EnableValidator注解,也就是开启了验证才处理\n\t\t    List<Field> fieldList = getAllFields(null, argClassz); // 获取所有字段\n\t\t    // 遍历所有字段,并找出有注解的\n\t\t    for (Field field : fieldList) {\n\t\t\t// 检查每个字段的注解,有注解的才处理\n\t\t\tAnnotation[] fieldAnns = field.getAnnotations();\n\t\t\tif (fieldAnns != null && fieldAnns.length > 0) {\n\t\t\t    // 遍历该字段的注解,找到验证器的注解\n\t\t\t    for (Annotation fieldAnn : fieldAnns) {\n\t\t\t\ttry {\n\t\t\t\t    // 检查该注解是否有@CustomValidator,有就说明是验证器\n\t\t\t\t    if (fieldAnn.annotationType().getAnnotation(CustomValidator.class) != null) {\n\t\t\t\t\t// 通过反射拿验证器的springBeanName字段,不为null才处理\n\t\t\t\t\tField validatorSpringBeanNameFiled = fieldAnn.annotationType().getDeclaredField(\"validatorSpringBeanName\");\n\t\t\t\t\tif (validatorSpringBeanNameFiled != null) {\n\t\t\t\t\t    // 通过spring拿到验证器进行验证,先拿验证器的springBeanName\n\t\t\t\t\t    Object validatorSpringBeanName = validatorSpringBeanNameFiled.get(fieldAnn);\n\t\t\t\t\t    if(StringUtil.isNotNull(validatorSpringBeanName)) {\n\t\t\t\t\t\t// 名字有值,从spring容器中拿对应的验证器\n\t\t\t\t\t\tIAnnotationsValidator annotationsValidator = SystemApplicationContext.SPRING_CONTEXT.getBean((String)validatorSpringBeanName, IAnnotationsValidator.class);\n\t\t\t\t\t\tif(annotationsValidator != null) {\n\t\t\t\t\t\t    // 验证器不为空,调用验证器\n\t\t\t\t\t\t    field.setAccessible(true);\n\t\t\t\t\t\t    try {\n\t\t\t\t\t\t\tannotationsValidator.doValidator(field.get(arg), fieldAnn);\n\t\t\t\t\t\t    } catch (CustomValidatorException ex) {\n\t\t\t\t\t\t\tString errMsg = null;\n\t\t\t\t\t\t\tif(StringUtil.isNull(ex.getErrorMsg())) {\n\t\t\t\t\t\t\t    errMsg = ex.getStatusCode().getDefaultMessage();\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t    errMsg = ex.getErrorMsg();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t        return makeResponse(ex.getStatusCode(), errMsg);\n\t\t\t\t\t\t    } catch (Exception ex) {\n\t\t\t\t\t\t\tlogger.error(\"验证器【{}】里抛出了 CustomValidatorException 以外的异常,请验证器开发人员注意!!!\", ex, fieldAnn.annotationType());\n\t\t\t\t\t\t        return makeResponse(ResponseCodeEnum._500, \"服务器内部错误:====\" + ex.getMessage());\n\t\t\t\t\t\t    }\n\t\t\t\t\t\t}\n\t\t\t\t\t    }\n\t\t\t\t\t}\n\t\t\t\t    }\n\t\t\t\t} catch (NoSuchFieldException | SecurityException | IllegalArgumentException | IllegalAccessException e) {\n\t\t\t\t    logger.error(\"验证器处理切面出了点问题\", e);\n\t\t\t\t}\n\n\t\t\t    }\n\t\t\t}\n\t\t    }\n\t\t}\n\t    }\n\t}\n\tObject ret = null;\n\ttry {\n\t    ret = pjp.proceed();\n\t} catch (Throwable e) {\n\t    throw new RuntimeException(\"AOP Point Cut ValidatorAdvise Throw Exception :\", e);\n\t}\n\treturn ret;\n    }\n    \n    /**\n     * @Title: getAllFields\n     * @Description: 递归获取该类的所有属性包括父类的爷爷类的...祖宗类的\n     * @param fieldList\n     * @param classz\n     * @return\n     */\n    private List<Field> getAllFields(List<Field> fieldList, Class<?> classz) {\n\tif(classz == null) {\n\t    return fieldList;\n\t}\n\tif(fieldList == null) {\n\t    fieldList = Arrays.asList(classz.getDeclaredFields());  // 获得该类的所有字段,但不包括父类的\n\t} else {\n\t    Collections.addAll(fieldList, classz.getDeclaredFields());  // 获得该类的所有字段,但不包括父类的\n\t}\n\treturn getAllFields(fieldList, classz.getSuperclass());\n    }\n    \n    /**\n     * @Title: makeResponse\n     * @Description: 生成统一 Response\n     * @param statusCode\n     * @param statusMessage\n     * @return\n     */\n    private AppApiResponse<?> makeResponse(ResponseCodeEnum statusCode, String statusMessage) {\n\tAppApiResponse<Object> response = new AppApiResponse<>(new Object());\n\tAppApiResponseHeader respHeader = new AppApiResponseHeader();\n        response.setHeader(respHeader);\n        respHeader.setStatusCode(statusCode);\n        respHeader.setStatusMessage(statusMessage);\n        return response;\n    }\n    \n}\n```\n# 捕获异常,生成统一格式响应\n利用springMVC的@ControllerAdvice捕获所有来自 Controller 的异常\n```\n@ControllerAdvice(basePackages = \"org.test.appApi.actions\")\npublic class ErrorHandlingControllerAdvice {\n\n    private static Logger logger = LoggerFactory.getLogger(ErrorHandlingControllerAdvice.class);\n    \n    /**\n     * @Title: handleValidationError\n     * @Description: 处理表单验证,业务异常\n     * @param ex\n     * @return\n     */\n    @ExceptionHandler(CustomValidatorException.class)\n    @ResponseStatus(HttpStatus.OK)\n    @ResponseBody\n    public AppApiResponse<?> handleValidationError(CustomValidatorException ex) {\n\tString errMsg = null;\n\tif(StringUtil.isNull(ex.getErrorMsg())) {\n\t    errMsg = ex.getStatusCode().getDefaultMessage();\n\t} else {\n\t    errMsg = ex.getErrorMsg();\n\t}\n        return makeResponse(ex.getStatusCode(), errMsg);\n    }\n    \n    /**\n     * @Title: handleValidationError\n     * @Description: 处理其他异常\n     * @param ex\n     * @return\n     */\n    @ExceptionHandler(Exception.class)\n    @ResponseStatus(HttpStatus.OK)\n    @ResponseBody\n    public AppApiResponse<?> handleValidationError(Exception ex) {\n\tlogger.error(\"服务器内部错误:====\", ex);\n        return makeResponse(ResponseCodeEnum._500, \"服务器内部错误:====\" + ex.getMessage());\n    }\n    \n    private AppApiResponse<?> makeResponse(ResponseCodeEnum statusCode, String statusMessage) {\n\tAppApiResponse<Object> response = new AppApiResponse<>(new Object());\n\tAppApiResponseHeader respHeader = new AppApiResponseHeader();\n        response.setHeader(respHeader);\n        respHeader.setStatusCode(statusCode);\n        respHeader.setStatusMessage(statusMessage);\n        return response;\n    }\n    \n}\n```\n# 配制自定义验证器切面\nspringMVC的配制文件中增加\n```\n<bean id=\"validatorAdvise\" class=\"org.test.appApi.actions.validator.advises.ValidatorAdvise\" />\n\t<aop:config>\n\t\t<aop:aspect id=\"validatorAop\" ref=\"validatorAdvise\">\n\t\t\t<aop:pointcut id=\"validator\" expression=\"execution(* org.test.appApi.actions..*Action.*(..)) \n\t\t\tand !execution(* org.test.appApi.actions..*Action.initBinder(..)) \n\t\t\tand !execution(* org.test.appApi.actions..*Action.set*(..)) \n\t\t\tand !execution(* org.test.appApi.actions..*Action.get*(..))\" />\n\t\t\t<aop:around pointcut-ref=\"validator\" method=\"validator\" />\n\t\t</aop:aspect>\n\t</aop:config>\n```\n# 使用注解\n使用注解很简单,springMVC的控制器中的方法可以定义任意类型的参数,把各种参数放到一个java bean中,并在该bean使用类注解 @EnableValidator开启验证,并在需要验证的类属性上使用对应的验证器注解就行,验证器注解可以多个混合使用\n# 写在结束\n到这里,自定义验证器的开发就完成了.也许大家有更好的办法,欢迎讨论.也许spring MVC可以有办法实现我想做的但我不知道,也欢迎大家指出.","slug":"SpringMVC自定义注解验证器","published":1,"updated":"2018-04-21T15:37:06.978Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgabk9tu0002v4g8rzosb406","content":"<p><excerpt in=\"\" index=\"\" |=\"\" 首页摘要=\"\"> </excerpt></p>\n<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>大家可能会问,spring MVC支持验证注解,如常用的hibernate-validator,为什么要自己实现一套呢?<br>最近做一个APP的服务端接口,项目中有自己的业务返回码.spring MVC支持的注解验证器无法设置验证不通过的时候的返回码,各种不方便,所以思前想后还是自己实现了一套.废话不多说,开始正文.<br>+<a id=\"more\"></a></p>\n<p><the rest=\"\" of=\"\" contents=\"\" |=\"\" 余下全文=\"\"></the></p>\n<h1 id=\"状态码枚举\"><a href=\"#状态码枚举\" class=\"headerlink\" title=\"状态码枚举\"></a>状态码枚举</h1><p>状态码枚举中有两个属性: 状态码 和 对应的默认消息<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public enum ResponseCodeEnum &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    _001(&quot;001&quot;, &quot;用户未登录&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * @Fields code : 状态码</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private String code;</span><br><span class=\"line\">    </span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * @Fields defaultMessage : 默认消息</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private String defaultMessage;</span><br><span class=\"line\">    </span><br><span class=\"line\">    private ResponseCodeEnum (String code, String defaultMessage) &#123;</span><br><span class=\"line\">\tthis.code = code;</span><br><span class=\"line\">\tthis.defaultMessage = defaultMessage;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @JsonValue  // com.fasterxml.jackson.annotation.JsonValue, 项目中用了 jackson 做为 </span><br><span class=\"line\">                          // springMVC的JSON转换器,该注解表式这个方法的返回值生成到JSON中,其他忽略</span><br><span class=\"line\">    public String getCode() &#123;</span><br><span class=\"line\">        return code;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public String getDefaultMessage() &#123;</span><br><span class=\"line\">        return defaultMessage;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"自定义业务异常\"><a href=\"#自定义业务异常\" class=\"headerlink\" title=\"自定义业务异常\"></a>自定义业务异常</h1><p>业务数据(客户端提交的)验证不过等各种业务处理中的不通过,统一使用该异常,该异常被捕获后会生成统一格式的消息返回到客户端<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class CustomValidatorException extends RuntimeException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static final long serialVersionUID = 5968495544349929856L;</span><br><span class=\"line\">    </span><br><span class=\"line\">    private ResponseCodeEnum statusCode;</span><br><span class=\"line\">    </span><br><span class=\"line\">    private String errorMsg;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public CustomValidatorException (ResponseCodeEnum statusCode, String errorMsg) &#123;</span><br><span class=\"line\">\tthis.statusCode = statusCode;</span><br><span class=\"line\">\tthis.errorMsg = errorMsg;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public ResponseCodeEnum getStatusCode() &#123;</span><br><span class=\"line\">        return statusCode;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public String getErrorMsg() &#123;</span><br><span class=\"line\">        return errorMsg;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"验证器接口\"><a href=\"#验证器接口\" class=\"headerlink\" title=\"验证器接口\"></a>验证器接口</h1><p>该接口作为验证器注解必须实现的接口,负责真正的验证<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface IAnnotationsValidator &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void doValidator(Object object, Annotation annotation) throws CustomValidatorException ;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"验证器注解\"><a href=\"#验证器注解\" class=\"headerlink\" title=\"验证器注解\"></a>验证器注解</h1><p>验证器相关注解定义,首先得有几个基础注解</p>\n<h2 id=\"基础注解\"><a href=\"#基础注解\" class=\"headerlink\" title=\"基础注解\"></a>基础注解</h2><h5 id=\"EnableValidator-负责开启验证-使用了该注解的参数Bean才会被验证\"><a href=\"#EnableValidator-负责开启验证-使用了该注解的参数Bean才会被验证\" class=\"headerlink\" title=\"EnableValidator  负责开启验证,使用了该注解的参数Bean才会被验证\"></a>EnableValidator  负责开启验证,使用了该注解的参数Bean才会被验证</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Retention(RetentionPolicy.RUNTIME)</span><br><span class=\"line\">@Target(&#123;ElementType.TYPE&#125;)</span><br><span class=\"line\">@Documented</span><br><span class=\"line\">public @interface EnableValidator &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"CustomValidator-该注解作用于注解-该注解只能被其他注解使用-不能被非注解的类使用-使用了该注解的注解才被做为验证器注解\"><a href=\"#CustomValidator-该注解作用于注解-该注解只能被其他注解使用-不能被非注解的类使用-使用了该注解的注解才被做为验证器注解\" class=\"headerlink\" title=\"CustomValidator 该注解作用于注解(该注解只能被其他注解使用,不能被非注解的类使用),使用了该注解的注解才被做为验证器注解\"></a>CustomValidator 该注解作用于注解(该注解只能被其他注解使用,不能被非注解的类使用),使用了该注解的注解才被做为验证器注解</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Retention(RetentionPolicy.RUNTIME)</span><br><span class=\"line\">@Target(&#123;ElementType.ANNOTATION_TYPE&#125;)</span><br><span class=\"line\">@Documented</span><br><span class=\"line\">public @interface CustomValidator &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"验证器注解-1\"><a href=\"#验证器注解-1\" class=\"headerlink\" title=\"验证器注解\"></a>验证器注解</h2><p>这里先只写2个注解吧,其他的可以由其他开发人员开发</p>\n<h5 id=\"Required-必传参数注解-只有这个注解验证参数是否有值-其他注解有值才验证-没值直接通过\"><a href=\"#Required-必传参数注解-只有这个注解验证参数是否有值-其他注解有值才验证-没值直接通过\" class=\"headerlink\" title=\"Required 必传参数注解,只有这个注解验证参数是否有值,其他注解有值才验证,没值直接通过\"></a>Required 必传参数注解,只有这个注解验证参数是否有值,其他注解有值才验证,没值直接通过</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Retention(RetentionPolicy.RUNTIME)</span><br><span class=\"line\">@Target(&#123;ElementType.FIELD&#125;)</span><br><span class=\"line\">@Documented</span><br><span class=\"line\">@Inherited  // 子类可以继承父类的注解</span><br><span class=\"line\">@CustomValidator</span><br><span class=\"line\">public @interface Required &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * @Title: responseCode</span><br><span class=\"line\">     * @Description: 验证失败(不通过)的code</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    ResponseCodeEnum responseCode();</span><br><span class=\"line\">    </span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * @Title: validatFailMessage</span><br><span class=\"line\">     * @Description: 验证失败(不通过)的文字消息,可为空,默认使用ResponseCodeEnum对应的消息</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    String validatFailMessage() default &quot;&quot;;</span><br><span class=\"line\">    </span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * @Fields validatorSpringBeanName : 此注解对应的验证器的springBean名称,该名称在定义注解的时候写死</span><br><span class=\"line\">     */</span><br><span class=\"line\">    final String validatorSpringBeanName = &quot;requiredValidator&quot;;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Required  注解中的几个属性是所有验证器注解都必须有的,大家可能注意到了validatorSpringBeanName , 没错,切面就是根据这个在spring容器中拿验证器实现的</p>\n<h5 id=\"NotEmpty-用于验证字符串-List-集合-数组-Map等不能为空-这里的空不包括null-是null以外的空\"><a href=\"#NotEmpty-用于验证字符串-List-集合-数组-Map等不能为空-这里的空不包括null-是null以外的空\" class=\"headerlink\" title=\"NotEmpty 用于验证字符串,List,集合,数组,Map等不能为空,这里的空不包括null,是null以外的空\"></a>NotEmpty 用于验证字符串,List,集合,数组,Map等不能为空,这里的空不包括null,是null以外的空</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Retention(RetentionPolicy.RUNTIME)</span><br><span class=\"line\">@Target(&#123;ElementType.FIELD&#125;)</span><br><span class=\"line\">@Documented</span><br><span class=\"line\">@Inherited  // 子类可以继承父类的注解</span><br><span class=\"line\">@CustomValidator</span><br><span class=\"line\">public @interface NotEmpty &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * @Title: responseCode</span><br><span class=\"line\">     * @Description: 验证失败(不通过)的code</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    ResponseCodeEnum responseCode();</span><br><span class=\"line\">    </span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * @Title: validatFailMessage</span><br><span class=\"line\">     * @Description: 验证失败(不通过)的文字消息,可为空,默认使用ResponseStatusCodeEnum对应的消息</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    String validatFailMessage() default &quot;&quot;;</span><br><span class=\"line\">    </span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * @Fields validatorSpringBeanName : 此注解对应的验证器的springBean名称,该名称在定义注解的时候写死</span><br><span class=\"line\">     */</span><br><span class=\"line\">    final String validatorSpringBeanName = &quot;notEmptyValidator&quot;;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>除了上面两个验证器中的3个必须有的属性,还可以定义其他的属性,比如验证字符串长度的验证器,可以加一个长度的属性. 这些属性可以在验证器实现中获取</p>\n<h2 id=\"验证器-注解-实现\"><a href=\"#验证器-注解-实现\" class=\"headerlink\" title=\"验证器(注解)实现\"></a>验证器(注解)实现</h2><h5 id=\"RequiredImpl-Required-的实现\"><a href=\"#RequiredImpl-Required-的实现\" class=\"headerlink\" title=\"RequiredImpl: Required 的实现\"></a>RequiredImpl: Required 的实现</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Component(&quot;requiredValidator&quot;)</span><br><span class=\"line\">public class RequiredImpl implements IAnnotationsValidator &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void doValidator(Object object, Annotation annotation) throws CustomValidatorException &#123;</span><br><span class=\"line\">        Required notEmpty = (Required) annotation;</span><br><span class=\"line\">        ResponseStatusCodeEnum statusCode = notEmpty.responseStatusCode();</span><br><span class=\"line\">        String message = notEmpty.validatFailMessage();</span><br><span class=\"line\">        // TODO 获取验证器注解中的其他属性</span><br><span class=\"line\">        // TODO 验证,如果验证不通过,抛出 CustomValidatorException </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"NotEmptyImpl-NotEmpty-的实现-具体参考-Required-的实现\"><a href=\"#NotEmptyImpl-NotEmpty-的实现-具体参考-Required-的实现\" class=\"headerlink\" title=\"NotEmptyImpl: NotEmpty 的实现,具体参考 Required 的实现\"></a>NotEmptyImpl: NotEmpty 的实现,具体参考 Required 的实现</h5><h1 id=\"AOP\"><a href=\"#AOP\" class=\"headerlink\" title=\"AOP\"></a>AOP</h1><p>自定义验证器的核心实现,没有它,上面的东西全是白费<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class ValidatorAdvise &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    private static Logger logger = LoggerFactory.getLogger(ValidatorAdvise .class);</span><br><span class=\"line\"></span><br><span class=\"line\">    public Object validator(ProceedingJoinPoint pjp) &#123;</span><br><span class=\"line\">\t// 获取被拦截的方法的参数</span><br><span class=\"line\">\tObject[] args = pjp.getArgs();</span><br><span class=\"line\">\t// 遍历该方法的所有参数</span><br><span class=\"line\">\tif (args != null &amp;&amp; args.length &gt; 0) &#123;</span><br><span class=\"line\">\t    for (Object arg : args) &#123;</span><br><span class=\"line\">\t\tClass&lt;?&gt; argClassz = arg.getClass();</span><br><span class=\"line\">\t\tif (argClassz.getAnnotation(EnableValidator.class) != null) &#123; // 只有当该参数有EnableValidator注解,也就是开启了验证才处理</span><br><span class=\"line\">\t\t    List&lt;Field&gt; fieldList = getAllFields(null, argClassz); // 获取所有字段</span><br><span class=\"line\">\t\t    // 遍历所有字段,并找出有注解的</span><br><span class=\"line\">\t\t    for (Field field : fieldList) &#123;</span><br><span class=\"line\">\t\t\t// 检查每个字段的注解,有注解的才处理</span><br><span class=\"line\">\t\t\tAnnotation[] fieldAnns = field.getAnnotations();</span><br><span class=\"line\">\t\t\tif (fieldAnns != null &amp;&amp; fieldAnns.length &gt; 0) &#123;</span><br><span class=\"line\">\t\t\t    // 遍历该字段的注解,找到验证器的注解</span><br><span class=\"line\">\t\t\t    for (Annotation fieldAnn : fieldAnns) &#123;</span><br><span class=\"line\">\t\t\t\ttry &#123;</span><br><span class=\"line\">\t\t\t\t    // 检查该注解是否有@CustomValidator,有就说明是验证器</span><br><span class=\"line\">\t\t\t\t    if (fieldAnn.annotationType().getAnnotation(CustomValidator.class) != null) &#123;</span><br><span class=\"line\">\t\t\t\t\t// 通过反射拿验证器的springBeanName字段,不为null才处理</span><br><span class=\"line\">\t\t\t\t\tField validatorSpringBeanNameFiled = fieldAnn.annotationType().getDeclaredField(&quot;validatorSpringBeanName&quot;);</span><br><span class=\"line\">\t\t\t\t\tif (validatorSpringBeanNameFiled != null) &#123;</span><br><span class=\"line\">\t\t\t\t\t    // 通过spring拿到验证器进行验证,先拿验证器的springBeanName</span><br><span class=\"line\">\t\t\t\t\t    Object validatorSpringBeanName = validatorSpringBeanNameFiled.get(fieldAnn);</span><br><span class=\"line\">\t\t\t\t\t    if(StringUtil.isNotNull(validatorSpringBeanName)) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t// 名字有值,从spring容器中拿对应的验证器</span><br><span class=\"line\">\t\t\t\t\t\tIAnnotationsValidator annotationsValidator = SystemApplicationContext.SPRING_CONTEXT.getBean((String)validatorSpringBeanName, IAnnotationsValidator.class);</span><br><span class=\"line\">\t\t\t\t\t\tif(annotationsValidator != null) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t    // 验证器不为空,调用验证器</span><br><span class=\"line\">\t\t\t\t\t\t    field.setAccessible(true);</span><br><span class=\"line\">\t\t\t\t\t\t    try &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\tannotationsValidator.doValidator(field.get(arg), fieldAnn);</span><br><span class=\"line\">\t\t\t\t\t\t    &#125; catch (CustomValidatorException ex) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\tString errMsg = null;</span><br><span class=\"line\">\t\t\t\t\t\t\tif(StringUtil.isNull(ex.getErrorMsg())) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t    errMsg = ex.getStatusCode().getDefaultMessage();</span><br><span class=\"line\">\t\t\t\t\t\t\t&#125; else &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t    errMsg = ex.getErrorMsg();</span><br><span class=\"line\">\t\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t\t        return makeResponse(ex.getStatusCode(), errMsg);</span><br><span class=\"line\">\t\t\t\t\t\t    &#125; catch (Exception ex) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\tlogger.error(&quot;验证器【&#123;&#125;】里抛出了 CustomValidatorException 以外的异常,请验证器开发人员注意!!!&quot;, ex, fieldAnn.annotationType());</span><br><span class=\"line\">\t\t\t\t\t\t        return makeResponse(ResponseCodeEnum._500, &quot;服务器内部错误:====&quot; + ex.getMessage());</span><br><span class=\"line\">\t\t\t\t\t\t    &#125;</span><br><span class=\"line\">\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t    &#125;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t    &#125;</span><br><span class=\"line\">\t\t\t\t&#125; catch (NoSuchFieldException | SecurityException | IllegalArgumentException | IllegalAccessException e) &#123;</span><br><span class=\"line\">\t\t\t\t    logger.error(&quot;验证器处理切面出了点问题&quot;, e);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t    &#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t    &#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tObject ret = null;</span><br><span class=\"line\">\ttry &#123;</span><br><span class=\"line\">\t    ret = pjp.proceed();</span><br><span class=\"line\">\t&#125; catch (Throwable e) &#123;</span><br><span class=\"line\">\t    throw new RuntimeException(&quot;AOP Point Cut ValidatorAdvise Throw Exception :&quot;, e);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * @Title: getAllFields</span><br><span class=\"line\">     * @Description: 递归获取该类的所有属性包括父类的爷爷类的...祖宗类的</span><br><span class=\"line\">     * @param fieldList</span><br><span class=\"line\">     * @param classz</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private List&lt;Field&gt; getAllFields(List&lt;Field&gt; fieldList, Class&lt;?&gt; classz) &#123;</span><br><span class=\"line\">\tif(classz == null) &#123;</span><br><span class=\"line\">\t    return fieldList;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tif(fieldList == null) &#123;</span><br><span class=\"line\">\t    fieldList = Arrays.asList(classz.getDeclaredFields());  // 获得该类的所有字段,但不包括父类的</span><br><span class=\"line\">\t&#125; else &#123;</span><br><span class=\"line\">\t    Collections.addAll(fieldList, classz.getDeclaredFields());  // 获得该类的所有字段,但不包括父类的</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn getAllFields(fieldList, classz.getSuperclass());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * @Title: makeResponse</span><br><span class=\"line\">     * @Description: 生成统一 Response</span><br><span class=\"line\">     * @param statusCode</span><br><span class=\"line\">     * @param statusMessage</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private AppApiResponse&lt;?&gt; makeResponse(ResponseCodeEnum statusCode, String statusMessage) &#123;</span><br><span class=\"line\">\tAppApiResponse&lt;Object&gt; response = new AppApiResponse&lt;&gt;(new Object());</span><br><span class=\"line\">\tAppApiResponseHeader respHeader = new AppApiResponseHeader();</span><br><span class=\"line\">        response.setHeader(respHeader);</span><br><span class=\"line\">        respHeader.setStatusCode(statusCode);</span><br><span class=\"line\">        respHeader.setStatusMessage(statusMessage);</span><br><span class=\"line\">        return response;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"捕获异常-生成统一格式响应\"><a href=\"#捕获异常-生成统一格式响应\" class=\"headerlink\" title=\"捕获异常,生成统一格式响应\"></a>捕获异常,生成统一格式响应</h1><p>利用springMVC的@ControllerAdvice捕获所有来自 Controller 的异常<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@ControllerAdvice(basePackages = &quot;org.test.appApi.actions&quot;)</span><br><span class=\"line\">public class ErrorHandlingControllerAdvice &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static Logger logger = LoggerFactory.getLogger(ErrorHandlingControllerAdvice.class);</span><br><span class=\"line\">    </span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * @Title: handleValidationError</span><br><span class=\"line\">     * @Description: 处理表单验证,业务异常</span><br><span class=\"line\">     * @param ex</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @ExceptionHandler(CustomValidatorException.class)</span><br><span class=\"line\">    @ResponseStatus(HttpStatus.OK)</span><br><span class=\"line\">    @ResponseBody</span><br><span class=\"line\">    public AppApiResponse&lt;?&gt; handleValidationError(CustomValidatorException ex) &#123;</span><br><span class=\"line\">\tString errMsg = null;</span><br><span class=\"line\">\tif(StringUtil.isNull(ex.getErrorMsg())) &#123;</span><br><span class=\"line\">\t    errMsg = ex.getStatusCode().getDefaultMessage();</span><br><span class=\"line\">\t&#125; else &#123;</span><br><span class=\"line\">\t    errMsg = ex.getErrorMsg();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">        return makeResponse(ex.getStatusCode(), errMsg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * @Title: handleValidationError</span><br><span class=\"line\">     * @Description: 处理其他异常</span><br><span class=\"line\">     * @param ex</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @ExceptionHandler(Exception.class)</span><br><span class=\"line\">    @ResponseStatus(HttpStatus.OK)</span><br><span class=\"line\">    @ResponseBody</span><br><span class=\"line\">    public AppApiResponse&lt;?&gt; handleValidationError(Exception ex) &#123;</span><br><span class=\"line\">\tlogger.error(&quot;服务器内部错误:====&quot;, ex);</span><br><span class=\"line\">        return makeResponse(ResponseCodeEnum._500, &quot;服务器内部错误:====&quot; + ex.getMessage());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    private AppApiResponse&lt;?&gt; makeResponse(ResponseCodeEnum statusCode, String statusMessage) &#123;</span><br><span class=\"line\">\tAppApiResponse&lt;Object&gt; response = new AppApiResponse&lt;&gt;(new Object());</span><br><span class=\"line\">\tAppApiResponseHeader respHeader = new AppApiResponseHeader();</span><br><span class=\"line\">        response.setHeader(respHeader);</span><br><span class=\"line\">        respHeader.setStatusCode(statusCode);</span><br><span class=\"line\">        respHeader.setStatusMessage(statusMessage);</span><br><span class=\"line\">        return response;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"配制自定义验证器切面\"><a href=\"#配制自定义验证器切面\" class=\"headerlink\" title=\"配制自定义验证器切面\"></a>配制自定义验证器切面</h1><p>springMVC的配制文件中增加<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;bean id=&quot;validatorAdvise&quot; class=&quot;org.test.appApi.actions.validator.advises.ValidatorAdvise&quot; /&gt;</span><br><span class=\"line\">\t&lt;aop:config&gt;</span><br><span class=\"line\">\t\t&lt;aop:aspect id=&quot;validatorAop&quot; ref=&quot;validatorAdvise&quot;&gt;</span><br><span class=\"line\">\t\t\t&lt;aop:pointcut id=&quot;validator&quot; expression=&quot;execution(* org.test.appApi.actions..*Action.*(..)) </span><br><span class=\"line\">\t\t\tand !execution(* org.test.appApi.actions..*Action.initBinder(..)) </span><br><span class=\"line\">\t\t\tand !execution(* org.test.appApi.actions..*Action.set*(..)) </span><br><span class=\"line\">\t\t\tand !execution(* org.test.appApi.actions..*Action.get*(..))&quot; /&gt;</span><br><span class=\"line\">\t\t\t&lt;aop:around pointcut-ref=&quot;validator&quot; method=&quot;validator&quot; /&gt;</span><br><span class=\"line\">\t\t&lt;/aop:aspect&gt;</span><br><span class=\"line\">\t&lt;/aop:config&gt;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"使用注解\"><a href=\"#使用注解\" class=\"headerlink\" title=\"使用注解\"></a>使用注解</h1><p>使用注解很简单,springMVC的控制器中的方法可以定义任意类型的参数,把各种参数放到一个java bean中,并在该bean使用类注解 @EnableValidator开启验证,并在需要验证的类属性上使用对应的验证器注解就行,验证器注解可以多个混合使用</p>\n<h1 id=\"写在结束\"><a href=\"#写在结束\" class=\"headerlink\" title=\"写在结束\"></a>写在结束</h1><p>到这里,自定义验证器的开发就完成了.也许大家有更好的办法,欢迎讨论.也许spring MVC可以有办法实现我想做的但我不知道,也欢迎大家指出.</p>\n","site":{"data":{}},"excerpt":"<p><excerpt in=\"\" index=\"\" |=\"\" 首页摘要=\"\"> </excerpt></p>\n<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>大家可能会问,spring MVC支持验证注解,如常用的hibernate-validator,为什么要自己实现一套呢?<br>最近做一个APP的服务端接口,项目中有自己的业务返回码.spring MVC支持的注解验证器无法设置验证不通过的时候的返回码,各种不方便,所以思前想后还是自己实现了一套.废话不多说,开始正文.<br>+","more":"</p>\n<p><the rest=\"\" of=\"\" contents=\"\" |=\"\" 余下全文=\"\"></the></p>\n<h1 id=\"状态码枚举\"><a href=\"#状态码枚举\" class=\"headerlink\" title=\"状态码枚举\"></a>状态码枚举</h1><p>状态码枚举中有两个属性: 状态码 和 对应的默认消息<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public enum ResponseCodeEnum &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    _001(&quot;001&quot;, &quot;用户未登录&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * @Fields code : 状态码</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private String code;</span><br><span class=\"line\">    </span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * @Fields defaultMessage : 默认消息</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private String defaultMessage;</span><br><span class=\"line\">    </span><br><span class=\"line\">    private ResponseCodeEnum (String code, String defaultMessage) &#123;</span><br><span class=\"line\">\tthis.code = code;</span><br><span class=\"line\">\tthis.defaultMessage = defaultMessage;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @JsonValue  // com.fasterxml.jackson.annotation.JsonValue, 项目中用了 jackson 做为 </span><br><span class=\"line\">                          // springMVC的JSON转换器,该注解表式这个方法的返回值生成到JSON中,其他忽略</span><br><span class=\"line\">    public String getCode() &#123;</span><br><span class=\"line\">        return code;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public String getDefaultMessage() &#123;</span><br><span class=\"line\">        return defaultMessage;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"自定义业务异常\"><a href=\"#自定义业务异常\" class=\"headerlink\" title=\"自定义业务异常\"></a>自定义业务异常</h1><p>业务数据(客户端提交的)验证不过等各种业务处理中的不通过,统一使用该异常,该异常被捕获后会生成统一格式的消息返回到客户端<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class CustomValidatorException extends RuntimeException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static final long serialVersionUID = 5968495544349929856L;</span><br><span class=\"line\">    </span><br><span class=\"line\">    private ResponseCodeEnum statusCode;</span><br><span class=\"line\">    </span><br><span class=\"line\">    private String errorMsg;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public CustomValidatorException (ResponseCodeEnum statusCode, String errorMsg) &#123;</span><br><span class=\"line\">\tthis.statusCode = statusCode;</span><br><span class=\"line\">\tthis.errorMsg = errorMsg;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public ResponseCodeEnum getStatusCode() &#123;</span><br><span class=\"line\">        return statusCode;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public String getErrorMsg() &#123;</span><br><span class=\"line\">        return errorMsg;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"验证器接口\"><a href=\"#验证器接口\" class=\"headerlink\" title=\"验证器接口\"></a>验证器接口</h1><p>该接口作为验证器注解必须实现的接口,负责真正的验证<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface IAnnotationsValidator &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void doValidator(Object object, Annotation annotation) throws CustomValidatorException ;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"验证器注解\"><a href=\"#验证器注解\" class=\"headerlink\" title=\"验证器注解\"></a>验证器注解</h1><p>验证器相关注解定义,首先得有几个基础注解</p>\n<h2 id=\"基础注解\"><a href=\"#基础注解\" class=\"headerlink\" title=\"基础注解\"></a>基础注解</h2><h5 id=\"EnableValidator-负责开启验证-使用了该注解的参数Bean才会被验证\"><a href=\"#EnableValidator-负责开启验证-使用了该注解的参数Bean才会被验证\" class=\"headerlink\" title=\"EnableValidator  负责开启验证,使用了该注解的参数Bean才会被验证\"></a>EnableValidator  负责开启验证,使用了该注解的参数Bean才会被验证</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Retention(RetentionPolicy.RUNTIME)</span><br><span class=\"line\">@Target(&#123;ElementType.TYPE&#125;)</span><br><span class=\"line\">@Documented</span><br><span class=\"line\">public @interface EnableValidator &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"CustomValidator-该注解作用于注解-该注解只能被其他注解使用-不能被非注解的类使用-使用了该注解的注解才被做为验证器注解\"><a href=\"#CustomValidator-该注解作用于注解-该注解只能被其他注解使用-不能被非注解的类使用-使用了该注解的注解才被做为验证器注解\" class=\"headerlink\" title=\"CustomValidator 该注解作用于注解(该注解只能被其他注解使用,不能被非注解的类使用),使用了该注解的注解才被做为验证器注解\"></a>CustomValidator 该注解作用于注解(该注解只能被其他注解使用,不能被非注解的类使用),使用了该注解的注解才被做为验证器注解</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Retention(RetentionPolicy.RUNTIME)</span><br><span class=\"line\">@Target(&#123;ElementType.ANNOTATION_TYPE&#125;)</span><br><span class=\"line\">@Documented</span><br><span class=\"line\">public @interface CustomValidator &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"验证器注解-1\"><a href=\"#验证器注解-1\" class=\"headerlink\" title=\"验证器注解\"></a>验证器注解</h2><p>这里先只写2个注解吧,其他的可以由其他开发人员开发</p>\n<h5 id=\"Required-必传参数注解-只有这个注解验证参数是否有值-其他注解有值才验证-没值直接通过\"><a href=\"#Required-必传参数注解-只有这个注解验证参数是否有值-其他注解有值才验证-没值直接通过\" class=\"headerlink\" title=\"Required 必传参数注解,只有这个注解验证参数是否有值,其他注解有值才验证,没值直接通过\"></a>Required 必传参数注解,只有这个注解验证参数是否有值,其他注解有值才验证,没值直接通过</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Retention(RetentionPolicy.RUNTIME)</span><br><span class=\"line\">@Target(&#123;ElementType.FIELD&#125;)</span><br><span class=\"line\">@Documented</span><br><span class=\"line\">@Inherited  // 子类可以继承父类的注解</span><br><span class=\"line\">@CustomValidator</span><br><span class=\"line\">public @interface Required &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * @Title: responseCode</span><br><span class=\"line\">     * @Description: 验证失败(不通过)的code</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    ResponseCodeEnum responseCode();</span><br><span class=\"line\">    </span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * @Title: validatFailMessage</span><br><span class=\"line\">     * @Description: 验证失败(不通过)的文字消息,可为空,默认使用ResponseCodeEnum对应的消息</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    String validatFailMessage() default &quot;&quot;;</span><br><span class=\"line\">    </span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * @Fields validatorSpringBeanName : 此注解对应的验证器的springBean名称,该名称在定义注解的时候写死</span><br><span class=\"line\">     */</span><br><span class=\"line\">    final String validatorSpringBeanName = &quot;requiredValidator&quot;;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Required  注解中的几个属性是所有验证器注解都必须有的,大家可能注意到了validatorSpringBeanName , 没错,切面就是根据这个在spring容器中拿验证器实现的</p>\n<h5 id=\"NotEmpty-用于验证字符串-List-集合-数组-Map等不能为空-这里的空不包括null-是null以外的空\"><a href=\"#NotEmpty-用于验证字符串-List-集合-数组-Map等不能为空-这里的空不包括null-是null以外的空\" class=\"headerlink\" title=\"NotEmpty 用于验证字符串,List,集合,数组,Map等不能为空,这里的空不包括null,是null以外的空\"></a>NotEmpty 用于验证字符串,List,集合,数组,Map等不能为空,这里的空不包括null,是null以外的空</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Retention(RetentionPolicy.RUNTIME)</span><br><span class=\"line\">@Target(&#123;ElementType.FIELD&#125;)</span><br><span class=\"line\">@Documented</span><br><span class=\"line\">@Inherited  // 子类可以继承父类的注解</span><br><span class=\"line\">@CustomValidator</span><br><span class=\"line\">public @interface NotEmpty &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * @Title: responseCode</span><br><span class=\"line\">     * @Description: 验证失败(不通过)的code</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    ResponseCodeEnum responseCode();</span><br><span class=\"line\">    </span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * @Title: validatFailMessage</span><br><span class=\"line\">     * @Description: 验证失败(不通过)的文字消息,可为空,默认使用ResponseStatusCodeEnum对应的消息</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    String validatFailMessage() default &quot;&quot;;</span><br><span class=\"line\">    </span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * @Fields validatorSpringBeanName : 此注解对应的验证器的springBean名称,该名称在定义注解的时候写死</span><br><span class=\"line\">     */</span><br><span class=\"line\">    final String validatorSpringBeanName = &quot;notEmptyValidator&quot;;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>除了上面两个验证器中的3个必须有的属性,还可以定义其他的属性,比如验证字符串长度的验证器,可以加一个长度的属性. 这些属性可以在验证器实现中获取</p>\n<h2 id=\"验证器-注解-实现\"><a href=\"#验证器-注解-实现\" class=\"headerlink\" title=\"验证器(注解)实现\"></a>验证器(注解)实现</h2><h5 id=\"RequiredImpl-Required-的实现\"><a href=\"#RequiredImpl-Required-的实现\" class=\"headerlink\" title=\"RequiredImpl: Required 的实现\"></a>RequiredImpl: Required 的实现</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Component(&quot;requiredValidator&quot;)</span><br><span class=\"line\">public class RequiredImpl implements IAnnotationsValidator &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void doValidator(Object object, Annotation annotation) throws CustomValidatorException &#123;</span><br><span class=\"line\">        Required notEmpty = (Required) annotation;</span><br><span class=\"line\">        ResponseStatusCodeEnum statusCode = notEmpty.responseStatusCode();</span><br><span class=\"line\">        String message = notEmpty.validatFailMessage();</span><br><span class=\"line\">        // TODO 获取验证器注解中的其他属性</span><br><span class=\"line\">        // TODO 验证,如果验证不通过,抛出 CustomValidatorException </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"NotEmptyImpl-NotEmpty-的实现-具体参考-Required-的实现\"><a href=\"#NotEmptyImpl-NotEmpty-的实现-具体参考-Required-的实现\" class=\"headerlink\" title=\"NotEmptyImpl: NotEmpty 的实现,具体参考 Required 的实现\"></a>NotEmptyImpl: NotEmpty 的实现,具体参考 Required 的实现</h5><h1 id=\"AOP\"><a href=\"#AOP\" class=\"headerlink\" title=\"AOP\"></a>AOP</h1><p>自定义验证器的核心实现,没有它,上面的东西全是白费<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class ValidatorAdvise &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    private static Logger logger = LoggerFactory.getLogger(ValidatorAdvise .class);</span><br><span class=\"line\"></span><br><span class=\"line\">    public Object validator(ProceedingJoinPoint pjp) &#123;</span><br><span class=\"line\">\t// 获取被拦截的方法的参数</span><br><span class=\"line\">\tObject[] args = pjp.getArgs();</span><br><span class=\"line\">\t// 遍历该方法的所有参数</span><br><span class=\"line\">\tif (args != null &amp;&amp; args.length &gt; 0) &#123;</span><br><span class=\"line\">\t    for (Object arg : args) &#123;</span><br><span class=\"line\">\t\tClass&lt;?&gt; argClassz = arg.getClass();</span><br><span class=\"line\">\t\tif (argClassz.getAnnotation(EnableValidator.class) != null) &#123; // 只有当该参数有EnableValidator注解,也就是开启了验证才处理</span><br><span class=\"line\">\t\t    List&lt;Field&gt; fieldList = getAllFields(null, argClassz); // 获取所有字段</span><br><span class=\"line\">\t\t    // 遍历所有字段,并找出有注解的</span><br><span class=\"line\">\t\t    for (Field field : fieldList) &#123;</span><br><span class=\"line\">\t\t\t// 检查每个字段的注解,有注解的才处理</span><br><span class=\"line\">\t\t\tAnnotation[] fieldAnns = field.getAnnotations();</span><br><span class=\"line\">\t\t\tif (fieldAnns != null &amp;&amp; fieldAnns.length &gt; 0) &#123;</span><br><span class=\"line\">\t\t\t    // 遍历该字段的注解,找到验证器的注解</span><br><span class=\"line\">\t\t\t    for (Annotation fieldAnn : fieldAnns) &#123;</span><br><span class=\"line\">\t\t\t\ttry &#123;</span><br><span class=\"line\">\t\t\t\t    // 检查该注解是否有@CustomValidator,有就说明是验证器</span><br><span class=\"line\">\t\t\t\t    if (fieldAnn.annotationType().getAnnotation(CustomValidator.class) != null) &#123;</span><br><span class=\"line\">\t\t\t\t\t// 通过反射拿验证器的springBeanName字段,不为null才处理</span><br><span class=\"line\">\t\t\t\t\tField validatorSpringBeanNameFiled = fieldAnn.annotationType().getDeclaredField(&quot;validatorSpringBeanName&quot;);</span><br><span class=\"line\">\t\t\t\t\tif (validatorSpringBeanNameFiled != null) &#123;</span><br><span class=\"line\">\t\t\t\t\t    // 通过spring拿到验证器进行验证,先拿验证器的springBeanName</span><br><span class=\"line\">\t\t\t\t\t    Object validatorSpringBeanName = validatorSpringBeanNameFiled.get(fieldAnn);</span><br><span class=\"line\">\t\t\t\t\t    if(StringUtil.isNotNull(validatorSpringBeanName)) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t// 名字有值,从spring容器中拿对应的验证器</span><br><span class=\"line\">\t\t\t\t\t\tIAnnotationsValidator annotationsValidator = SystemApplicationContext.SPRING_CONTEXT.getBean((String)validatorSpringBeanName, IAnnotationsValidator.class);</span><br><span class=\"line\">\t\t\t\t\t\tif(annotationsValidator != null) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t    // 验证器不为空,调用验证器</span><br><span class=\"line\">\t\t\t\t\t\t    field.setAccessible(true);</span><br><span class=\"line\">\t\t\t\t\t\t    try &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\tannotationsValidator.doValidator(field.get(arg), fieldAnn);</span><br><span class=\"line\">\t\t\t\t\t\t    &#125; catch (CustomValidatorException ex) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\tString errMsg = null;</span><br><span class=\"line\">\t\t\t\t\t\t\tif(StringUtil.isNull(ex.getErrorMsg())) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t    errMsg = ex.getStatusCode().getDefaultMessage();</span><br><span class=\"line\">\t\t\t\t\t\t\t&#125; else &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t    errMsg = ex.getErrorMsg();</span><br><span class=\"line\">\t\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t\t        return makeResponse(ex.getStatusCode(), errMsg);</span><br><span class=\"line\">\t\t\t\t\t\t    &#125; catch (Exception ex) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\tlogger.error(&quot;验证器【&#123;&#125;】里抛出了 CustomValidatorException 以外的异常,请验证器开发人员注意!!!&quot;, ex, fieldAnn.annotationType());</span><br><span class=\"line\">\t\t\t\t\t\t        return makeResponse(ResponseCodeEnum._500, &quot;服务器内部错误:====&quot; + ex.getMessage());</span><br><span class=\"line\">\t\t\t\t\t\t    &#125;</span><br><span class=\"line\">\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t    &#125;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t    &#125;</span><br><span class=\"line\">\t\t\t\t&#125; catch (NoSuchFieldException | SecurityException | IllegalArgumentException | IllegalAccessException e) &#123;</span><br><span class=\"line\">\t\t\t\t    logger.error(&quot;验证器处理切面出了点问题&quot;, e);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t    &#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t    &#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tObject ret = null;</span><br><span class=\"line\">\ttry &#123;</span><br><span class=\"line\">\t    ret = pjp.proceed();</span><br><span class=\"line\">\t&#125; catch (Throwable e) &#123;</span><br><span class=\"line\">\t    throw new RuntimeException(&quot;AOP Point Cut ValidatorAdvise Throw Exception :&quot;, e);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * @Title: getAllFields</span><br><span class=\"line\">     * @Description: 递归获取该类的所有属性包括父类的爷爷类的...祖宗类的</span><br><span class=\"line\">     * @param fieldList</span><br><span class=\"line\">     * @param classz</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private List&lt;Field&gt; getAllFields(List&lt;Field&gt; fieldList, Class&lt;?&gt; classz) &#123;</span><br><span class=\"line\">\tif(classz == null) &#123;</span><br><span class=\"line\">\t    return fieldList;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tif(fieldList == null) &#123;</span><br><span class=\"line\">\t    fieldList = Arrays.asList(classz.getDeclaredFields());  // 获得该类的所有字段,但不包括父类的</span><br><span class=\"line\">\t&#125; else &#123;</span><br><span class=\"line\">\t    Collections.addAll(fieldList, classz.getDeclaredFields());  // 获得该类的所有字段,但不包括父类的</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn getAllFields(fieldList, classz.getSuperclass());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * @Title: makeResponse</span><br><span class=\"line\">     * @Description: 生成统一 Response</span><br><span class=\"line\">     * @param statusCode</span><br><span class=\"line\">     * @param statusMessage</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private AppApiResponse&lt;?&gt; makeResponse(ResponseCodeEnum statusCode, String statusMessage) &#123;</span><br><span class=\"line\">\tAppApiResponse&lt;Object&gt; response = new AppApiResponse&lt;&gt;(new Object());</span><br><span class=\"line\">\tAppApiResponseHeader respHeader = new AppApiResponseHeader();</span><br><span class=\"line\">        response.setHeader(respHeader);</span><br><span class=\"line\">        respHeader.setStatusCode(statusCode);</span><br><span class=\"line\">        respHeader.setStatusMessage(statusMessage);</span><br><span class=\"line\">        return response;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"捕获异常-生成统一格式响应\"><a href=\"#捕获异常-生成统一格式响应\" class=\"headerlink\" title=\"捕获异常,生成统一格式响应\"></a>捕获异常,生成统一格式响应</h1><p>利用springMVC的@ControllerAdvice捕获所有来自 Controller 的异常<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@ControllerAdvice(basePackages = &quot;org.test.appApi.actions&quot;)</span><br><span class=\"line\">public class ErrorHandlingControllerAdvice &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static Logger logger = LoggerFactory.getLogger(ErrorHandlingControllerAdvice.class);</span><br><span class=\"line\">    </span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * @Title: handleValidationError</span><br><span class=\"line\">     * @Description: 处理表单验证,业务异常</span><br><span class=\"line\">     * @param ex</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @ExceptionHandler(CustomValidatorException.class)</span><br><span class=\"line\">    @ResponseStatus(HttpStatus.OK)</span><br><span class=\"line\">    @ResponseBody</span><br><span class=\"line\">    public AppApiResponse&lt;?&gt; handleValidationError(CustomValidatorException ex) &#123;</span><br><span class=\"line\">\tString errMsg = null;</span><br><span class=\"line\">\tif(StringUtil.isNull(ex.getErrorMsg())) &#123;</span><br><span class=\"line\">\t    errMsg = ex.getStatusCode().getDefaultMessage();</span><br><span class=\"line\">\t&#125; else &#123;</span><br><span class=\"line\">\t    errMsg = ex.getErrorMsg();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">        return makeResponse(ex.getStatusCode(), errMsg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * @Title: handleValidationError</span><br><span class=\"line\">     * @Description: 处理其他异常</span><br><span class=\"line\">     * @param ex</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @ExceptionHandler(Exception.class)</span><br><span class=\"line\">    @ResponseStatus(HttpStatus.OK)</span><br><span class=\"line\">    @ResponseBody</span><br><span class=\"line\">    public AppApiResponse&lt;?&gt; handleValidationError(Exception ex) &#123;</span><br><span class=\"line\">\tlogger.error(&quot;服务器内部错误:====&quot;, ex);</span><br><span class=\"line\">        return makeResponse(ResponseCodeEnum._500, &quot;服务器内部错误:====&quot; + ex.getMessage());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    private AppApiResponse&lt;?&gt; makeResponse(ResponseCodeEnum statusCode, String statusMessage) &#123;</span><br><span class=\"line\">\tAppApiResponse&lt;Object&gt; response = new AppApiResponse&lt;&gt;(new Object());</span><br><span class=\"line\">\tAppApiResponseHeader respHeader = new AppApiResponseHeader();</span><br><span class=\"line\">        response.setHeader(respHeader);</span><br><span class=\"line\">        respHeader.setStatusCode(statusCode);</span><br><span class=\"line\">        respHeader.setStatusMessage(statusMessage);</span><br><span class=\"line\">        return response;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"配制自定义验证器切面\"><a href=\"#配制自定义验证器切面\" class=\"headerlink\" title=\"配制自定义验证器切面\"></a>配制自定义验证器切面</h1><p>springMVC的配制文件中增加<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;bean id=&quot;validatorAdvise&quot; class=&quot;org.test.appApi.actions.validator.advises.ValidatorAdvise&quot; /&gt;</span><br><span class=\"line\">\t&lt;aop:config&gt;</span><br><span class=\"line\">\t\t&lt;aop:aspect id=&quot;validatorAop&quot; ref=&quot;validatorAdvise&quot;&gt;</span><br><span class=\"line\">\t\t\t&lt;aop:pointcut id=&quot;validator&quot; expression=&quot;execution(* org.test.appApi.actions..*Action.*(..)) </span><br><span class=\"line\">\t\t\tand !execution(* org.test.appApi.actions..*Action.initBinder(..)) </span><br><span class=\"line\">\t\t\tand !execution(* org.test.appApi.actions..*Action.set*(..)) </span><br><span class=\"line\">\t\t\tand !execution(* org.test.appApi.actions..*Action.get*(..))&quot; /&gt;</span><br><span class=\"line\">\t\t\t&lt;aop:around pointcut-ref=&quot;validator&quot; method=&quot;validator&quot; /&gt;</span><br><span class=\"line\">\t\t&lt;/aop:aspect&gt;</span><br><span class=\"line\">\t&lt;/aop:config&gt;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"使用注解\"><a href=\"#使用注解\" class=\"headerlink\" title=\"使用注解\"></a>使用注解</h1><p>使用注解很简单,springMVC的控制器中的方法可以定义任意类型的参数,把各种参数放到一个java bean中,并在该bean使用类注解 @EnableValidator开启验证,并在需要验证的类属性上使用对应的验证器注解就行,验证器注解可以多个混合使用</p>\n<h1 id=\"写在结束\"><a href=\"#写在结束\" class=\"headerlink\" title=\"写在结束\"></a>写在结束</h1><p>到这里,自定义验证器的开发就完成了.也许大家有更好的办法,欢迎讨论.也许spring MVC可以有办法实现我想做的但我不知道,也欢迎大家指出.</p>"},{"title":"将你自己的项目发布到maven中央仓库","date":"2018-04-21T15:21:59.000Z","_content":"<Excerpt in index | 首页摘要> \n# 为什么写这篇文章\n\n现在OkHttp很火,研究学习了一下,铺天盖地的教程和通用工具都是Android用的,封装了很多Android的组件在里边.但是OkHttp不是一个安卓库啊,它是java库,所有基于JVM的语言都可以用.\n所以自己写了个OkHttp通用简单封装并放到了github,这是本人第一个开源项目,有点小兴奋呢.但是只是开源,别人想使用也麻烦,还要下载下来自己编译,然后就想到了把它提交到maven中央仓库.但是没有提交过啊,各种搜索折腾了一天,终于成功了.\n这篇文章大概介绍一下如何将自己的项目发布到maven中央仓库及我滚过的坑(可能大家会觉得可笑,想笑就笑吧,反正我也看不见o(∩_∩)o )\n\n+<!-- more -->\n<The rest of contents | 余下全文>\n\n# 什么是maven中央仓库\n\n偷个懒,下面的内容摘抄自 [发布项目到maven中央仓库](http://www.cnblogs.com/songjialin2016/p/8624019.html)\n\n>maven是java世界最流行的构建工具，构建内容囊括了一个java项目的整个生命周期。其中最重要的功能就是依赖管理，maven通过一个类似云的ftp站点统一管理所有java 的jar文件，同时给每个文件的每个版本一个统一的唯一坐标。开发人员通过检索配置这些坐标，选择自己需要的构件搭建自己的项目环境。因此，通过一个叫做pom的描述文件，我们就可以在任何平台搭建好项目运行所需要的环境。方便了协作和分享代码。\n\n>而那个类似云的ftp站点就是maven中央仓库。由于一些不可抗拒因素，我们对于中央仓库的访问速度比较慢。因此在平时工作环境中，我们往往都是使用一些镜像站点，如阿里云和开源中国的仓库镜像。同时由于公司里的商业代码不可发布到公开站点，我们也会在局域网内搭建私服。但是无论是镜像还是私服，都像是缓存，虽然提高了下载速度，但是最终，所有的jar都来自中央仓库。因此，如果我们将项目发布到了maven 中央仓库中，那么在所有基于maven或者gradle等的项目里都可以依赖下载你的构件。真正做到了一次发布，处处可用。\n\n# 发布到中央仓库的好处\n\n偷个懒,下面的内容摘抄自 [发布项目到maven中央仓库](http://www.cnblogs.com/songjialin2016/p/8624019.html)\n>首先，作为一个java从业者，对于天天都在用的东西，做一个深入的了解，发布一个项目到中央仓库可以自我满足。作为我来讲，我发布了一个自己的项目，开始有了利用下班时间好好写点开源代码学习和装逼的冲动。\n\n>再者，作为一个经验丰富的java开发工程师，我们在日常工作中总会积攒下自己使用得很顺手的一些轮子或者一些通用的基础类。如果我们整理好，并持续维护，发布到了中央仓库之后，就可以避免很多重复性的工作。而且也避免了很多冲突：我现在的公司里，每个项目的dubbo调用接口都会自己定义一个Response和Request类。同一类型的重复定义，跟cpp的多根继承一样烦。这样的结果导致了没法统一处理各个系统的调用返回值。既不够优雅，也显得重复。如果我们把这些基础的东西发布到了中央仓库，就只需要引用一下了。当然这种情况一般是发布到私服比较好，我只是举个例子。具体的大家自行体会。\n\n# 发布过程\n在发布前,您需要有自己的项目主页并开源的代码,您可以使用GitHub或者码云,下面的内容以GitHub为例\n\n#### 注册 sonatype的Jira 帐号\n注册地址: [https://issues.sonatype.org/secure/Signup!default.jspa](https://issues.sonatype.org/secure/Signup!default.jspa)\n注册很简单,重要的是邮箱地址一定要正确,issue有任何变动都会通过邮件通知.\n>这里要着重说明一下,也是我滚过的坑: Username 字段一定要使用英文+数字,一定不要使用中文!!!否则官方无法分配权限给你,或者会让你另行注册.\n>因为这个Username会成为这个Jira和提交maven项目的OSS的帐号,虽然用中文登录啥的没问题,但提交的时候就有问题了,我折腾了N个小时,最后又求助官方人员才解决.\n>我当时发了一个issue,就叫 issues1吧,当时官方人员让我修改GroupId,修改后我回复修改完成,等了好多个小时都没回应.然后我又提交了一个issue2,内容与issue1一毛一样,很快就有官方人员说OK了.\n>没过几分钟issue1也有官方人员回复了(不是一个人),说我的帐号XX(中文) 不行,让我重新注册一个帐号再回复,他帮我弄.\n>由于当时issue2已经有官方人员回复OK了,我就在issue1里回复说我在另一个issue里已经解决.然后我就很欢喜的去提交,折腾了好久都没提交上,一直说没有权限...但是当时我用那个帐号登录OSS是可以登录的,就是提交不了.\n>折腾了几个小时之后,很无奈的去issue2里求助官方人员,然后在issue1里让我重新注册的兄弟在issue2里说是因为我的帐号是中文,无法分配权限,让我重新注册一个再在issue2里回复,他帮我配权限...\n> 重新注册了一个帐号之后,用新的帐号提交,OK了...\n\n#### 登录Jira\n注册完成后就登录: [https://issues.sonatype.org/login.jsp](https://issues.sonatype.org/login.jsp)\n\n#### 创建一个 Issue\n创建地址: [https://issues.sonatype.org/secure/CreateIssue.jspa?issuetype=21&pid=10134](https://issues.sonatype.org/secure/CreateIssue.jspa?issuetype=21&pid=10134)\n>这个地址已经选择好了项目和类型,直接填就行,当然,如果你要通过【Create】按钮创建\n>Project选择【Community Support - Open Source Project Repository Hosting (OSSRH)】\n>Issue Type：选择【New Project】\nSummary和Description ：自己填,注意要用E文\nGroup Id:：这个必须要注意,如果你用的是GitHub, 一定要是 com.github.你的github用户名, 例如我的项目地址是: https://github.com/KeRan213539/CommonOkHttp, 那我的 groupId就是com.github.KeRan213539,当然也可以使用 GitHub的Page的域名 io.github.你的github用户名. 如果你有自己的域名和项目地址也可以,官方人员会询问你是否有这个域名的所有权.在你项目的pom里一定要使用这个groupId,最好包路径也使用\nProject URL: 是你的项目地址\nSCM url: 是你的项目git地址\nUsername(s): 可以不用填,这是能辅助你提交项目的合作人的帐号,前提是他也得在这个Jira注册\n其他使用默认值就行了\n\n创建好Issue后就等待官方回复吧.通常如果在晚上22点23点的话回复会比较快,运气好几分钟就有回复了\n当看到回复类似 com.github.xxx has been prepared, now user(s) xxx can:Deploy snapshot artifacts into repository ... 说明OK了,可以提交了\n\n#### 使用 GPG 生成密钥对 \n在等待Issue的时候可以先把密钥搞好\nWindows 系统，可以下载 Gpg4win 软件来生成密钥对。下载地址：[https://www.gpg4win.org/download.html](https://www.gpg4win.org/download.html)\n下载的时候有个坑,会弹出一个捐助页面,然后没有下载的地方,也没有自动开始下载.感觉好像不捐助就不能下载一样.其实在下载页面下面有个All Downloads,里面有个连接 [files.gpg4win.org](https://files.gpg4win.org/),在这里找到与下载页面上的最新版相同的版本号下载即可\n安装过程中在选择组件的时候,除了默认必须安装的,其他取消即可\n安装完成后,打开CMD\n>查看是否安装成功\ngpg --version\n\n---\n>生成密钥对\n>gpg --gen-key\n>Real name: 名字(E文)\n>Email address: 邮箱\n>You selected this USER-ID:\n>    \"xxx<xxx@qq.com>\"\n>Change (N)ame, (E)mail, or (O)kay/(Q)uit? o\n>之后往下，会让你输入用户名和邮箱，还有一个Passphase（输入两次），相当于密钥库密码，不要忘记。\n---\n>查看公钥\n>gpg --list-keys\n>pub   rsa2048 2017-12-16 [SC] [expires: 2019-12-16]\n>      9DF36BF5DFB87B6F04DBCE3D63EC6544BEE6682D\n>uid           [ultimate] xxx<xxx@qq.com>\n>sub   rsa2048 2017-12-16 [E] [expires: 2019-12-16]\n\n>其中 9DF36BF5DFB87B6F04DBCE3D63EC6544BEE6682D 就是公钥\n---\n>将公钥发布到 PGP 密钥服务器\ngpg --keyserver hkp://pool.sks-keyservers.net --send-keys 你的公钥\n---\n>查询公钥是否发布成功\ngpg --keyserver hkp://pool.sks-keyservers.net --recv-keys  你的公钥\n\n#### 修改Maven配制\n如果你的Issue通过了,那么可以开始提交项目了.\n>修改maven全局配制文件 settings.xml,在maven安装目录的conf文件夹下\n---\n```\n<servers>\n    <server>\n        <id>oss</id>\n        <username>用户名</username>\n        <password>密码</password>\n    </server>\n</servers>\n```\n这里的 id 是要在 pom.xml 里面使用的，用户名和密码就是Jira的帐号密码\n---\n>pom.xml\n```\n<project>\n    ...\n    <name>dexcoder-assistant</name>\n    <description>dexcoder-assistant is a rapid development kit.</description>\n    <url>http://www.dexcoder.com/</url>\n    <licenses>\n        <license>\n            <name>The Apache Software License, Version 2.0</naurl\n            <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>\n        </license>\n    </licenses>\n    <developers>\n        <developer>\n            <name>selfly</name>\n            <email>selfly@foxmail.com</email>\n        </developer>\n    </developers>\n    <scm>\n        <connection>scm:git:git@github.com:selfly/dexcoder-assistant.git</connection>\n        <developerConnection>scm:git:git@github.com:selfly/dexcoder-assistant.git</developerConnection>\n        <url>git@github.com:selfly/dexcoder-assistant.git</url>\n    </scm>\n    \n    <profiles>\n        <profile>\n            <id>release</id>\n            <build>\n                <plugins>\n                    <!-- Source -->\n                    <plugin>\n                        <groupId>org.apache.maven.plugins</groupId>\n                        <artifactId>maven-source-plugin</artifactId>\n                        <version>2.2.1</version>\n                        <executions>\n                            <execution>\n                                <phase>package</phase>\n                                <goals>\n                                    <goal>jar-no-fork</goal>\n                                </goals>\n                            </execution>\n                        </executions>\n                    </plugin>\n                    <!-- Javadoc -->\n                    <plugin>\n                        <groupId>org.apache.maven.plugins</groupId>\n                        <artifactId>maven-javadoc-plugin</artifactId>\n                        <version>2.9.1</version>\n                        <configuration>\n                        \t<show>private</show>\n                        \t<nohelp>true</nohelp>\n                                    <charset>UTF-8</charset>\n\t\t\t\t<encoding>UTF-8</encoding>\n\t\t\t\t<docencoding>UTF-8</docencoding>\n\t\t\t\t<additionalparam>-Xdoclint:none</additionalparam>  <!-- TODO 临时解决不规范的javadoc生成报错,后面要规范化后把这行去掉 -->\n\t\t\t</configuration>\n                        <executions>\n                            <execution>\n                                <phase>package</phase>\n                                <goals>\n                                    <goal>jar</goal>\n                                </goals>\n                            </execution>\n                        </executions>\n                    </plugin>\n                    <!-- GPG -->\n                    <plugin>\n                        <groupId>org.apache.maven.plugins</groupId>\n                        <artifactId>maven-gpg-plugin</artifactId>\n                        <version>1.5</version>\n                        <executions>\n                            <execution>\n                                <phase>verify</phase>\n                                <goals>\n                                    <goal>sign</goal>\n                                </goals>\n                            </execution>\n                        </executions>\n                    </plugin>\n                </plugins>\n            </build>\n            <distributionManagement>\n                <snapshotRepository>\n                    <id>oss</id>\n                    <url>https://oss.sonatype.org/content/repositories/snapshots/</url>\n                </snapshotRepository>\n                <repository>\n                    <id>oss</id>\n                    <url>https://oss.sonatype.org/service/local/staging/deploy/maven2/</url>\n                </repository>\n            </distributionManagement>\n        </profile>\n    </profiles>\n    ...\n</project>\n```\n>pom.xml 中必须包括：name、description、url、licenses、developers、scm 等基本信息，使用了 Maven 的 profile 功能，只有在 release 的时候，创建源码包、文档包、使用 GPG 进行数字签名。\n此外，snapshotRepository 与 repository 中的 id 一定要与 setting.xml 中 server 的 id 保持一致。\n如果是多模块项目的话，只需要在父 pom.xml 中声明这些，子 pom.xml 中只需要修改相应的一些信息，如 name 标签。\n由于我使用的是jdk8,对doc的格式要求更严,不标准的doc注释会报错,这时候可以通过在doc插件中配制additionalparam参数,上面代码里已经配过了.但这只是临时解决方案,还是尽量使用标准的doc注释吧.\n\n#### 提交项目到OSS\nmaven配制修改完成后,就可以提交项目了,使用命令:\n```\nmvn clean deploy -P release\n```\n>当执行以上 Maven 命令时，会自动弹出一个对话框，需要输入上面提到的 Passphase，它就是刚才设置的 GPG 密钥库的密码。\n>注意：此时上传的构件并未正式发布到中央仓库中，只是部署到 OSS 中了，下面才是真正的发布。\n---\n>执行上面的命令的过程中,可能会找不到gpg.exe, 检查环境变量,发现环境变量中已经配制了gpg.exe所在的路径,但是还是报错... 如何解决? setting.xml中加入:\n```\n<profile>\n      <id>release</id>\n      <properties>\n        <gpg.executable>D:/Program Files (x86)/GnuPG/bin/gpg.exe</gpg.executable>\n        <gpg.passphrase>上面提到的 Passphase</gpg.passphrase>\n      </properties>\n    </profile>\n```\n>注意 ID要与pom.xml里的发布的 profile 的ID对应\n其中<gpg.executable>为你的gpg.exe的完整路径\n<gpg.passphrase> 为上面提到的 Passphase,这样就不用在每次发布的时候都输入密码了,但是我发现即便有这个,有时候(只是有时,不是每次)还是要让输入密码,暂时不清楚是什么问题.\n上面这2个配制也可以配制到pom.xml的gpg插件的<configuration>中,去掉<gpg.>就行,当然密码最好还是不要放在pom.xml里,因为如果你的代码开源的话,密码也一起开源了...\n---\n>如何发布快照版本?\n在pom.xml中的项目版本号后面加上  -SNAPSHOT 就行\n快照版到这里就发布好了，不需要执行下面的关闭、发布构建步骤，构建列表里也找不到快照版的构建，快照版发布后就可以直接引用了\n\n#### 在 OSS中发布\n>使用 Jira 账号登录 [https://oss.sonatype.org](https://oss.sonatype.org)，在 Staging Repositories 中查看刚才已上传的构件。\n一般发布的构件不多,可以直接滚动条拉到最后就能看到自己的构件,或者更改时间排序,也可进行模糊查询定位到自己的构件\n找到自己的构建后选中,并点击上方的 【Close】按钮关闭构建,这个过程有点慢,稍等几分钟\n刷新页面,发现关闭成功后,再次选中自己的构建,点击上方的【Release】发布构建.\n\n#### 通知Sonatype 已经成功发布\n>在Issue中通过审核的官方回复中,通常会让你在发布成功后再次回复告知他们,在刚才那个Issue中回复已经成功发布,官方会回复你大概需要等多久才能在中央仓库中找到你的项目(10分钟左右)以及要多久才能在搜索中搜到(2个小时左右)\n\n#### 以后的提交过程\n>第一次提交才这么麻烦,以后提交只用重复maven发布,OSS中Close,Release的过程就可以了,当然需要等待的时间还是10分钟和2小时.\n如果要发布新的项目,在使用相同GroupId的情况下,与上面的过程一样.只有使用不同的GroupId的时候,才会需要再去提交Issue申请.\n当然如果你没有换电脑的话 GPG 的过程只需要一次就行\n\n####  结束\n到此发布过程就结束了.本文参考了以下文章,特别感谢这些文章的作者:\n[Maven 发布自己的项目到 Maven 中央仓库](https://www.cnblogs.com/binarylei/p/8628245.html)\n[[干货]--发布项目到maven中央仓库](https://www.cnblogs.com/songjialin2016/p/8624019.html)\n[将项目发布到Maven中央库](https://blog.csdn.net/lanmo555/article/details/52456751)","source":"_posts/将你自己的项目发布到maven中央仓库.md","raw":"---\ntitle: 将你自己的项目发布到maven中央仓库\ndate: 2018-04-21 23:21:59\ntags: maven中央仓库\n---\n<Excerpt in index | 首页摘要> \n# 为什么写这篇文章\n\n现在OkHttp很火,研究学习了一下,铺天盖地的教程和通用工具都是Android用的,封装了很多Android的组件在里边.但是OkHttp不是一个安卓库啊,它是java库,所有基于JVM的语言都可以用.\n所以自己写了个OkHttp通用简单封装并放到了github,这是本人第一个开源项目,有点小兴奋呢.但是只是开源,别人想使用也麻烦,还要下载下来自己编译,然后就想到了把它提交到maven中央仓库.但是没有提交过啊,各种搜索折腾了一天,终于成功了.\n这篇文章大概介绍一下如何将自己的项目发布到maven中央仓库及我滚过的坑(可能大家会觉得可笑,想笑就笑吧,反正我也看不见o(∩_∩)o )\n\n+<!-- more -->\n<The rest of contents | 余下全文>\n\n# 什么是maven中央仓库\n\n偷个懒,下面的内容摘抄自 [发布项目到maven中央仓库](http://www.cnblogs.com/songjialin2016/p/8624019.html)\n\n>maven是java世界最流行的构建工具，构建内容囊括了一个java项目的整个生命周期。其中最重要的功能就是依赖管理，maven通过一个类似云的ftp站点统一管理所有java 的jar文件，同时给每个文件的每个版本一个统一的唯一坐标。开发人员通过检索配置这些坐标，选择自己需要的构件搭建自己的项目环境。因此，通过一个叫做pom的描述文件，我们就可以在任何平台搭建好项目运行所需要的环境。方便了协作和分享代码。\n\n>而那个类似云的ftp站点就是maven中央仓库。由于一些不可抗拒因素，我们对于中央仓库的访问速度比较慢。因此在平时工作环境中，我们往往都是使用一些镜像站点，如阿里云和开源中国的仓库镜像。同时由于公司里的商业代码不可发布到公开站点，我们也会在局域网内搭建私服。但是无论是镜像还是私服，都像是缓存，虽然提高了下载速度，但是最终，所有的jar都来自中央仓库。因此，如果我们将项目发布到了maven 中央仓库中，那么在所有基于maven或者gradle等的项目里都可以依赖下载你的构件。真正做到了一次发布，处处可用。\n\n# 发布到中央仓库的好处\n\n偷个懒,下面的内容摘抄自 [发布项目到maven中央仓库](http://www.cnblogs.com/songjialin2016/p/8624019.html)\n>首先，作为一个java从业者，对于天天都在用的东西，做一个深入的了解，发布一个项目到中央仓库可以自我满足。作为我来讲，我发布了一个自己的项目，开始有了利用下班时间好好写点开源代码学习和装逼的冲动。\n\n>再者，作为一个经验丰富的java开发工程师，我们在日常工作中总会积攒下自己使用得很顺手的一些轮子或者一些通用的基础类。如果我们整理好，并持续维护，发布到了中央仓库之后，就可以避免很多重复性的工作。而且也避免了很多冲突：我现在的公司里，每个项目的dubbo调用接口都会自己定义一个Response和Request类。同一类型的重复定义，跟cpp的多根继承一样烦。这样的结果导致了没法统一处理各个系统的调用返回值。既不够优雅，也显得重复。如果我们把这些基础的东西发布到了中央仓库，就只需要引用一下了。当然这种情况一般是发布到私服比较好，我只是举个例子。具体的大家自行体会。\n\n# 发布过程\n在发布前,您需要有自己的项目主页并开源的代码,您可以使用GitHub或者码云,下面的内容以GitHub为例\n\n#### 注册 sonatype的Jira 帐号\n注册地址: [https://issues.sonatype.org/secure/Signup!default.jspa](https://issues.sonatype.org/secure/Signup!default.jspa)\n注册很简单,重要的是邮箱地址一定要正确,issue有任何变动都会通过邮件通知.\n>这里要着重说明一下,也是我滚过的坑: Username 字段一定要使用英文+数字,一定不要使用中文!!!否则官方无法分配权限给你,或者会让你另行注册.\n>因为这个Username会成为这个Jira和提交maven项目的OSS的帐号,虽然用中文登录啥的没问题,但提交的时候就有问题了,我折腾了N个小时,最后又求助官方人员才解决.\n>我当时发了一个issue,就叫 issues1吧,当时官方人员让我修改GroupId,修改后我回复修改完成,等了好多个小时都没回应.然后我又提交了一个issue2,内容与issue1一毛一样,很快就有官方人员说OK了.\n>没过几分钟issue1也有官方人员回复了(不是一个人),说我的帐号XX(中文) 不行,让我重新注册一个帐号再回复,他帮我弄.\n>由于当时issue2已经有官方人员回复OK了,我就在issue1里回复说我在另一个issue里已经解决.然后我就很欢喜的去提交,折腾了好久都没提交上,一直说没有权限...但是当时我用那个帐号登录OSS是可以登录的,就是提交不了.\n>折腾了几个小时之后,很无奈的去issue2里求助官方人员,然后在issue1里让我重新注册的兄弟在issue2里说是因为我的帐号是中文,无法分配权限,让我重新注册一个再在issue2里回复,他帮我配权限...\n> 重新注册了一个帐号之后,用新的帐号提交,OK了...\n\n#### 登录Jira\n注册完成后就登录: [https://issues.sonatype.org/login.jsp](https://issues.sonatype.org/login.jsp)\n\n#### 创建一个 Issue\n创建地址: [https://issues.sonatype.org/secure/CreateIssue.jspa?issuetype=21&pid=10134](https://issues.sonatype.org/secure/CreateIssue.jspa?issuetype=21&pid=10134)\n>这个地址已经选择好了项目和类型,直接填就行,当然,如果你要通过【Create】按钮创建\n>Project选择【Community Support - Open Source Project Repository Hosting (OSSRH)】\n>Issue Type：选择【New Project】\nSummary和Description ：自己填,注意要用E文\nGroup Id:：这个必须要注意,如果你用的是GitHub, 一定要是 com.github.你的github用户名, 例如我的项目地址是: https://github.com/KeRan213539/CommonOkHttp, 那我的 groupId就是com.github.KeRan213539,当然也可以使用 GitHub的Page的域名 io.github.你的github用户名. 如果你有自己的域名和项目地址也可以,官方人员会询问你是否有这个域名的所有权.在你项目的pom里一定要使用这个groupId,最好包路径也使用\nProject URL: 是你的项目地址\nSCM url: 是你的项目git地址\nUsername(s): 可以不用填,这是能辅助你提交项目的合作人的帐号,前提是他也得在这个Jira注册\n其他使用默认值就行了\n\n创建好Issue后就等待官方回复吧.通常如果在晚上22点23点的话回复会比较快,运气好几分钟就有回复了\n当看到回复类似 com.github.xxx has been prepared, now user(s) xxx can:Deploy snapshot artifacts into repository ... 说明OK了,可以提交了\n\n#### 使用 GPG 生成密钥对 \n在等待Issue的时候可以先把密钥搞好\nWindows 系统，可以下载 Gpg4win 软件来生成密钥对。下载地址：[https://www.gpg4win.org/download.html](https://www.gpg4win.org/download.html)\n下载的时候有个坑,会弹出一个捐助页面,然后没有下载的地方,也没有自动开始下载.感觉好像不捐助就不能下载一样.其实在下载页面下面有个All Downloads,里面有个连接 [files.gpg4win.org](https://files.gpg4win.org/),在这里找到与下载页面上的最新版相同的版本号下载即可\n安装过程中在选择组件的时候,除了默认必须安装的,其他取消即可\n安装完成后,打开CMD\n>查看是否安装成功\ngpg --version\n\n---\n>生成密钥对\n>gpg --gen-key\n>Real name: 名字(E文)\n>Email address: 邮箱\n>You selected this USER-ID:\n>    \"xxx<xxx@qq.com>\"\n>Change (N)ame, (E)mail, or (O)kay/(Q)uit? o\n>之后往下，会让你输入用户名和邮箱，还有一个Passphase（输入两次），相当于密钥库密码，不要忘记。\n---\n>查看公钥\n>gpg --list-keys\n>pub   rsa2048 2017-12-16 [SC] [expires: 2019-12-16]\n>      9DF36BF5DFB87B6F04DBCE3D63EC6544BEE6682D\n>uid           [ultimate] xxx<xxx@qq.com>\n>sub   rsa2048 2017-12-16 [E] [expires: 2019-12-16]\n\n>其中 9DF36BF5DFB87B6F04DBCE3D63EC6544BEE6682D 就是公钥\n---\n>将公钥发布到 PGP 密钥服务器\ngpg --keyserver hkp://pool.sks-keyservers.net --send-keys 你的公钥\n---\n>查询公钥是否发布成功\ngpg --keyserver hkp://pool.sks-keyservers.net --recv-keys  你的公钥\n\n#### 修改Maven配制\n如果你的Issue通过了,那么可以开始提交项目了.\n>修改maven全局配制文件 settings.xml,在maven安装目录的conf文件夹下\n---\n```\n<servers>\n    <server>\n        <id>oss</id>\n        <username>用户名</username>\n        <password>密码</password>\n    </server>\n</servers>\n```\n这里的 id 是要在 pom.xml 里面使用的，用户名和密码就是Jira的帐号密码\n---\n>pom.xml\n```\n<project>\n    ...\n    <name>dexcoder-assistant</name>\n    <description>dexcoder-assistant is a rapid development kit.</description>\n    <url>http://www.dexcoder.com/</url>\n    <licenses>\n        <license>\n            <name>The Apache Software License, Version 2.0</naurl\n            <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>\n        </license>\n    </licenses>\n    <developers>\n        <developer>\n            <name>selfly</name>\n            <email>selfly@foxmail.com</email>\n        </developer>\n    </developers>\n    <scm>\n        <connection>scm:git:git@github.com:selfly/dexcoder-assistant.git</connection>\n        <developerConnection>scm:git:git@github.com:selfly/dexcoder-assistant.git</developerConnection>\n        <url>git@github.com:selfly/dexcoder-assistant.git</url>\n    </scm>\n    \n    <profiles>\n        <profile>\n            <id>release</id>\n            <build>\n                <plugins>\n                    <!-- Source -->\n                    <plugin>\n                        <groupId>org.apache.maven.plugins</groupId>\n                        <artifactId>maven-source-plugin</artifactId>\n                        <version>2.2.1</version>\n                        <executions>\n                            <execution>\n                                <phase>package</phase>\n                                <goals>\n                                    <goal>jar-no-fork</goal>\n                                </goals>\n                            </execution>\n                        </executions>\n                    </plugin>\n                    <!-- Javadoc -->\n                    <plugin>\n                        <groupId>org.apache.maven.plugins</groupId>\n                        <artifactId>maven-javadoc-plugin</artifactId>\n                        <version>2.9.1</version>\n                        <configuration>\n                        \t<show>private</show>\n                        \t<nohelp>true</nohelp>\n                                    <charset>UTF-8</charset>\n\t\t\t\t<encoding>UTF-8</encoding>\n\t\t\t\t<docencoding>UTF-8</docencoding>\n\t\t\t\t<additionalparam>-Xdoclint:none</additionalparam>  <!-- TODO 临时解决不规范的javadoc生成报错,后面要规范化后把这行去掉 -->\n\t\t\t</configuration>\n                        <executions>\n                            <execution>\n                                <phase>package</phase>\n                                <goals>\n                                    <goal>jar</goal>\n                                </goals>\n                            </execution>\n                        </executions>\n                    </plugin>\n                    <!-- GPG -->\n                    <plugin>\n                        <groupId>org.apache.maven.plugins</groupId>\n                        <artifactId>maven-gpg-plugin</artifactId>\n                        <version>1.5</version>\n                        <executions>\n                            <execution>\n                                <phase>verify</phase>\n                                <goals>\n                                    <goal>sign</goal>\n                                </goals>\n                            </execution>\n                        </executions>\n                    </plugin>\n                </plugins>\n            </build>\n            <distributionManagement>\n                <snapshotRepository>\n                    <id>oss</id>\n                    <url>https://oss.sonatype.org/content/repositories/snapshots/</url>\n                </snapshotRepository>\n                <repository>\n                    <id>oss</id>\n                    <url>https://oss.sonatype.org/service/local/staging/deploy/maven2/</url>\n                </repository>\n            </distributionManagement>\n        </profile>\n    </profiles>\n    ...\n</project>\n```\n>pom.xml 中必须包括：name、description、url、licenses、developers、scm 等基本信息，使用了 Maven 的 profile 功能，只有在 release 的时候，创建源码包、文档包、使用 GPG 进行数字签名。\n此外，snapshotRepository 与 repository 中的 id 一定要与 setting.xml 中 server 的 id 保持一致。\n如果是多模块项目的话，只需要在父 pom.xml 中声明这些，子 pom.xml 中只需要修改相应的一些信息，如 name 标签。\n由于我使用的是jdk8,对doc的格式要求更严,不标准的doc注释会报错,这时候可以通过在doc插件中配制additionalparam参数,上面代码里已经配过了.但这只是临时解决方案,还是尽量使用标准的doc注释吧.\n\n#### 提交项目到OSS\nmaven配制修改完成后,就可以提交项目了,使用命令:\n```\nmvn clean deploy -P release\n```\n>当执行以上 Maven 命令时，会自动弹出一个对话框，需要输入上面提到的 Passphase，它就是刚才设置的 GPG 密钥库的密码。\n>注意：此时上传的构件并未正式发布到中央仓库中，只是部署到 OSS 中了，下面才是真正的发布。\n---\n>执行上面的命令的过程中,可能会找不到gpg.exe, 检查环境变量,发现环境变量中已经配制了gpg.exe所在的路径,但是还是报错... 如何解决? setting.xml中加入:\n```\n<profile>\n      <id>release</id>\n      <properties>\n        <gpg.executable>D:/Program Files (x86)/GnuPG/bin/gpg.exe</gpg.executable>\n        <gpg.passphrase>上面提到的 Passphase</gpg.passphrase>\n      </properties>\n    </profile>\n```\n>注意 ID要与pom.xml里的发布的 profile 的ID对应\n其中<gpg.executable>为你的gpg.exe的完整路径\n<gpg.passphrase> 为上面提到的 Passphase,这样就不用在每次发布的时候都输入密码了,但是我发现即便有这个,有时候(只是有时,不是每次)还是要让输入密码,暂时不清楚是什么问题.\n上面这2个配制也可以配制到pom.xml的gpg插件的<configuration>中,去掉<gpg.>就行,当然密码最好还是不要放在pom.xml里,因为如果你的代码开源的话,密码也一起开源了...\n---\n>如何发布快照版本?\n在pom.xml中的项目版本号后面加上  -SNAPSHOT 就行\n快照版到这里就发布好了，不需要执行下面的关闭、发布构建步骤，构建列表里也找不到快照版的构建，快照版发布后就可以直接引用了\n\n#### 在 OSS中发布\n>使用 Jira 账号登录 [https://oss.sonatype.org](https://oss.sonatype.org)，在 Staging Repositories 中查看刚才已上传的构件。\n一般发布的构件不多,可以直接滚动条拉到最后就能看到自己的构件,或者更改时间排序,也可进行模糊查询定位到自己的构件\n找到自己的构建后选中,并点击上方的 【Close】按钮关闭构建,这个过程有点慢,稍等几分钟\n刷新页面,发现关闭成功后,再次选中自己的构建,点击上方的【Release】发布构建.\n\n#### 通知Sonatype 已经成功发布\n>在Issue中通过审核的官方回复中,通常会让你在发布成功后再次回复告知他们,在刚才那个Issue中回复已经成功发布,官方会回复你大概需要等多久才能在中央仓库中找到你的项目(10分钟左右)以及要多久才能在搜索中搜到(2个小时左右)\n\n#### 以后的提交过程\n>第一次提交才这么麻烦,以后提交只用重复maven发布,OSS中Close,Release的过程就可以了,当然需要等待的时间还是10分钟和2小时.\n如果要发布新的项目,在使用相同GroupId的情况下,与上面的过程一样.只有使用不同的GroupId的时候,才会需要再去提交Issue申请.\n当然如果你没有换电脑的话 GPG 的过程只需要一次就行\n\n####  结束\n到此发布过程就结束了.本文参考了以下文章,特别感谢这些文章的作者:\n[Maven 发布自己的项目到 Maven 中央仓库](https://www.cnblogs.com/binarylei/p/8628245.html)\n[[干货]--发布项目到maven中央仓库](https://www.cnblogs.com/songjialin2016/p/8624019.html)\n[将项目发布到Maven中央库](https://blog.csdn.net/lanmo555/article/details/52456751)","slug":"将你自己的项目发布到maven中央仓库","published":1,"updated":"2018-04-21T15:23:07.002Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgabk9ui0005v4g8qzn0244f","content":"<p><excerpt in=\"\" index=\"\" |=\"\" 首页摘要=\"\"> </excerpt></p>\n<h1 id=\"为什么写这篇文章\"><a href=\"#为什么写这篇文章\" class=\"headerlink\" title=\"为什么写这篇文章\"></a>为什么写这篇文章</h1><p>现在OkHttp很火,研究学习了一下,铺天盖地的教程和通用工具都是Android用的,封装了很多Android的组件在里边.但是OkHttp不是一个安卓库啊,它是java库,所有基于JVM的语言都可以用.<br>所以自己写了个OkHttp通用简单封装并放到了github,这是本人第一个开源项目,有点小兴奋呢.但是只是开源,别人想使用也麻烦,还要下载下来自己编译,然后就想到了把它提交到maven中央仓库.但是没有提交过啊,各种搜索折腾了一天,终于成功了.<br>这篇文章大概介绍一下如何将自己的项目发布到maven中央仓库及我滚过的坑(可能大家会觉得可笑,想笑就笑吧,反正我也看不见o(∩_∩)o )</p>\n<p>+<a id=\"more\"></a></p>\n<the rest=\"\" of=\"\" contents=\"\" |=\"\" 余下全文=\"\">\n\n<h1 id=\"什么是maven中央仓库\"><a href=\"#什么是maven中央仓库\" class=\"headerlink\" title=\"什么是maven中央仓库\"></a>什么是maven中央仓库</h1><p>偷个懒,下面的内容摘抄自 <a href=\"http://www.cnblogs.com/songjialin2016/p/8624019.html\" target=\"_blank\" rel=\"noopener\">发布项目到maven中央仓库</a></p>\n<blockquote>\n<p>maven是java世界最流行的构建工具，构建内容囊括了一个java项目的整个生命周期。其中最重要的功能就是依赖管理，maven通过一个类似云的ftp站点统一管理所有java 的jar文件，同时给每个文件的每个版本一个统一的唯一坐标。开发人员通过检索配置这些坐标，选择自己需要的构件搭建自己的项目环境。因此，通过一个叫做pom的描述文件，我们就可以在任何平台搭建好项目运行所需要的环境。方便了协作和分享代码。</p>\n</blockquote>\n<blockquote>\n<p>而那个类似云的ftp站点就是maven中央仓库。由于一些不可抗拒因素，我们对于中央仓库的访问速度比较慢。因此在平时工作环境中，我们往往都是使用一些镜像站点，如阿里云和开源中国的仓库镜像。同时由于公司里的商业代码不可发布到公开站点，我们也会在局域网内搭建私服。但是无论是镜像还是私服，都像是缓存，虽然提高了下载速度，但是最终，所有的jar都来自中央仓库。因此，如果我们将项目发布到了maven 中央仓库中，那么在所有基于maven或者gradle等的项目里都可以依赖下载你的构件。真正做到了一次发布，处处可用。</p>\n</blockquote>\n<h1 id=\"发布到中央仓库的好处\"><a href=\"#发布到中央仓库的好处\" class=\"headerlink\" title=\"发布到中央仓库的好处\"></a>发布到中央仓库的好处</h1><p>偷个懒,下面的内容摘抄自 <a href=\"http://www.cnblogs.com/songjialin2016/p/8624019.html\" target=\"_blank\" rel=\"noopener\">发布项目到maven中央仓库</a></p>\n<blockquote>\n<p>首先，作为一个java从业者，对于天天都在用的东西，做一个深入的了解，发布一个项目到中央仓库可以自我满足。作为我来讲，我发布了一个自己的项目，开始有了利用下班时间好好写点开源代码学习和装逼的冲动。</p>\n</blockquote>\n<blockquote>\n<p>再者，作为一个经验丰富的java开发工程师，我们在日常工作中总会积攒下自己使用得很顺手的一些轮子或者一些通用的基础类。如果我们整理好，并持续维护，发布到了中央仓库之后，就可以避免很多重复性的工作。而且也避免了很多冲突：我现在的公司里，每个项目的dubbo调用接口都会自己定义一个Response和Request类。同一类型的重复定义，跟cpp的多根继承一样烦。这样的结果导致了没法统一处理各个系统的调用返回值。既不够优雅，也显得重复。如果我们把这些基础的东西发布到了中央仓库，就只需要引用一下了。当然这种情况一般是发布到私服比较好，我只是举个例子。具体的大家自行体会。</p>\n</blockquote>\n<h1 id=\"发布过程\"><a href=\"#发布过程\" class=\"headerlink\" title=\"发布过程\"></a>发布过程</h1><p>在发布前,您需要有自己的项目主页并开源的代码,您可以使用GitHub或者码云,下面的内容以GitHub为例</p>\n<h4 id=\"注册-sonatype的Jira-帐号\"><a href=\"#注册-sonatype的Jira-帐号\" class=\"headerlink\" title=\"注册 sonatype的Jira 帐号\"></a>注册 sonatype的Jira 帐号</h4><p>注册地址: <a href=\"https://issues.sonatype.org/secure/Signup!default.jspa\" target=\"_blank\" rel=\"noopener\">https://issues.sonatype.org/secure/Signup!default.jspa</a><br>注册很简单,重要的是邮箱地址一定要正确,issue有任何变动都会通过邮件通知.</p>\n<blockquote>\n<p>这里要着重说明一下,也是我滚过的坑: Username 字段一定要使用英文+数字,一定不要使用中文!!!否则官方无法分配权限给你,或者会让你另行注册.<br>因为这个Username会成为这个Jira和提交maven项目的OSS的帐号,虽然用中文登录啥的没问题,但提交的时候就有问题了,我折腾了N个小时,最后又求助官方人员才解决.<br>我当时发了一个issue,就叫 issues1吧,当时官方人员让我修改GroupId,修改后我回复修改完成,等了好多个小时都没回应.然后我又提交了一个issue2,内容与issue1一毛一样,很快就有官方人员说OK了.<br>没过几分钟issue1也有官方人员回复了(不是一个人),说我的帐号XX(中文) 不行,让我重新注册一个帐号再回复,他帮我弄.<br>由于当时issue2已经有官方人员回复OK了,我就在issue1里回复说我在另一个issue里已经解决.然后我就很欢喜的去提交,折腾了好久都没提交上,一直说没有权限…但是当时我用那个帐号登录OSS是可以登录的,就是提交不了.<br>折腾了几个小时之后,很无奈的去issue2里求助官方人员,然后在issue1里让我重新注册的兄弟在issue2里说是因为我的帐号是中文,无法分配权限,让我重新注册一个再在issue2里回复,他帮我配权限…<br>重新注册了一个帐号之后,用新的帐号提交,OK了…</p>\n</blockquote>\n<h4 id=\"登录Jira\"><a href=\"#登录Jira\" class=\"headerlink\" title=\"登录Jira\"></a>登录Jira</h4><p>注册完成后就登录: <a href=\"https://issues.sonatype.org/login.jsp\" target=\"_blank\" rel=\"noopener\">https://issues.sonatype.org/login.jsp</a></p>\n<h4 id=\"创建一个-Issue\"><a href=\"#创建一个-Issue\" class=\"headerlink\" title=\"创建一个 Issue\"></a>创建一个 Issue</h4><p>创建地址: <a href=\"https://issues.sonatype.org/secure/CreateIssue.jspa?issuetype=21&amp;pid=10134\" target=\"_blank\" rel=\"noopener\">https://issues.sonatype.org/secure/CreateIssue.jspa?issuetype=21&amp;pid=10134</a></p>\n<blockquote>\n<p>这个地址已经选择好了项目和类型,直接填就行,当然,如果你要通过【Create】按钮创建<br>Project选择【Community Support - Open Source Project Repository Hosting (OSSRH)】<br>Issue Type：选择【New Project】<br>Summary和Description ：自己填,注意要用E文<br>Group Id:：这个必须要注意,如果你用的是GitHub, 一定要是 com.github.你的github用户名, 例如我的项目地址是: <a href=\"https://github.com/KeRan213539/CommonOkHttp\" target=\"_blank\" rel=\"noopener\">https://github.com/KeRan213539/CommonOkHttp</a>, 那我的 groupId就是com.github.KeRan213539,当然也可以使用 GitHub的Page的域名 io.github.你的github用户名. 如果你有自己的域名和项目地址也可以,官方人员会询问你是否有这个域名的所有权.在你项目的pom里一定要使用这个groupId,最好包路径也使用<br>Project URL: 是你的项目地址<br>SCM url: 是你的项目git地址<br>Username(s): 可以不用填,这是能辅助你提交项目的合作人的帐号,前提是他也得在这个Jira注册<br>其他使用默认值就行了</p>\n</blockquote>\n<p>创建好Issue后就等待官方回复吧.通常如果在晚上22点23点的话回复会比较快,运气好几分钟就有回复了<br>当看到回复类似 com.github.xxx has been prepared, now user(s) xxx can:Deploy snapshot artifacts into repository … 说明OK了,可以提交了</p>\n<h4 id=\"使用-GPG-生成密钥对\"><a href=\"#使用-GPG-生成密钥对\" class=\"headerlink\" title=\"使用 GPG 生成密钥对\"></a>使用 GPG 生成密钥对</h4><p>在等待Issue的时候可以先把密钥搞好<br>Windows 系统，可以下载 Gpg4win 软件来生成密钥对。下载地址：<a href=\"https://www.gpg4win.org/download.html\" target=\"_blank\" rel=\"noopener\">https://www.gpg4win.org/download.html</a><br>下载的时候有个坑,会弹出一个捐助页面,然后没有下载的地方,也没有自动开始下载.感觉好像不捐助就不能下载一样.其实在下载页面下面有个All Downloads,里面有个连接 <a href=\"https://files.gpg4win.org/\" target=\"_blank\" rel=\"noopener\">files.gpg4win.org</a>,在这里找到与下载页面上的最新版相同的版本号下载即可<br>安装过程中在选择组件的时候,除了默认必须安装的,其他取消即可<br>安装完成后,打开CMD</p>\n<blockquote>\n<p>查看是否安装成功<br>gpg –version</p>\n</blockquote>\n<hr>\n<blockquote>\n<p>生成密钥对<br>gpg –gen-key<br>Real name: 名字(E文)<br>Email address: 邮箱<br>You selected this USER-ID:<br>   “xxx<a href=\"mailto:&#120;&#120;&#x78;&#x40;&#x71;&#113;&#46;&#x63;&#111;&#x6d;\" target=\"_blank\" rel=\"noopener\">&#120;&#120;&#x78;&#x40;&#x71;&#113;&#46;&#x63;&#111;&#x6d;</a>“<br>Change (N)ame, (E)mail, or (O)kay/(Q)uit? o<br>之后往下，会让你输入用户名和邮箱，还有一个Passphase（输入两次），相当于密钥库密码，不要忘记。</p>\n</blockquote>\n<hr>\n<blockquote>\n<p>查看公钥<br>gpg –list-keys<br>pub   rsa2048 2017-12-16 [SC] [expires: 2019-12-16]<br>     9DF36BF5DFB87B6F04DBCE3D63EC6544BEE6682D<br>uid           [ultimate] xxx<a href=\"mailto:&#120;&#120;&#x78;&#64;&#x71;&#x71;&#46;&#99;&#x6f;&#109;\" target=\"_blank\" rel=\"noopener\">&#120;&#120;&#x78;&#64;&#x71;&#x71;&#46;&#99;&#x6f;&#109;</a><br>sub   rsa2048 2017-12-16 [E] [expires: 2019-12-16]</p>\n</blockquote>\n<blockquote>\n<p>其中 9DF36BF5DFB87B6F04DBCE3D63EC6544BEE6682D 就是公钥</p>\n</blockquote>\n<hr>\n<blockquote>\n<p>将公钥发布到 PGP 密钥服务器</p>\n</blockquote>\n<h2 id=\"gpg-–keyserver-hkp-pool-sks-keyservers-net-–send-keys-你的公钥\"><a href=\"#gpg-–keyserver-hkp-pool-sks-keyservers-net-–send-keys-你的公钥\" class=\"headerlink\" title=\"gpg –keyserver hkp://pool.sks-keyservers.net –send-keys 你的公钥\"></a>gpg –keyserver hkp://pool.sks-keyservers.net –send-keys 你的公钥</h2><blockquote>\n<p>查询公钥是否发布成功<br>gpg –keyserver hkp://pool.sks-keyservers.net –recv-keys  你的公钥</p>\n</blockquote>\n<h4 id=\"修改Maven配制\"><a href=\"#修改Maven配制\" class=\"headerlink\" title=\"修改Maven配制\"></a>修改Maven配制</h4><p>如果你的Issue通过了,那么可以开始提交项目了.</p>\n<blockquote>\n<p>修改maven全局配制文件 settings.xml,在maven安装目录的conf文件夹下</p>\n</blockquote>\n<hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;servers&gt;</span><br><span class=\"line\">    &lt;server&gt;</span><br><span class=\"line\">        &lt;id&gt;oss&lt;/id&gt;</span><br><span class=\"line\">        &lt;username&gt;用户名&lt;/username&gt;</span><br><span class=\"line\">        &lt;password&gt;密码&lt;/password&gt;</span><br><span class=\"line\">    &lt;/server&gt;</span><br><span class=\"line\">&lt;/servers&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"这里的-id-是要在-pom-xml-里面使用的，用户名和密码就是Jira的帐号密码\"><a href=\"#这里的-id-是要在-pom-xml-里面使用的，用户名和密码就是Jira的帐号密码\" class=\"headerlink\" title=\"这里的 id 是要在 pom.xml 里面使用的，用户名和密码就是Jira的帐号密码\"></a>这里的 id 是要在 pom.xml 里面使用的，用户名和密码就是Jira的帐号密码</h2><blockquote>\n<p>pom.xml<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;project&gt;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    &lt;name&gt;dexcoder-assistant&lt;/name&gt;</span><br><span class=\"line\">    &lt;description&gt;dexcoder-assistant is a rapid development kit.&lt;/description&gt;</span><br><span class=\"line\">    &lt;url&gt;http://www.dexcoder.com/&lt;/url&gt;</span><br><span class=\"line\">    &lt;licenses&gt;</span><br><span class=\"line\">        &lt;license&gt;</span><br><span class=\"line\">            &lt;name&gt;The Apache Software License, Version 2.0&lt;/naurl</span><br><span class=\"line\">            &lt;url&gt;http://www.apache.org/licenses/LICENSE-2.0.txt&lt;/url&gt;</span><br><span class=\"line\">        &lt;/license&gt;</span><br><span class=\"line\">    &lt;/licenses&gt;</span><br><span class=\"line\">    &lt;developers&gt;</span><br><span class=\"line\">        &lt;developer&gt;</span><br><span class=\"line\">            &lt;name&gt;selfly&lt;/name&gt;</span><br><span class=\"line\">            &lt;email&gt;selfly@foxmail.com&lt;/email&gt;</span><br><span class=\"line\">        &lt;/developer&gt;</span><br><span class=\"line\">    &lt;/developers&gt;</span><br><span class=\"line\">    &lt;scm&gt;</span><br><span class=\"line\">        &lt;connection&gt;scm:git:git@github.com:selfly/dexcoder-assistant.git&lt;/connection&gt;</span><br><span class=\"line\">        &lt;developerConnection&gt;scm:git:git@github.com:selfly/dexcoder-assistant.git&lt;/developerConnection&gt;</span><br><span class=\"line\">        &lt;url&gt;git@github.com:selfly/dexcoder-assistant.git&lt;/url&gt;</span><br><span class=\"line\">    &lt;/scm&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &lt;profiles&gt;</span><br><span class=\"line\">        &lt;profile&gt;</span><br><span class=\"line\">            &lt;id&gt;release&lt;/id&gt;</span><br><span class=\"line\">            &lt;build&gt;</span><br><span class=\"line\">                &lt;plugins&gt;</span><br><span class=\"line\">                    &lt;!-- Source --&gt;</span><br><span class=\"line\">                    &lt;plugin&gt;</span><br><span class=\"line\">                        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class=\"line\">                        &lt;artifactId&gt;maven-source-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">                        &lt;version&gt;2.2.1&lt;/version&gt;</span><br><span class=\"line\">                        &lt;executions&gt;</span><br><span class=\"line\">                            &lt;execution&gt;</span><br><span class=\"line\">                                &lt;phase&gt;package&lt;/phase&gt;</span><br><span class=\"line\">                                &lt;goals&gt;</span><br><span class=\"line\">                                    &lt;goal&gt;jar-no-fork&lt;/goal&gt;</span><br><span class=\"line\">                                &lt;/goals&gt;</span><br><span class=\"line\">                            &lt;/execution&gt;</span><br><span class=\"line\">                        &lt;/executions&gt;</span><br><span class=\"line\">                    &lt;/plugin&gt;</span><br><span class=\"line\">                    &lt;!-- Javadoc --&gt;</span><br><span class=\"line\">                    &lt;plugin&gt;</span><br><span class=\"line\">                        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class=\"line\">                        &lt;artifactId&gt;maven-javadoc-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">                        &lt;version&gt;2.9.1&lt;/version&gt;</span><br><span class=\"line\">                        &lt;configuration&gt;</span><br><span class=\"line\">                        \t&lt;show&gt;private&lt;/show&gt;</span><br><span class=\"line\">                        \t&lt;nohelp&gt;true&lt;/nohelp&gt;</span><br><span class=\"line\">                                    &lt;charset&gt;UTF-8&lt;/charset&gt;</span><br><span class=\"line\">\t\t\t\t&lt;encoding&gt;UTF-8&lt;/encoding&gt;</span><br><span class=\"line\">\t\t\t\t&lt;docencoding&gt;UTF-8&lt;/docencoding&gt;</span><br><span class=\"line\">\t\t\t\t&lt;additionalparam&gt;-Xdoclint:none&lt;/additionalparam&gt;  &lt;!-- TODO 临时解决不规范的javadoc生成报错,后面要规范化后把这行去掉 --&gt;</span><br><span class=\"line\">\t\t\t&lt;/configuration&gt;</span><br><span class=\"line\">                        &lt;executions&gt;</span><br><span class=\"line\">                            &lt;execution&gt;</span><br><span class=\"line\">                                &lt;phase&gt;package&lt;/phase&gt;</span><br><span class=\"line\">                                &lt;goals&gt;</span><br><span class=\"line\">                                    &lt;goal&gt;jar&lt;/goal&gt;</span><br><span class=\"line\">                                &lt;/goals&gt;</span><br><span class=\"line\">                            &lt;/execution&gt;</span><br><span class=\"line\">                        &lt;/executions&gt;</span><br><span class=\"line\">                    &lt;/plugin&gt;</span><br><span class=\"line\">                    &lt;!-- GPG --&gt;</span><br><span class=\"line\">                    &lt;plugin&gt;</span><br><span class=\"line\">                        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class=\"line\">                        &lt;artifactId&gt;maven-gpg-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">                        &lt;version&gt;1.5&lt;/version&gt;</span><br><span class=\"line\">                        &lt;executions&gt;</span><br><span class=\"line\">                            &lt;execution&gt;</span><br><span class=\"line\">                                &lt;phase&gt;verify&lt;/phase&gt;</span><br><span class=\"line\">                                &lt;goals&gt;</span><br><span class=\"line\">                                    &lt;goal&gt;sign&lt;/goal&gt;</span><br><span class=\"line\">                                &lt;/goals&gt;</span><br><span class=\"line\">                            &lt;/execution&gt;</span><br><span class=\"line\">                        &lt;/executions&gt;</span><br><span class=\"line\">                    &lt;/plugin&gt;</span><br><span class=\"line\">                &lt;/plugins&gt;</span><br><span class=\"line\">            &lt;/build&gt;</span><br><span class=\"line\">            &lt;distributionManagement&gt;</span><br><span class=\"line\">                &lt;snapshotRepository&gt;</span><br><span class=\"line\">                    &lt;id&gt;oss&lt;/id&gt;</span><br><span class=\"line\">                    &lt;url&gt;https://oss.sonatype.org/content/repositories/snapshots/&lt;/url&gt;</span><br><span class=\"line\">                &lt;/snapshotRepository&gt;</span><br><span class=\"line\">                &lt;repository&gt;</span><br><span class=\"line\">                    &lt;id&gt;oss&lt;/id&gt;</span><br><span class=\"line\">                    &lt;url&gt;https://oss.sonatype.org/service/local/staging/deploy/maven2/&lt;/url&gt;</span><br><span class=\"line\">                &lt;/repository&gt;</span><br><span class=\"line\">            &lt;/distributionManagement&gt;</span><br><span class=\"line\">        &lt;/profile&gt;</span><br><span class=\"line\">    &lt;/profiles&gt;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&lt;/project&gt;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<blockquote>\n<p>pom.xml 中必须包括：name、description、url、licenses、developers、scm 等基本信息，使用了 Maven 的 profile 功能，只有在 release 的时候，创建源码包、文档包、使用 GPG 进行数字签名。<br>此外，snapshotRepository 与 repository 中的 id 一定要与 setting.xml 中 server 的 id 保持一致。<br>如果是多模块项目的话，只需要在父 pom.xml 中声明这些，子 pom.xml 中只需要修改相应的一些信息，如 name 标签。<br>由于我使用的是jdk8,对doc的格式要求更严,不标准的doc注释会报错,这时候可以通过在doc插件中配制additionalparam参数,上面代码里已经配过了.但这只是临时解决方案,还是尽量使用标准的doc注释吧.</p>\n</blockquote>\n<h4 id=\"提交项目到OSS\"><a href=\"#提交项目到OSS\" class=\"headerlink\" title=\"提交项目到OSS\"></a>提交项目到OSS</h4><p>maven配制修改完成后,就可以提交项目了,使用命令:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn clean deploy -P release</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>当执行以上 Maven 命令时，会自动弹出一个对话框，需要输入上面提到的 Passphase，它就是刚才设置的 GPG 密钥库的密码。<br>注意：此时上传的构件并未正式发布到中央仓库中，只是部署到 OSS 中了，下面才是真正的发布。</p>\n</blockquote>\n<hr>\n<blockquote>\n<p>执行上面的命令的过程中,可能会找不到gpg.exe, 检查环境变量,发现环境变量中已经配制了gpg.exe所在的路径,但是还是报错… 如何解决? setting.xml中加入:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;profile&gt;</span><br><span class=\"line\">      &lt;id&gt;release&lt;/id&gt;</span><br><span class=\"line\">      &lt;properties&gt;</span><br><span class=\"line\">        &lt;gpg.executable&gt;D:/Program Files (x86)/GnuPG/bin/gpg.exe&lt;/gpg.executable&gt;</span><br><span class=\"line\">        &lt;gpg.passphrase&gt;上面提到的 Passphase&lt;/gpg.passphrase&gt;</span><br><span class=\"line\">      &lt;/properties&gt;</span><br><span class=\"line\">    &lt;/profile&gt;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<blockquote>\n<p>注意 ID要与pom.xml里的发布的 profile 的ID对应<br>其中&lt;gpg.executable&gt;为你的gpg.exe的完整路径</p>\n</blockquote>\n<p>&lt;gpg.passphrase&gt; 为上面提到的 Passphase,这样就不用在每次发布的时候都输入密码了,但是我发现即便有这个,有时候(只是有时,不是每次)还是要让输入密码,暂时不清楚是什么问题.</p>\n<h2 id=\"上面这2个配制也可以配制到pom-xml的gpg插件的中-去掉-lt-gpg-gt-就行-当然密码最好还是不要放在pom-xml里-因为如果你的代码开源的话-密码也一起开源了…\"><a href=\"#上面这2个配制也可以配制到pom-xml的gpg插件的中-去掉-lt-gpg-gt-就行-当然密码最好还是不要放在pom-xml里-因为如果你的代码开源的话-密码也一起开源了…\" class=\"headerlink\" title=\"上面这2个配制也可以配制到pom.xml的gpg插件的中,去掉&lt;gpg.&gt;就行,当然密码最好还是不要放在pom.xml里,因为如果你的代码开源的话,密码也一起开源了…\"></a>上面这2个配制也可以配制到pom.xml的gpg插件的<configuration>中,去掉&lt;gpg.&gt;就行,当然密码最好还是不要放在pom.xml里,因为如果你的代码开源的话,密码也一起开源了…</configuration></h2><blockquote>\n<p>如何发布快照版本?<br>在pom.xml中的项目版本号后面加上  -SNAPSHOT 就行<br>快照版到这里就发布好了，不需要执行下面的关闭、发布构建步骤，构建列表里也找不到快照版的构建，快照版发布后就可以直接引用了</p>\n</blockquote>\n<h4 id=\"在-OSS中发布\"><a href=\"#在-OSS中发布\" class=\"headerlink\" title=\"在 OSS中发布\"></a>在 OSS中发布</h4><blockquote>\n<p>使用 Jira 账号登录 <a href=\"https://oss.sonatype.org\" target=\"_blank\" rel=\"noopener\">https://oss.sonatype.org</a>，在 Staging Repositories 中查看刚才已上传的构件。<br>一般发布的构件不多,可以直接滚动条拉到最后就能看到自己的构件,或者更改时间排序,也可进行模糊查询定位到自己的构件<br>找到自己的构建后选中,并点击上方的 【Close】按钮关闭构建,这个过程有点慢,稍等几分钟<br>刷新页面,发现关闭成功后,再次选中自己的构建,点击上方的【Release】发布构建.</p>\n</blockquote>\n<h4 id=\"通知Sonatype-已经成功发布\"><a href=\"#通知Sonatype-已经成功发布\" class=\"headerlink\" title=\"通知Sonatype 已经成功发布\"></a>通知Sonatype 已经成功发布</h4><blockquote>\n<p>在Issue中通过审核的官方回复中,通常会让你在发布成功后再次回复告知他们,在刚才那个Issue中回复已经成功发布,官方会回复你大概需要等多久才能在中央仓库中找到你的项目(10分钟左右)以及要多久才能在搜索中搜到(2个小时左右)</p>\n</blockquote>\n<h4 id=\"以后的提交过程\"><a href=\"#以后的提交过程\" class=\"headerlink\" title=\"以后的提交过程\"></a>以后的提交过程</h4><blockquote>\n<p>第一次提交才这么麻烦,以后提交只用重复maven发布,OSS中Close,Release的过程就可以了,当然需要等待的时间还是10分钟和2小时.<br>如果要发布新的项目,在使用相同GroupId的情况下,与上面的过程一样.只有使用不同的GroupId的时候,才会需要再去提交Issue申请.<br>当然如果你没有换电脑的话 GPG 的过程只需要一次就行</p>\n</blockquote>\n<h4 id=\"结束\"><a href=\"#结束\" class=\"headerlink\" title=\"结束\"></a>结束</h4><p>到此发布过程就结束了.本文参考了以下文章,特别感谢这些文章的作者:<br><a href=\"https://www.cnblogs.com/binarylei/p/8628245.html\" target=\"_blank\" rel=\"noopener\">Maven 发布自己的项目到 Maven 中央仓库</a><br><a href=\"https://www.cnblogs.com/songjialin2016/p/8624019.html\" target=\"_blank\" rel=\"noopener\">[干货]–发布项目到maven中央仓库</a><br><a href=\"https://blog.csdn.net/lanmo555/article/details/52456751\" target=\"_blank\" rel=\"noopener\">将项目发布到Maven中央库</a></p>\n</the>","site":{"data":{}},"excerpt":"<p><excerpt in=\"\" index=\"\" |=\"\" 首页摘要=\"\"> </excerpt></p>\n<h1 id=\"为什么写这篇文章\"><a href=\"#为什么写这篇文章\" class=\"headerlink\" title=\"为什么写这篇文章\"></a>为什么写这篇文章</h1><p>现在OkHttp很火,研究学习了一下,铺天盖地的教程和通用工具都是Android用的,封装了很多Android的组件在里边.但是OkHttp不是一个安卓库啊,它是java库,所有基于JVM的语言都可以用.<br>所以自己写了个OkHttp通用简单封装并放到了github,这是本人第一个开源项目,有点小兴奋呢.但是只是开源,别人想使用也麻烦,还要下载下来自己编译,然后就想到了把它提交到maven中央仓库.但是没有提交过啊,各种搜索折腾了一天,终于成功了.<br>这篇文章大概介绍一下如何将自己的项目发布到maven中央仓库及我滚过的坑(可能大家会觉得可笑,想笑就笑吧,反正我也看不见o(∩_∩)o )</p>\n<p>+","more":"</p>\n<the rest=\"\" of=\"\" contents=\"\" |=\"\" 余下全文=\"\">\n\n<h1 id=\"什么是maven中央仓库\"><a href=\"#什么是maven中央仓库\" class=\"headerlink\" title=\"什么是maven中央仓库\"></a>什么是maven中央仓库</h1><p>偷个懒,下面的内容摘抄自 <a href=\"http://www.cnblogs.com/songjialin2016/p/8624019.html\" target=\"_blank\" rel=\"noopener\">发布项目到maven中央仓库</a></p>\n<blockquote>\n<p>maven是java世界最流行的构建工具，构建内容囊括了一个java项目的整个生命周期。其中最重要的功能就是依赖管理，maven通过一个类似云的ftp站点统一管理所有java 的jar文件，同时给每个文件的每个版本一个统一的唯一坐标。开发人员通过检索配置这些坐标，选择自己需要的构件搭建自己的项目环境。因此，通过一个叫做pom的描述文件，我们就可以在任何平台搭建好项目运行所需要的环境。方便了协作和分享代码。</p>\n</blockquote>\n<blockquote>\n<p>而那个类似云的ftp站点就是maven中央仓库。由于一些不可抗拒因素，我们对于中央仓库的访问速度比较慢。因此在平时工作环境中，我们往往都是使用一些镜像站点，如阿里云和开源中国的仓库镜像。同时由于公司里的商业代码不可发布到公开站点，我们也会在局域网内搭建私服。但是无论是镜像还是私服，都像是缓存，虽然提高了下载速度，但是最终，所有的jar都来自中央仓库。因此，如果我们将项目发布到了maven 中央仓库中，那么在所有基于maven或者gradle等的项目里都可以依赖下载你的构件。真正做到了一次发布，处处可用。</p>\n</blockquote>\n<h1 id=\"发布到中央仓库的好处\"><a href=\"#发布到中央仓库的好处\" class=\"headerlink\" title=\"发布到中央仓库的好处\"></a>发布到中央仓库的好处</h1><p>偷个懒,下面的内容摘抄自 <a href=\"http://www.cnblogs.com/songjialin2016/p/8624019.html\" target=\"_blank\" rel=\"noopener\">发布项目到maven中央仓库</a></p>\n<blockquote>\n<p>首先，作为一个java从业者，对于天天都在用的东西，做一个深入的了解，发布一个项目到中央仓库可以自我满足。作为我来讲，我发布了一个自己的项目，开始有了利用下班时间好好写点开源代码学习和装逼的冲动。</p>\n</blockquote>\n<blockquote>\n<p>再者，作为一个经验丰富的java开发工程师，我们在日常工作中总会积攒下自己使用得很顺手的一些轮子或者一些通用的基础类。如果我们整理好，并持续维护，发布到了中央仓库之后，就可以避免很多重复性的工作。而且也避免了很多冲突：我现在的公司里，每个项目的dubbo调用接口都会自己定义一个Response和Request类。同一类型的重复定义，跟cpp的多根继承一样烦。这样的结果导致了没法统一处理各个系统的调用返回值。既不够优雅，也显得重复。如果我们把这些基础的东西发布到了中央仓库，就只需要引用一下了。当然这种情况一般是发布到私服比较好，我只是举个例子。具体的大家自行体会。</p>\n</blockquote>\n<h1 id=\"发布过程\"><a href=\"#发布过程\" class=\"headerlink\" title=\"发布过程\"></a>发布过程</h1><p>在发布前,您需要有自己的项目主页并开源的代码,您可以使用GitHub或者码云,下面的内容以GitHub为例</p>\n<h4 id=\"注册-sonatype的Jira-帐号\"><a href=\"#注册-sonatype的Jira-帐号\" class=\"headerlink\" title=\"注册 sonatype的Jira 帐号\"></a>注册 sonatype的Jira 帐号</h4><p>注册地址: <a href=\"https://issues.sonatype.org/secure/Signup!default.jspa\" target=\"_blank\" rel=\"noopener\">https://issues.sonatype.org/secure/Signup!default.jspa</a><br>注册很简单,重要的是邮箱地址一定要正确,issue有任何变动都会通过邮件通知.</p>\n<blockquote>\n<p>这里要着重说明一下,也是我滚过的坑: Username 字段一定要使用英文+数字,一定不要使用中文!!!否则官方无法分配权限给你,或者会让你另行注册.<br>因为这个Username会成为这个Jira和提交maven项目的OSS的帐号,虽然用中文登录啥的没问题,但提交的时候就有问题了,我折腾了N个小时,最后又求助官方人员才解决.<br>我当时发了一个issue,就叫 issues1吧,当时官方人员让我修改GroupId,修改后我回复修改完成,等了好多个小时都没回应.然后我又提交了一个issue2,内容与issue1一毛一样,很快就有官方人员说OK了.<br>没过几分钟issue1也有官方人员回复了(不是一个人),说我的帐号XX(中文) 不行,让我重新注册一个帐号再回复,他帮我弄.<br>由于当时issue2已经有官方人员回复OK了,我就在issue1里回复说我在另一个issue里已经解决.然后我就很欢喜的去提交,折腾了好久都没提交上,一直说没有权限…但是当时我用那个帐号登录OSS是可以登录的,就是提交不了.<br>折腾了几个小时之后,很无奈的去issue2里求助官方人员,然后在issue1里让我重新注册的兄弟在issue2里说是因为我的帐号是中文,无法分配权限,让我重新注册一个再在issue2里回复,他帮我配权限…<br>重新注册了一个帐号之后,用新的帐号提交,OK了…</p>\n</blockquote>\n<h4 id=\"登录Jira\"><a href=\"#登录Jira\" class=\"headerlink\" title=\"登录Jira\"></a>登录Jira</h4><p>注册完成后就登录: <a href=\"https://issues.sonatype.org/login.jsp\" target=\"_blank\" rel=\"noopener\">https://issues.sonatype.org/login.jsp</a></p>\n<h4 id=\"创建一个-Issue\"><a href=\"#创建一个-Issue\" class=\"headerlink\" title=\"创建一个 Issue\"></a>创建一个 Issue</h4><p>创建地址: <a href=\"https://issues.sonatype.org/secure/CreateIssue.jspa?issuetype=21&amp;pid=10134\" target=\"_blank\" rel=\"noopener\">https://issues.sonatype.org/secure/CreateIssue.jspa?issuetype=21&amp;pid=10134</a></p>\n<blockquote>\n<p>这个地址已经选择好了项目和类型,直接填就行,当然,如果你要通过【Create】按钮创建<br>Project选择【Community Support - Open Source Project Repository Hosting (OSSRH)】<br>Issue Type：选择【New Project】<br>Summary和Description ：自己填,注意要用E文<br>Group Id:：这个必须要注意,如果你用的是GitHub, 一定要是 com.github.你的github用户名, 例如我的项目地址是: <a href=\"https://github.com/KeRan213539/CommonOkHttp\" target=\"_blank\" rel=\"noopener\">https://github.com/KeRan213539/CommonOkHttp</a>, 那我的 groupId就是com.github.KeRan213539,当然也可以使用 GitHub的Page的域名 io.github.你的github用户名. 如果你有自己的域名和项目地址也可以,官方人员会询问你是否有这个域名的所有权.在你项目的pom里一定要使用这个groupId,最好包路径也使用<br>Project URL: 是你的项目地址<br>SCM url: 是你的项目git地址<br>Username(s): 可以不用填,这是能辅助你提交项目的合作人的帐号,前提是他也得在这个Jira注册<br>其他使用默认值就行了</p>\n</blockquote>\n<p>创建好Issue后就等待官方回复吧.通常如果在晚上22点23点的话回复会比较快,运气好几分钟就有回复了<br>当看到回复类似 com.github.xxx has been prepared, now user(s) xxx can:Deploy snapshot artifacts into repository … 说明OK了,可以提交了</p>\n<h4 id=\"使用-GPG-生成密钥对\"><a href=\"#使用-GPG-生成密钥对\" class=\"headerlink\" title=\"使用 GPG 生成密钥对\"></a>使用 GPG 生成密钥对</h4><p>在等待Issue的时候可以先把密钥搞好<br>Windows 系统，可以下载 Gpg4win 软件来生成密钥对。下载地址：<a href=\"https://www.gpg4win.org/download.html\" target=\"_blank\" rel=\"noopener\">https://www.gpg4win.org/download.html</a><br>下载的时候有个坑,会弹出一个捐助页面,然后没有下载的地方,也没有自动开始下载.感觉好像不捐助就不能下载一样.其实在下载页面下面有个All Downloads,里面有个连接 <a href=\"https://files.gpg4win.org/\" target=\"_blank\" rel=\"noopener\">files.gpg4win.org</a>,在这里找到与下载页面上的最新版相同的版本号下载即可<br>安装过程中在选择组件的时候,除了默认必须安装的,其他取消即可<br>安装完成后,打开CMD</p>\n<blockquote>\n<p>查看是否安装成功<br>gpg –version</p>\n</blockquote>\n<hr>\n<blockquote>\n<p>生成密钥对<br>gpg –gen-key<br>Real name: 名字(E文)<br>Email address: 邮箱<br>You selected this USER-ID:<br>   “xxx<a href=\"mailto:&#120;&#120;&#x78;&#x40;&#x71;&#113;&#46;&#x63;&#111;&#x6d;\" target=\"_blank\" rel=\"noopener\">&#120;&#120;&#x78;&#x40;&#x71;&#113;&#46;&#x63;&#111;&#x6d;</a>“<br>Change (N)ame, (E)mail, or (O)kay/(Q)uit? o<br>之后往下，会让你输入用户名和邮箱，还有一个Passphase（输入两次），相当于密钥库密码，不要忘记。</p>\n</blockquote>\n<hr>\n<blockquote>\n<p>查看公钥<br>gpg –list-keys<br>pub   rsa2048 2017-12-16 [SC] [expires: 2019-12-16]<br>     9DF36BF5DFB87B6F04DBCE3D63EC6544BEE6682D<br>uid           [ultimate] xxx<a href=\"mailto:&#120;&#120;&#x78;&#64;&#x71;&#x71;&#46;&#99;&#x6f;&#109;\" target=\"_blank\" rel=\"noopener\">&#120;&#120;&#x78;&#64;&#x71;&#x71;&#46;&#99;&#x6f;&#109;</a><br>sub   rsa2048 2017-12-16 [E] [expires: 2019-12-16]</p>\n</blockquote>\n<blockquote>\n<p>其中 9DF36BF5DFB87B6F04DBCE3D63EC6544BEE6682D 就是公钥</p>\n</blockquote>\n<hr>\n<blockquote>\n<p>将公钥发布到 PGP 密钥服务器</p>\n</blockquote>\n<h2 id=\"gpg-–keyserver-hkp-pool-sks-keyservers-net-–send-keys-你的公钥\"><a href=\"#gpg-–keyserver-hkp-pool-sks-keyservers-net-–send-keys-你的公钥\" class=\"headerlink\" title=\"gpg –keyserver hkp://pool.sks-keyservers.net –send-keys 你的公钥\"></a>gpg –keyserver hkp://pool.sks-keyservers.net –send-keys 你的公钥</h2><blockquote>\n<p>查询公钥是否发布成功<br>gpg –keyserver hkp://pool.sks-keyservers.net –recv-keys  你的公钥</p>\n</blockquote>\n<h4 id=\"修改Maven配制\"><a href=\"#修改Maven配制\" class=\"headerlink\" title=\"修改Maven配制\"></a>修改Maven配制</h4><p>如果你的Issue通过了,那么可以开始提交项目了.</p>\n<blockquote>\n<p>修改maven全局配制文件 settings.xml,在maven安装目录的conf文件夹下</p>\n</blockquote>\n<hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;servers&gt;</span><br><span class=\"line\">    &lt;server&gt;</span><br><span class=\"line\">        &lt;id&gt;oss&lt;/id&gt;</span><br><span class=\"line\">        &lt;username&gt;用户名&lt;/username&gt;</span><br><span class=\"line\">        &lt;password&gt;密码&lt;/password&gt;</span><br><span class=\"line\">    &lt;/server&gt;</span><br><span class=\"line\">&lt;/servers&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"这里的-id-是要在-pom-xml-里面使用的，用户名和密码就是Jira的帐号密码\"><a href=\"#这里的-id-是要在-pom-xml-里面使用的，用户名和密码就是Jira的帐号密码\" class=\"headerlink\" title=\"这里的 id 是要在 pom.xml 里面使用的，用户名和密码就是Jira的帐号密码\"></a>这里的 id 是要在 pom.xml 里面使用的，用户名和密码就是Jira的帐号密码</h2><blockquote>\n<p>pom.xml<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;project&gt;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    &lt;name&gt;dexcoder-assistant&lt;/name&gt;</span><br><span class=\"line\">    &lt;description&gt;dexcoder-assistant is a rapid development kit.&lt;/description&gt;</span><br><span class=\"line\">    &lt;url&gt;http://www.dexcoder.com/&lt;/url&gt;</span><br><span class=\"line\">    &lt;licenses&gt;</span><br><span class=\"line\">        &lt;license&gt;</span><br><span class=\"line\">            &lt;name&gt;The Apache Software License, Version 2.0&lt;/naurl</span><br><span class=\"line\">            &lt;url&gt;http://www.apache.org/licenses/LICENSE-2.0.txt&lt;/url&gt;</span><br><span class=\"line\">        &lt;/license&gt;</span><br><span class=\"line\">    &lt;/licenses&gt;</span><br><span class=\"line\">    &lt;developers&gt;</span><br><span class=\"line\">        &lt;developer&gt;</span><br><span class=\"line\">            &lt;name&gt;selfly&lt;/name&gt;</span><br><span class=\"line\">            &lt;email&gt;selfly@foxmail.com&lt;/email&gt;</span><br><span class=\"line\">        &lt;/developer&gt;</span><br><span class=\"line\">    &lt;/developers&gt;</span><br><span class=\"line\">    &lt;scm&gt;</span><br><span class=\"line\">        &lt;connection&gt;scm:git:git@github.com:selfly/dexcoder-assistant.git&lt;/connection&gt;</span><br><span class=\"line\">        &lt;developerConnection&gt;scm:git:git@github.com:selfly/dexcoder-assistant.git&lt;/developerConnection&gt;</span><br><span class=\"line\">        &lt;url&gt;git@github.com:selfly/dexcoder-assistant.git&lt;/url&gt;</span><br><span class=\"line\">    &lt;/scm&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &lt;profiles&gt;</span><br><span class=\"line\">        &lt;profile&gt;</span><br><span class=\"line\">            &lt;id&gt;release&lt;/id&gt;</span><br><span class=\"line\">            &lt;build&gt;</span><br><span class=\"line\">                &lt;plugins&gt;</span><br><span class=\"line\">                    &lt;!-- Source --&gt;</span><br><span class=\"line\">                    &lt;plugin&gt;</span><br><span class=\"line\">                        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class=\"line\">                        &lt;artifactId&gt;maven-source-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">                        &lt;version&gt;2.2.1&lt;/version&gt;</span><br><span class=\"line\">                        &lt;executions&gt;</span><br><span class=\"line\">                            &lt;execution&gt;</span><br><span class=\"line\">                                &lt;phase&gt;package&lt;/phase&gt;</span><br><span class=\"line\">                                &lt;goals&gt;</span><br><span class=\"line\">                                    &lt;goal&gt;jar-no-fork&lt;/goal&gt;</span><br><span class=\"line\">                                &lt;/goals&gt;</span><br><span class=\"line\">                            &lt;/execution&gt;</span><br><span class=\"line\">                        &lt;/executions&gt;</span><br><span class=\"line\">                    &lt;/plugin&gt;</span><br><span class=\"line\">                    &lt;!-- Javadoc --&gt;</span><br><span class=\"line\">                    &lt;plugin&gt;</span><br><span class=\"line\">                        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class=\"line\">                        &lt;artifactId&gt;maven-javadoc-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">                        &lt;version&gt;2.9.1&lt;/version&gt;</span><br><span class=\"line\">                        &lt;configuration&gt;</span><br><span class=\"line\">                        \t&lt;show&gt;private&lt;/show&gt;</span><br><span class=\"line\">                        \t&lt;nohelp&gt;true&lt;/nohelp&gt;</span><br><span class=\"line\">                                    &lt;charset&gt;UTF-8&lt;/charset&gt;</span><br><span class=\"line\">\t\t\t\t&lt;encoding&gt;UTF-8&lt;/encoding&gt;</span><br><span class=\"line\">\t\t\t\t&lt;docencoding&gt;UTF-8&lt;/docencoding&gt;</span><br><span class=\"line\">\t\t\t\t&lt;additionalparam&gt;-Xdoclint:none&lt;/additionalparam&gt;  &lt;!-- TODO 临时解决不规范的javadoc生成报错,后面要规范化后把这行去掉 --&gt;</span><br><span class=\"line\">\t\t\t&lt;/configuration&gt;</span><br><span class=\"line\">                        &lt;executions&gt;</span><br><span class=\"line\">                            &lt;execution&gt;</span><br><span class=\"line\">                                &lt;phase&gt;package&lt;/phase&gt;</span><br><span class=\"line\">                                &lt;goals&gt;</span><br><span class=\"line\">                                    &lt;goal&gt;jar&lt;/goal&gt;</span><br><span class=\"line\">                                &lt;/goals&gt;</span><br><span class=\"line\">                            &lt;/execution&gt;</span><br><span class=\"line\">                        &lt;/executions&gt;</span><br><span class=\"line\">                    &lt;/plugin&gt;</span><br><span class=\"line\">                    &lt;!-- GPG --&gt;</span><br><span class=\"line\">                    &lt;plugin&gt;</span><br><span class=\"line\">                        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class=\"line\">                        &lt;artifactId&gt;maven-gpg-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">                        &lt;version&gt;1.5&lt;/version&gt;</span><br><span class=\"line\">                        &lt;executions&gt;</span><br><span class=\"line\">                            &lt;execution&gt;</span><br><span class=\"line\">                                &lt;phase&gt;verify&lt;/phase&gt;</span><br><span class=\"line\">                                &lt;goals&gt;</span><br><span class=\"line\">                                    &lt;goal&gt;sign&lt;/goal&gt;</span><br><span class=\"line\">                                &lt;/goals&gt;</span><br><span class=\"line\">                            &lt;/execution&gt;</span><br><span class=\"line\">                        &lt;/executions&gt;</span><br><span class=\"line\">                    &lt;/plugin&gt;</span><br><span class=\"line\">                &lt;/plugins&gt;</span><br><span class=\"line\">            &lt;/build&gt;</span><br><span class=\"line\">            &lt;distributionManagement&gt;</span><br><span class=\"line\">                &lt;snapshotRepository&gt;</span><br><span class=\"line\">                    &lt;id&gt;oss&lt;/id&gt;</span><br><span class=\"line\">                    &lt;url&gt;https://oss.sonatype.org/content/repositories/snapshots/&lt;/url&gt;</span><br><span class=\"line\">                &lt;/snapshotRepository&gt;</span><br><span class=\"line\">                &lt;repository&gt;</span><br><span class=\"line\">                    &lt;id&gt;oss&lt;/id&gt;</span><br><span class=\"line\">                    &lt;url&gt;https://oss.sonatype.org/service/local/staging/deploy/maven2/&lt;/url&gt;</span><br><span class=\"line\">                &lt;/repository&gt;</span><br><span class=\"line\">            &lt;/distributionManagement&gt;</span><br><span class=\"line\">        &lt;/profile&gt;</span><br><span class=\"line\">    &lt;/profiles&gt;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&lt;/project&gt;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<blockquote>\n<p>pom.xml 中必须包括：name、description、url、licenses、developers、scm 等基本信息，使用了 Maven 的 profile 功能，只有在 release 的时候，创建源码包、文档包、使用 GPG 进行数字签名。<br>此外，snapshotRepository 与 repository 中的 id 一定要与 setting.xml 中 server 的 id 保持一致。<br>如果是多模块项目的话，只需要在父 pom.xml 中声明这些，子 pom.xml 中只需要修改相应的一些信息，如 name 标签。<br>由于我使用的是jdk8,对doc的格式要求更严,不标准的doc注释会报错,这时候可以通过在doc插件中配制additionalparam参数,上面代码里已经配过了.但这只是临时解决方案,还是尽量使用标准的doc注释吧.</p>\n</blockquote>\n<h4 id=\"提交项目到OSS\"><a href=\"#提交项目到OSS\" class=\"headerlink\" title=\"提交项目到OSS\"></a>提交项目到OSS</h4><p>maven配制修改完成后,就可以提交项目了,使用命令:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn clean deploy -P release</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>当执行以上 Maven 命令时，会自动弹出一个对话框，需要输入上面提到的 Passphase，它就是刚才设置的 GPG 密钥库的密码。<br>注意：此时上传的构件并未正式发布到中央仓库中，只是部署到 OSS 中了，下面才是真正的发布。</p>\n</blockquote>\n<hr>\n<blockquote>\n<p>执行上面的命令的过程中,可能会找不到gpg.exe, 检查环境变量,发现环境变量中已经配制了gpg.exe所在的路径,但是还是报错… 如何解决? setting.xml中加入:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;profile&gt;</span><br><span class=\"line\">      &lt;id&gt;release&lt;/id&gt;</span><br><span class=\"line\">      &lt;properties&gt;</span><br><span class=\"line\">        &lt;gpg.executable&gt;D:/Program Files (x86)/GnuPG/bin/gpg.exe&lt;/gpg.executable&gt;</span><br><span class=\"line\">        &lt;gpg.passphrase&gt;上面提到的 Passphase&lt;/gpg.passphrase&gt;</span><br><span class=\"line\">      &lt;/properties&gt;</span><br><span class=\"line\">    &lt;/profile&gt;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<blockquote>\n<p>注意 ID要与pom.xml里的发布的 profile 的ID对应<br>其中&lt;gpg.executable&gt;为你的gpg.exe的完整路径</p>\n</blockquote>\n<p>&lt;gpg.passphrase&gt; 为上面提到的 Passphase,这样就不用在每次发布的时候都输入密码了,但是我发现即便有这个,有时候(只是有时,不是每次)还是要让输入密码,暂时不清楚是什么问题.</p>\n<h2 id=\"上面这2个配制也可以配制到pom-xml的gpg插件的中-去掉-lt-gpg-gt-就行-当然密码最好还是不要放在pom-xml里-因为如果你的代码开源的话-密码也一起开源了…\"><a href=\"#上面这2个配制也可以配制到pom-xml的gpg插件的中-去掉-lt-gpg-gt-就行-当然密码最好还是不要放在pom-xml里-因为如果你的代码开源的话-密码也一起开源了…\" class=\"headerlink\" title=\"上面这2个配制也可以配制到pom.xml的gpg插件的中,去掉&lt;gpg.&gt;就行,当然密码最好还是不要放在pom.xml里,因为如果你的代码开源的话,密码也一起开源了…\"></a>上面这2个配制也可以配制到pom.xml的gpg插件的<configuration>中,去掉&lt;gpg.&gt;就行,当然密码最好还是不要放在pom.xml里,因为如果你的代码开源的话,密码也一起开源了…</configuration></h2><blockquote>\n<p>如何发布快照版本?<br>在pom.xml中的项目版本号后面加上  -SNAPSHOT 就行<br>快照版到这里就发布好了，不需要执行下面的关闭、发布构建步骤，构建列表里也找不到快照版的构建，快照版发布后就可以直接引用了</p>\n</blockquote>\n<h4 id=\"在-OSS中发布\"><a href=\"#在-OSS中发布\" class=\"headerlink\" title=\"在 OSS中发布\"></a>在 OSS中发布</h4><blockquote>\n<p>使用 Jira 账号登录 <a href=\"https://oss.sonatype.org\" target=\"_blank\" rel=\"noopener\">https://oss.sonatype.org</a>，在 Staging Repositories 中查看刚才已上传的构件。<br>一般发布的构件不多,可以直接滚动条拉到最后就能看到自己的构件,或者更改时间排序,也可进行模糊查询定位到自己的构件<br>找到自己的构建后选中,并点击上方的 【Close】按钮关闭构建,这个过程有点慢,稍等几分钟<br>刷新页面,发现关闭成功后,再次选中自己的构建,点击上方的【Release】发布构建.</p>\n</blockquote>\n<h4 id=\"通知Sonatype-已经成功发布\"><a href=\"#通知Sonatype-已经成功发布\" class=\"headerlink\" title=\"通知Sonatype 已经成功发布\"></a>通知Sonatype 已经成功发布</h4><blockquote>\n<p>在Issue中通过审核的官方回复中,通常会让你在发布成功后再次回复告知他们,在刚才那个Issue中回复已经成功发布,官方会回复你大概需要等多久才能在中央仓库中找到你的项目(10分钟左右)以及要多久才能在搜索中搜到(2个小时左右)</p>\n</blockquote>\n<h4 id=\"以后的提交过程\"><a href=\"#以后的提交过程\" class=\"headerlink\" title=\"以后的提交过程\"></a>以后的提交过程</h4><blockquote>\n<p>第一次提交才这么麻烦,以后提交只用重复maven发布,OSS中Close,Release的过程就可以了,当然需要等待的时间还是10分钟和2小时.<br>如果要发布新的项目,在使用相同GroupId的情况下,与上面的过程一样.只有使用不同的GroupId的时候,才会需要再去提交Issue申请.<br>当然如果你没有换电脑的话 GPG 的过程只需要一次就行</p>\n</blockquote>\n<h4 id=\"结束\"><a href=\"#结束\" class=\"headerlink\" title=\"结束\"></a>结束</h4><p>到此发布过程就结束了.本文参考了以下文章,特别感谢这些文章的作者:<br><a href=\"https://www.cnblogs.com/binarylei/p/8628245.html\" target=\"_blank\" rel=\"noopener\">Maven 发布自己的项目到 Maven 中央仓库</a><br><a href=\"https://www.cnblogs.com/songjialin2016/p/8624019.html\" target=\"_blank\" rel=\"noopener\">[干货]–发布项目到maven中央仓库</a><br><a href=\"https://blog.csdn.net/lanmo555/article/details/52456751\" target=\"_blank\" rel=\"noopener\">将项目发布到Maven中央库</a></p>\n</the>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjgabk9tu0002v4g8rzosb406","tag_id":"cjgabk9u10003v4g8w7imyiw5","_id":"cjgabk9u40004v4g8xrfzm3a1"},{"post_id":"cjgabk9ui0005v4g8qzn0244f","tag_id":"cjgabk9ul0006v4g80km6iz6s","_id":"cjgabk9um0007v4g8dzm334j5"}],"Tag":[{"name":"SpringMVC 自定义注解验证器","_id":"cjgabk9u10003v4g8w7imyiw5"},{"name":"maven中央仓库","_id":"cjgabk9ul0006v4g80km6iz6s"}]}}