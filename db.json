{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/faces/face.jpg","path":"faces/face.jpg","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1514806389000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1514806389000},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1514806389000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1514806389000},{"_id":"themes/next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1514806389000},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1514806389000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1514806389000},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1514806389000},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1514806389000},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1514806389000},{"_id":"themes/next/README.cn.md","hash":"58ffe752bc4b7f0069fcd6304bbc2d5ff7b80f89","modified":1514806389000},{"_id":"themes/next/_config.yml","hash":"368d8edbf8cb092eb45ef14cf98b1f3886d38b6d","modified":1525414575002},{"_id":"themes/next/README.md","hash":"898213e66d34a46c3cf8446bf693bd50db0d3269","modified":1514806389000},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1514806389000},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1514806389000},{"_id":"themes/next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1514806389000},{"_id":"source/404.html","hash":"9eb955271b03c72a4bb23a06b60e4ecb4070a880","modified":1525412071166},{"_id":"source/CNAME","hash":"73ec81ff59cc8a729648643fa004f73d9d289e30","modified":1524446820475},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1514806389000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"352093a1b210c72136687fd2eee649244cee402c","modified":1514806389000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1514806389000},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1514806389000},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1514806389000},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1514806389000},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1514806389000},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1514806389000},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1514806389000},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1514806389000},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1514806389000},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1514806389000},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1514806389000},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1514806389000},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1514806389000},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1514806389000},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1514806389000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1514806389000},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1514806389000},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1514806389000},{"_id":"themes/next/layout/_layout.swig","hash":"da0929166674ea637e0ad454f85ad0d7bac4aff2","modified":1514806389000},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1514806389000},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1514806389000},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1514806389000},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1514806389000},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1514806389000},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1514806389000},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1514806389000},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1514806389000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1514806389000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1514806389000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1514806389000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1514806389000},{"_id":"source/_posts/SpringMVC自定义注解验证器.md","hash":"3461f785ca037641d405b3d6fbe6151ae2a2e1b7","modified":1524446820476},{"_id":"source/_posts/将你自己的项目发布到maven中央仓库.md","hash":"e77901b546c5ba18a0374e9df065c89e6083ad4c","modified":1524446820477},{"_id":"source/about/index.md","hash":"172b8f58cf346f3df5c92f0a2bbba433bf2776d5","modified":1524446820478},{"_id":"source/faces/face.jpg","hash":"b6c103cefaace24b16de0e1f78c41992b33f3092","modified":1524446820654},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514806389000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1514806389000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1514806389000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"c4d6181f5d3db5365e622f78714af8cc58d7a45e","modified":1514806389000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1514806389000},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1514806389000},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1514806389000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1514806389000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1514806389000},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1514806389000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1514806389000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1514806389000},{"_id":"themes/next/layout/_macro/post.swig","hash":"446a35a2cd389f8cfc3aa38973a9b44ad0740134","modified":1514806389000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6a54c3c85ff6b19d275827a327abbf4bd99b2ebf","modified":1514806389000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1514806389000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1514806389000},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1514806389000},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1514806389000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1514806389000},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1514806389000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1514806389000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1514806389000},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1514806389000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1514806389000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1514806389000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1514806389000},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1514806389000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1514806389000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1514806389000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1514806389000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1514806389000},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1514806389000},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1514806389000},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1514806389000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1514806389000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1514806389000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1514806389000},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1514806389000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1514806389000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1514806389000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1514806389000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1514806389000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1514806389000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1514806389000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1514806389000},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1514806389000},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1514806389000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1514806389000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1514806389000},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1514806389000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1514806389000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1514806389000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1514806389000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1514806389000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514806389000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514806389000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514806389000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514806389000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514806389000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514806389000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514806389000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1514806389000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1514806389000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1514806389000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1514806389000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1514806389000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1514806389000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1514806389000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1514806389000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1514806389000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1514806389000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1514806389000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1514806389000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1514806389000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1514806389000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1514806389000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1514806389000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1514806389000},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1514806389000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1514806389000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1514806389000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1514806389000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1514806389000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1514806389000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1514806389000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1514806389000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1514806389000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1514806389000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1514806389000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1514806389000},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1514806389000},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1514806389000},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1514806389000},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1514806389000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1514806389000},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1514806389000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1514806389000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1514806389000},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1514806389000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1514806389000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1514806389000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1514806389000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1514806389000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1514806389000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1514806389000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1514806389000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1514806389000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1514806389000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1514806389000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1514806389000},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1514806389000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1514806389000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1514806389000},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1514806389000},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1514806389000},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1514806389000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1514806389000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1514806389000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1514806389000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1514806389000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1514806389000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1514806389000},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1514806389000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1514806389000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1514806389000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1514806389000},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1514806389000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1514806389000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1514806389000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1514806389000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"02fb8fa6b6c252b6bed469539cd057716606a787","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1514806389000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1514806389000},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1514806389000},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1514806389000},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1514806389000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1514806389000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1514806389000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1514806389000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1514806389000},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1514806389000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1514806389000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1514806389000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1514806389000},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1514806389000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1514806389000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1514806389000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1514806389000},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1514806389000}],"Category":[],"Data":[],"Page":[{"_content":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\"\n          charset=\"utf-8\" homePageUrl=\"/\"\n          homePageName=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>","source":"404.html","raw":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\"\n          charset=\"utf-8\" homePageUrl=\"/\"\n          homePageName=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>","date":"2018-05-04T05:35:58.279Z","updated":"2018-05-04T05:34:31.166Z","path":"404.html","title":"","comments":1,"layout":"page","_id":"cjgrkl4bz0000mkun6ka0az5y","content":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n  <meta name=\"robots\" content=\"all\">\n  <meta name=\"robots\" content=\"index,follow\">\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"/\" homepagename=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n  <meta name=\"robots\" content=\"all\">\n  <meta name=\"robots\" content=\"index,follow\">\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"/\" homepagename=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>"},{"title":"about","date":"2018-04-21T14:59:41.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2018-04-21 22:59:41\n---\n","updated":"2018-04-23T01:27:00.478Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjgrkl4h80002mkun7gfnt04c","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"SpringMVC自定义注解验证器","date":"2018-04-21T15:35:41.000Z","_content":"<Excerpt in index | 首页摘要> \n# 背景\n大家可能会问,spring MVC支持验证注解,如常用的hibernate-validator,为什么要自己实现一套呢?\n最近做一个APP的服务端接口,项目中有自己的业务返回码.spring MVC支持的注解验证器无法设置验证不通过的时候的返回码,各种不方便,所以思前想后还是自己实现了一套.废话不多说,开始正文.\n+<!-- more -->\n<The rest of contents | 余下全文>\n# 状态码枚举\n状态码枚举中有两个属性: 状态码 和 对应的默认消息\n```\npublic enum ResponseCodeEnum {\n\n    _001(\"001\", \"用户未登录\");\n\n    /**\n     * @Fields code : 状态码\n     */\n    private String code;\n    \n    /**\n     * @Fields defaultMessage : 默认消息\n     */\n    private String defaultMessage;\n    \n    private ResponseCodeEnum (String code, String defaultMessage) {\n\tthis.code = code;\n\tthis.defaultMessage = defaultMessage;\n    }\n\n    @JsonValue  // com.fasterxml.jackson.annotation.JsonValue, 项目中用了 jackson 做为 \n                          // springMVC的JSON转换器,该注解表式这个方法的返回值生成到JSON中,其他忽略\n    public String getCode() {\n        return code;\n    }\n\n    public String getDefaultMessage() {\n        return defaultMessage;\n    }\n}\n```\n# 自定义业务异常\n业务数据(客户端提交的)验证不过等各种业务处理中的不通过,统一使用该异常,该异常被捕获后会生成统一格式的消息返回到客户端\n```\npublic class CustomValidatorException extends RuntimeException {\n\n    private static final long serialVersionUID = 5968495544349929856L;\n    \n    private ResponseCodeEnum statusCode;\n    \n    private String errorMsg;\n    \n    public CustomValidatorException (ResponseCodeEnum statusCode, String errorMsg) {\n\tthis.statusCode = statusCode;\n\tthis.errorMsg = errorMsg;\n    }\n\n    public ResponseCodeEnum getStatusCode() {\n        return statusCode;\n    }\n\n    public String getErrorMsg() {\n        return errorMsg;\n    }\n\n}\n```\n# 验证器接口\n该接口作为验证器注解必须实现的接口,负责真正的验证\n```\npublic interface IAnnotationsValidator {\n\n    public void doValidator(Object object, Annotation annotation) throws CustomValidatorException ;\n    \n}\n```\n# 验证器注解\n验证器相关注解定义,首先得有几个基础注解\n## 基础注解\n##### EnableValidator  负责开启验证,使用了该注解的参数Bean才会被验证\n```\n@Retention(RetentionPolicy.RUNTIME)\n@Target({ElementType.TYPE})\n@Documented\npublic @interface EnableValidator {\n\n}\n```\n##### CustomValidator 该注解作用于注解(该注解只能被其他注解使用,不能被非注解的类使用),使用了该注解的注解才被做为验证器注解\n```\n@Retention(RetentionPolicy.RUNTIME)\n@Target({ElementType.ANNOTATION_TYPE})\n@Documented\npublic @interface CustomValidator {\n\n}\n```\n## 验证器注解\n这里先只写2个注解吧,其他的可以由其他开发人员开发\n##### Required 必传参数注解,只有这个注解验证参数是否有值,其他注解有值才验证,没值直接通过\n```\n@Retention(RetentionPolicy.RUNTIME)\n@Target({ElementType.FIELD})\n@Documented\n@Inherited  // 子类可以继承父类的注解\n@CustomValidator\npublic @interface Required {\n\n    /**\n     * @Title: responseCode\n     * @Description: 验证失败(不通过)的code\n     * @return\n     */\n    ResponseCodeEnum responseCode();\n    \n    /**\n     * @Title: validatFailMessage\n     * @Description: 验证失败(不通过)的文字消息,可为空,默认使用ResponseCodeEnum对应的消息\n     * @return\n     */\n    String validatFailMessage() default \"\";\n    \n    /**\n     * @Fields validatorSpringBeanName : 此注解对应的验证器的springBean名称,该名称在定义注解的时候写死\n     */\n    final String validatorSpringBeanName = \"requiredValidator\";\n    \n}\n```\nRequired  注解中的几个属性是所有验证器注解都必须有的,大家可能注意到了validatorSpringBeanName , 没错,切面就是根据这个在spring容器中拿验证器实现的\n##### NotEmpty 用于验证字符串,List,集合,数组,Map等不能为空,这里的空不包括null,是null以外的空\n```\n@Retention(RetentionPolicy.RUNTIME)\n@Target({ElementType.FIELD})\n@Documented\n@Inherited  // 子类可以继承父类的注解\n@CustomValidator\npublic @interface NotEmpty {\n\n    /**\n     * @Title: responseCode\n     * @Description: 验证失败(不通过)的code\n     * @return\n     */\n    ResponseCodeEnum responseCode();\n    \n    /**\n     * @Title: validatFailMessage\n     * @Description: 验证失败(不通过)的文字消息,可为空,默认使用ResponseStatusCodeEnum对应的消息\n     * @return\n     */\n    String validatFailMessage() default \"\";\n    \n    /**\n     * @Fields validatorSpringBeanName : 此注解对应的验证器的springBean名称,该名称在定义注解的时候写死\n     */\n    final String validatorSpringBeanName = \"notEmptyValidator\";\n    \n}\n```\n除了上面两个验证器中的3个必须有的属性,还可以定义其他的属性,比如验证字符串长度的验证器,可以加一个长度的属性. 这些属性可以在验证器实现中获取\n## 验证器(注解)实现\n##### RequiredImpl: Required 的实现\n```\n@Component(\"requiredValidator\")\npublic class RequiredImpl implements IAnnotationsValidator {\n\n    @Override\n    public void doValidator(Object object, Annotation annotation) throws CustomValidatorException {\n        Required notEmpty = (Required) annotation;\n        ResponseStatusCodeEnum statusCode = notEmpty.responseStatusCode();\n        String message = notEmpty.validatFailMessage();\n        // TODO 获取验证器注解中的其他属性\n        // TODO 验证,如果验证不通过,抛出 CustomValidatorException \n    }\n\n}\n```\n##### NotEmptyImpl: NotEmpty 的实现,具体参考 Required 的实现\n# AOP\n自定义验证器的核心实现,没有它,上面的东西全是白费\n```\npublic class ValidatorAdvise {\n    \n    private static Logger logger = LoggerFactory.getLogger(ValidatorAdvise .class);\n\n    public Object validator(ProceedingJoinPoint pjp) {\n\t// 获取被拦截的方法的参数\n\tObject[] args = pjp.getArgs();\n\t// 遍历该方法的所有参数\n\tif (args != null && args.length > 0) {\n\t    for (Object arg : args) {\n\t\tClass<?> argClassz = arg.getClass();\n\t\tif (argClassz.getAnnotation(EnableValidator.class) != null) { // 只有当该参数有EnableValidator注解,也就是开启了验证才处理\n\t\t    List<Field> fieldList = getAllFields(null, argClassz); // 获取所有字段\n\t\t    // 遍历所有字段,并找出有注解的\n\t\t    for (Field field : fieldList) {\n\t\t\t// 检查每个字段的注解,有注解的才处理\n\t\t\tAnnotation[] fieldAnns = field.getAnnotations();\n\t\t\tif (fieldAnns != null && fieldAnns.length > 0) {\n\t\t\t    // 遍历该字段的注解,找到验证器的注解\n\t\t\t    for (Annotation fieldAnn : fieldAnns) {\n\t\t\t\ttry {\n\t\t\t\t    // 检查该注解是否有@CustomValidator,有就说明是验证器\n\t\t\t\t    if (fieldAnn.annotationType().getAnnotation(CustomValidator.class) != null) {\n\t\t\t\t\t// 通过反射拿验证器的springBeanName字段,不为null才处理\n\t\t\t\t\tField validatorSpringBeanNameFiled = fieldAnn.annotationType().getDeclaredField(\"validatorSpringBeanName\");\n\t\t\t\t\tif (validatorSpringBeanNameFiled != null) {\n\t\t\t\t\t    // 通过spring拿到验证器进行验证,先拿验证器的springBeanName\n\t\t\t\t\t    Object validatorSpringBeanName = validatorSpringBeanNameFiled.get(fieldAnn);\n\t\t\t\t\t    if(StringUtil.isNotNull(validatorSpringBeanName)) {\n\t\t\t\t\t\t// 名字有值,从spring容器中拿对应的验证器\n\t\t\t\t\t\tIAnnotationsValidator annotationsValidator = SystemApplicationContext.SPRING_CONTEXT.getBean((String)validatorSpringBeanName, IAnnotationsValidator.class);\n\t\t\t\t\t\tif(annotationsValidator != null) {\n\t\t\t\t\t\t    // 验证器不为空,调用验证器\n\t\t\t\t\t\t    field.setAccessible(true);\n\t\t\t\t\t\t    try {\n\t\t\t\t\t\t\tannotationsValidator.doValidator(field.get(arg), fieldAnn);\n\t\t\t\t\t\t    } catch (CustomValidatorException ex) {\n\t\t\t\t\t\t\tString errMsg = null;\n\t\t\t\t\t\t\tif(StringUtil.isNull(ex.getErrorMsg())) {\n\t\t\t\t\t\t\t    errMsg = ex.getStatusCode().getDefaultMessage();\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t    errMsg = ex.getErrorMsg();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t        return makeResponse(ex.getStatusCode(), errMsg);\n\t\t\t\t\t\t    } catch (Exception ex) {\n\t\t\t\t\t\t\tlogger.error(\"验证器【{}】里抛出了 CustomValidatorException 以外的异常,请验证器开发人员注意!!!\", ex, fieldAnn.annotationType());\n\t\t\t\t\t\t        return makeResponse(ResponseCodeEnum._500, \"服务器内部错误:====\" + ex.getMessage());\n\t\t\t\t\t\t    }\n\t\t\t\t\t\t}\n\t\t\t\t\t    }\n\t\t\t\t\t}\n\t\t\t\t    }\n\t\t\t\t} catch (NoSuchFieldException | SecurityException | IllegalArgumentException | IllegalAccessException e) {\n\t\t\t\t    logger.error(\"验证器处理切面出了点问题\", e);\n\t\t\t\t}\n\n\t\t\t    }\n\t\t\t}\n\t\t    }\n\t\t}\n\t    }\n\t}\n\tObject ret = null;\n\ttry {\n\t    ret = pjp.proceed();\n\t} catch (Throwable e) {\n\t    throw new RuntimeException(\"AOP Point Cut ValidatorAdvise Throw Exception :\", e);\n\t}\n\treturn ret;\n    }\n    \n    /**\n     * @Title: getAllFields\n     * @Description: 递归获取该类的所有属性包括父类的爷爷类的...祖宗类的\n     * @param fieldList\n     * @param classz\n     * @return\n     */\n    private List<Field> getAllFields(List<Field> fieldList, Class<?> classz) {\n\tif(classz == null) {\n\t    return fieldList;\n\t}\n\tif(fieldList == null) {\n\t    fieldList = Arrays.asList(classz.getDeclaredFields());  // 获得该类的所有字段,但不包括父类的\n\t} else {\n\t    Collections.addAll(fieldList, classz.getDeclaredFields());  // 获得该类的所有字段,但不包括父类的\n\t}\n\treturn getAllFields(fieldList, classz.getSuperclass());\n    }\n    \n    /**\n     * @Title: makeResponse\n     * @Description: 生成统一 Response\n     * @param statusCode\n     * @param statusMessage\n     * @return\n     */\n    private AppApiResponse<?> makeResponse(ResponseCodeEnum statusCode, String statusMessage) {\n\tAppApiResponse<Object> response = new AppApiResponse<>(new Object());\n\tAppApiResponseHeader respHeader = new AppApiResponseHeader();\n        response.setHeader(respHeader);\n        respHeader.setStatusCode(statusCode);\n        respHeader.setStatusMessage(statusMessage);\n        return response;\n    }\n    \n}\n```\n# 捕获异常,生成统一格式响应\n利用springMVC的@ControllerAdvice捕获所有来自 Controller 的异常\n```\n@ControllerAdvice(basePackages = \"org.test.appApi.actions\")\npublic class ErrorHandlingControllerAdvice {\n\n    private static Logger logger = LoggerFactory.getLogger(ErrorHandlingControllerAdvice.class);\n    \n    /**\n     * @Title: handleValidationError\n     * @Description: 处理表单验证,业务异常\n     * @param ex\n     * @return\n     */\n    @ExceptionHandler(CustomValidatorException.class)\n    @ResponseStatus(HttpStatus.OK)\n    @ResponseBody\n    public AppApiResponse<?> handleValidationError(CustomValidatorException ex) {\n\tString errMsg = null;\n\tif(StringUtil.isNull(ex.getErrorMsg())) {\n\t    errMsg = ex.getStatusCode().getDefaultMessage();\n\t} else {\n\t    errMsg = ex.getErrorMsg();\n\t}\n        return makeResponse(ex.getStatusCode(), errMsg);\n    }\n    \n    /**\n     * @Title: handleValidationError\n     * @Description: 处理其他异常\n     * @param ex\n     * @return\n     */\n    @ExceptionHandler(Exception.class)\n    @ResponseStatus(HttpStatus.OK)\n    @ResponseBody\n    public AppApiResponse<?> handleValidationError(Exception ex) {\n\tlogger.error(\"服务器内部错误:====\", ex);\n        return makeResponse(ResponseCodeEnum._500, \"服务器内部错误:====\" + ex.getMessage());\n    }\n    \n    private AppApiResponse<?> makeResponse(ResponseCodeEnum statusCode, String statusMessage) {\n\tAppApiResponse<Object> response = new AppApiResponse<>(new Object());\n\tAppApiResponseHeader respHeader = new AppApiResponseHeader();\n        response.setHeader(respHeader);\n        respHeader.setStatusCode(statusCode);\n        respHeader.setStatusMessage(statusMessage);\n        return response;\n    }\n    \n}\n```\n# 配制自定义验证器切面\nspringMVC的配制文件中增加\n```\n<bean id=\"validatorAdvise\" class=\"org.test.appApi.actions.validator.advises.ValidatorAdvise\" />\n\t<aop:config>\n\t\t<aop:aspect id=\"validatorAop\" ref=\"validatorAdvise\">\n\t\t\t<aop:pointcut id=\"validator\" expression=\"execution(* org.test.appApi.actions..*Action.*(..)) \n\t\t\tand !execution(* org.test.appApi.actions..*Action.initBinder(..)) \n\t\t\tand !execution(* org.test.appApi.actions..*Action.set*(..)) \n\t\t\tand !execution(* org.test.appApi.actions..*Action.get*(..))\" />\n\t\t\t<aop:around pointcut-ref=\"validator\" method=\"validator\" />\n\t\t</aop:aspect>\n\t</aop:config>\n```\n# 使用注解\n使用注解很简单,springMVC的控制器中的方法可以定义任意类型的参数,把各种参数放到一个java bean中,并在该bean使用类注解 @EnableValidator开启验证,并在需要验证的类属性上使用对应的验证器注解就行,验证器注解可以多个混合使用\n# 写在结束\n到这里,自定义验证器的开发就完成了.也许大家有更好的办法,欢迎讨论.也许spring MVC可以有办法实现我想做的但我不知道,也欢迎大家指出.","source":"_posts/SpringMVC自定义注解验证器.md","raw":"---\ntitle: SpringMVC自定义注解验证器\ndate: 2018-04-21 23:35:41\ntags: SpringMVC 自定义注解验证器\n---\n<Excerpt in index | 首页摘要> \n# 背景\n大家可能会问,spring MVC支持验证注解,如常用的hibernate-validator,为什么要自己实现一套呢?\n最近做一个APP的服务端接口,项目中有自己的业务返回码.spring MVC支持的注解验证器无法设置验证不通过的时候的返回码,各种不方便,所以思前想后还是自己实现了一套.废话不多说,开始正文.\n+<!-- more -->\n<The rest of contents | 余下全文>\n# 状态码枚举\n状态码枚举中有两个属性: 状态码 和 对应的默认消息\n```\npublic enum ResponseCodeEnum {\n\n    _001(\"001\", \"用户未登录\");\n\n    /**\n     * @Fields code : 状态码\n     */\n    private String code;\n    \n    /**\n     * @Fields defaultMessage : 默认消息\n     */\n    private String defaultMessage;\n    \n    private ResponseCodeEnum (String code, String defaultMessage) {\n\tthis.code = code;\n\tthis.defaultMessage = defaultMessage;\n    }\n\n    @JsonValue  // com.fasterxml.jackson.annotation.JsonValue, 项目中用了 jackson 做为 \n                          // springMVC的JSON转换器,该注解表式这个方法的返回值生成到JSON中,其他忽略\n    public String getCode() {\n        return code;\n    }\n\n    public String getDefaultMessage() {\n        return defaultMessage;\n    }\n}\n```\n# 自定义业务异常\n业务数据(客户端提交的)验证不过等各种业务处理中的不通过,统一使用该异常,该异常被捕获后会生成统一格式的消息返回到客户端\n```\npublic class CustomValidatorException extends RuntimeException {\n\n    private static final long serialVersionUID = 5968495544349929856L;\n    \n    private ResponseCodeEnum statusCode;\n    \n    private String errorMsg;\n    \n    public CustomValidatorException (ResponseCodeEnum statusCode, String errorMsg) {\n\tthis.statusCode = statusCode;\n\tthis.errorMsg = errorMsg;\n    }\n\n    public ResponseCodeEnum getStatusCode() {\n        return statusCode;\n    }\n\n    public String getErrorMsg() {\n        return errorMsg;\n    }\n\n}\n```\n# 验证器接口\n该接口作为验证器注解必须实现的接口,负责真正的验证\n```\npublic interface IAnnotationsValidator {\n\n    public void doValidator(Object object, Annotation annotation) throws CustomValidatorException ;\n    \n}\n```\n# 验证器注解\n验证器相关注解定义,首先得有几个基础注解\n## 基础注解\n##### EnableValidator  负责开启验证,使用了该注解的参数Bean才会被验证\n```\n@Retention(RetentionPolicy.RUNTIME)\n@Target({ElementType.TYPE})\n@Documented\npublic @interface EnableValidator {\n\n}\n```\n##### CustomValidator 该注解作用于注解(该注解只能被其他注解使用,不能被非注解的类使用),使用了该注解的注解才被做为验证器注解\n```\n@Retention(RetentionPolicy.RUNTIME)\n@Target({ElementType.ANNOTATION_TYPE})\n@Documented\npublic @interface CustomValidator {\n\n}\n```\n## 验证器注解\n这里先只写2个注解吧,其他的可以由其他开发人员开发\n##### Required 必传参数注解,只有这个注解验证参数是否有值,其他注解有值才验证,没值直接通过\n```\n@Retention(RetentionPolicy.RUNTIME)\n@Target({ElementType.FIELD})\n@Documented\n@Inherited  // 子类可以继承父类的注解\n@CustomValidator\npublic @interface Required {\n\n    /**\n     * @Title: responseCode\n     * @Description: 验证失败(不通过)的code\n     * @return\n     */\n    ResponseCodeEnum responseCode();\n    \n    /**\n     * @Title: validatFailMessage\n     * @Description: 验证失败(不通过)的文字消息,可为空,默认使用ResponseCodeEnum对应的消息\n     * @return\n     */\n    String validatFailMessage() default \"\";\n    \n    /**\n     * @Fields validatorSpringBeanName : 此注解对应的验证器的springBean名称,该名称在定义注解的时候写死\n     */\n    final String validatorSpringBeanName = \"requiredValidator\";\n    \n}\n```\nRequired  注解中的几个属性是所有验证器注解都必须有的,大家可能注意到了validatorSpringBeanName , 没错,切面就是根据这个在spring容器中拿验证器实现的\n##### NotEmpty 用于验证字符串,List,集合,数组,Map等不能为空,这里的空不包括null,是null以外的空\n```\n@Retention(RetentionPolicy.RUNTIME)\n@Target({ElementType.FIELD})\n@Documented\n@Inherited  // 子类可以继承父类的注解\n@CustomValidator\npublic @interface NotEmpty {\n\n    /**\n     * @Title: responseCode\n     * @Description: 验证失败(不通过)的code\n     * @return\n     */\n    ResponseCodeEnum responseCode();\n    \n    /**\n     * @Title: validatFailMessage\n     * @Description: 验证失败(不通过)的文字消息,可为空,默认使用ResponseStatusCodeEnum对应的消息\n     * @return\n     */\n    String validatFailMessage() default \"\";\n    \n    /**\n     * @Fields validatorSpringBeanName : 此注解对应的验证器的springBean名称,该名称在定义注解的时候写死\n     */\n    final String validatorSpringBeanName = \"notEmptyValidator\";\n    \n}\n```\n除了上面两个验证器中的3个必须有的属性,还可以定义其他的属性,比如验证字符串长度的验证器,可以加一个长度的属性. 这些属性可以在验证器实现中获取\n## 验证器(注解)实现\n##### RequiredImpl: Required 的实现\n```\n@Component(\"requiredValidator\")\npublic class RequiredImpl implements IAnnotationsValidator {\n\n    @Override\n    public void doValidator(Object object, Annotation annotation) throws CustomValidatorException {\n        Required notEmpty = (Required) annotation;\n        ResponseStatusCodeEnum statusCode = notEmpty.responseStatusCode();\n        String message = notEmpty.validatFailMessage();\n        // TODO 获取验证器注解中的其他属性\n        // TODO 验证,如果验证不通过,抛出 CustomValidatorException \n    }\n\n}\n```\n##### NotEmptyImpl: NotEmpty 的实现,具体参考 Required 的实现\n# AOP\n自定义验证器的核心实现,没有它,上面的东西全是白费\n```\npublic class ValidatorAdvise {\n    \n    private static Logger logger = LoggerFactory.getLogger(ValidatorAdvise .class);\n\n    public Object validator(ProceedingJoinPoint pjp) {\n\t// 获取被拦截的方法的参数\n\tObject[] args = pjp.getArgs();\n\t// 遍历该方法的所有参数\n\tif (args != null && args.length > 0) {\n\t    for (Object arg : args) {\n\t\tClass<?> argClassz = arg.getClass();\n\t\tif (argClassz.getAnnotation(EnableValidator.class) != null) { // 只有当该参数有EnableValidator注解,也就是开启了验证才处理\n\t\t    List<Field> fieldList = getAllFields(null, argClassz); // 获取所有字段\n\t\t    // 遍历所有字段,并找出有注解的\n\t\t    for (Field field : fieldList) {\n\t\t\t// 检查每个字段的注解,有注解的才处理\n\t\t\tAnnotation[] fieldAnns = field.getAnnotations();\n\t\t\tif (fieldAnns != null && fieldAnns.length > 0) {\n\t\t\t    // 遍历该字段的注解,找到验证器的注解\n\t\t\t    for (Annotation fieldAnn : fieldAnns) {\n\t\t\t\ttry {\n\t\t\t\t    // 检查该注解是否有@CustomValidator,有就说明是验证器\n\t\t\t\t    if (fieldAnn.annotationType().getAnnotation(CustomValidator.class) != null) {\n\t\t\t\t\t// 通过反射拿验证器的springBeanName字段,不为null才处理\n\t\t\t\t\tField validatorSpringBeanNameFiled = fieldAnn.annotationType().getDeclaredField(\"validatorSpringBeanName\");\n\t\t\t\t\tif (validatorSpringBeanNameFiled != null) {\n\t\t\t\t\t    // 通过spring拿到验证器进行验证,先拿验证器的springBeanName\n\t\t\t\t\t    Object validatorSpringBeanName = validatorSpringBeanNameFiled.get(fieldAnn);\n\t\t\t\t\t    if(StringUtil.isNotNull(validatorSpringBeanName)) {\n\t\t\t\t\t\t// 名字有值,从spring容器中拿对应的验证器\n\t\t\t\t\t\tIAnnotationsValidator annotationsValidator = SystemApplicationContext.SPRING_CONTEXT.getBean((String)validatorSpringBeanName, IAnnotationsValidator.class);\n\t\t\t\t\t\tif(annotationsValidator != null) {\n\t\t\t\t\t\t    // 验证器不为空,调用验证器\n\t\t\t\t\t\t    field.setAccessible(true);\n\t\t\t\t\t\t    try {\n\t\t\t\t\t\t\tannotationsValidator.doValidator(field.get(arg), fieldAnn);\n\t\t\t\t\t\t    } catch (CustomValidatorException ex) {\n\t\t\t\t\t\t\tString errMsg = null;\n\t\t\t\t\t\t\tif(StringUtil.isNull(ex.getErrorMsg())) {\n\t\t\t\t\t\t\t    errMsg = ex.getStatusCode().getDefaultMessage();\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t    errMsg = ex.getErrorMsg();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t        return makeResponse(ex.getStatusCode(), errMsg);\n\t\t\t\t\t\t    } catch (Exception ex) {\n\t\t\t\t\t\t\tlogger.error(\"验证器【{}】里抛出了 CustomValidatorException 以外的异常,请验证器开发人员注意!!!\", ex, fieldAnn.annotationType());\n\t\t\t\t\t\t        return makeResponse(ResponseCodeEnum._500, \"服务器内部错误:====\" + ex.getMessage());\n\t\t\t\t\t\t    }\n\t\t\t\t\t\t}\n\t\t\t\t\t    }\n\t\t\t\t\t}\n\t\t\t\t    }\n\t\t\t\t} catch (NoSuchFieldException | SecurityException | IllegalArgumentException | IllegalAccessException e) {\n\t\t\t\t    logger.error(\"验证器处理切面出了点问题\", e);\n\t\t\t\t}\n\n\t\t\t    }\n\t\t\t}\n\t\t    }\n\t\t}\n\t    }\n\t}\n\tObject ret = null;\n\ttry {\n\t    ret = pjp.proceed();\n\t} catch (Throwable e) {\n\t    throw new RuntimeException(\"AOP Point Cut ValidatorAdvise Throw Exception :\", e);\n\t}\n\treturn ret;\n    }\n    \n    /**\n     * @Title: getAllFields\n     * @Description: 递归获取该类的所有属性包括父类的爷爷类的...祖宗类的\n     * @param fieldList\n     * @param classz\n     * @return\n     */\n    private List<Field> getAllFields(List<Field> fieldList, Class<?> classz) {\n\tif(classz == null) {\n\t    return fieldList;\n\t}\n\tif(fieldList == null) {\n\t    fieldList = Arrays.asList(classz.getDeclaredFields());  // 获得该类的所有字段,但不包括父类的\n\t} else {\n\t    Collections.addAll(fieldList, classz.getDeclaredFields());  // 获得该类的所有字段,但不包括父类的\n\t}\n\treturn getAllFields(fieldList, classz.getSuperclass());\n    }\n    \n    /**\n     * @Title: makeResponse\n     * @Description: 生成统一 Response\n     * @param statusCode\n     * @param statusMessage\n     * @return\n     */\n    private AppApiResponse<?> makeResponse(ResponseCodeEnum statusCode, String statusMessage) {\n\tAppApiResponse<Object> response = new AppApiResponse<>(new Object());\n\tAppApiResponseHeader respHeader = new AppApiResponseHeader();\n        response.setHeader(respHeader);\n        respHeader.setStatusCode(statusCode);\n        respHeader.setStatusMessage(statusMessage);\n        return response;\n    }\n    \n}\n```\n# 捕获异常,生成统一格式响应\n利用springMVC的@ControllerAdvice捕获所有来自 Controller 的异常\n```\n@ControllerAdvice(basePackages = \"org.test.appApi.actions\")\npublic class ErrorHandlingControllerAdvice {\n\n    private static Logger logger = LoggerFactory.getLogger(ErrorHandlingControllerAdvice.class);\n    \n    /**\n     * @Title: handleValidationError\n     * @Description: 处理表单验证,业务异常\n     * @param ex\n     * @return\n     */\n    @ExceptionHandler(CustomValidatorException.class)\n    @ResponseStatus(HttpStatus.OK)\n    @ResponseBody\n    public AppApiResponse<?> handleValidationError(CustomValidatorException ex) {\n\tString errMsg = null;\n\tif(StringUtil.isNull(ex.getErrorMsg())) {\n\t    errMsg = ex.getStatusCode().getDefaultMessage();\n\t} else {\n\t    errMsg = ex.getErrorMsg();\n\t}\n        return makeResponse(ex.getStatusCode(), errMsg);\n    }\n    \n    /**\n     * @Title: handleValidationError\n     * @Description: 处理其他异常\n     * @param ex\n     * @return\n     */\n    @ExceptionHandler(Exception.class)\n    @ResponseStatus(HttpStatus.OK)\n    @ResponseBody\n    public AppApiResponse<?> handleValidationError(Exception ex) {\n\tlogger.error(\"服务器内部错误:====\", ex);\n        return makeResponse(ResponseCodeEnum._500, \"服务器内部错误:====\" + ex.getMessage());\n    }\n    \n    private AppApiResponse<?> makeResponse(ResponseCodeEnum statusCode, String statusMessage) {\n\tAppApiResponse<Object> response = new AppApiResponse<>(new Object());\n\tAppApiResponseHeader respHeader = new AppApiResponseHeader();\n        response.setHeader(respHeader);\n        respHeader.setStatusCode(statusCode);\n        respHeader.setStatusMessage(statusMessage);\n        return response;\n    }\n    \n}\n```\n# 配制自定义验证器切面\nspringMVC的配制文件中增加\n```\n<bean id=\"validatorAdvise\" class=\"org.test.appApi.actions.validator.advises.ValidatorAdvise\" />\n\t<aop:config>\n\t\t<aop:aspect id=\"validatorAop\" ref=\"validatorAdvise\">\n\t\t\t<aop:pointcut id=\"validator\" expression=\"execution(* org.test.appApi.actions..*Action.*(..)) \n\t\t\tand !execution(* org.test.appApi.actions..*Action.initBinder(..)) \n\t\t\tand !execution(* org.test.appApi.actions..*Action.set*(..)) \n\t\t\tand !execution(* org.test.appApi.actions..*Action.get*(..))\" />\n\t\t\t<aop:around pointcut-ref=\"validator\" method=\"validator\" />\n\t\t</aop:aspect>\n\t</aop:config>\n```\n# 使用注解\n使用注解很简单,springMVC的控制器中的方法可以定义任意类型的参数,把各种参数放到一个java bean中,并在该bean使用类注解 @EnableValidator开启验证,并在需要验证的类属性上使用对应的验证器注解就行,验证器注解可以多个混合使用\n# 写在结束\n到这里,自定义验证器的开发就完成了.也许大家有更好的办法,欢迎讨论.也许spring MVC可以有办法实现我想做的但我不知道,也欢迎大家指出.","slug":"SpringMVC自定义注解验证器","published":1,"updated":"2018-04-23T01:27:00.476Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrkl4h00001mkunzyr39vec","content":"<p><excerpt in=\"\" index=\"\" |=\"\" 首页摘要=\"\"> </excerpt></p>\n<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>大家可能会问,spring MVC支持验证注解,如常用的hibernate-validator,为什么要自己实现一套呢?<br>最近做一个APP的服务端接口,项目中有自己的业务返回码.spring MVC支持的注解验证器无法设置验证不通过的时候的返回码,各种不方便,所以思前想后还是自己实现了一套.废话不多说,开始正文.<br>+<a id=\"more\"></a></p>\n<p><the rest=\"\" of=\"\" contents=\"\" |=\"\" 余下全文=\"\"></the></p>\n<h1 id=\"状态码枚举\"><a href=\"#状态码枚举\" class=\"headerlink\" title=\"状态码枚举\"></a>状态码枚举</h1><p>状态码枚举中有两个属性: 状态码 和 对应的默认消息<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public enum ResponseCodeEnum &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    _001(&quot;001&quot;, &quot;用户未登录&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * @Fields code : 状态码</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private String code;</span><br><span class=\"line\">    </span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * @Fields defaultMessage : 默认消息</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private String defaultMessage;</span><br><span class=\"line\">    </span><br><span class=\"line\">    private ResponseCodeEnum (String code, String defaultMessage) &#123;</span><br><span class=\"line\">\tthis.code = code;</span><br><span class=\"line\">\tthis.defaultMessage = defaultMessage;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @JsonValue  // com.fasterxml.jackson.annotation.JsonValue, 项目中用了 jackson 做为 </span><br><span class=\"line\">                          // springMVC的JSON转换器,该注解表式这个方法的返回值生成到JSON中,其他忽略</span><br><span class=\"line\">    public String getCode() &#123;</span><br><span class=\"line\">        return code;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public String getDefaultMessage() &#123;</span><br><span class=\"line\">        return defaultMessage;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"自定义业务异常\"><a href=\"#自定义业务异常\" class=\"headerlink\" title=\"自定义业务异常\"></a>自定义业务异常</h1><p>业务数据(客户端提交的)验证不过等各种业务处理中的不通过,统一使用该异常,该异常被捕获后会生成统一格式的消息返回到客户端<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class CustomValidatorException extends RuntimeException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static final long serialVersionUID = 5968495544349929856L;</span><br><span class=\"line\">    </span><br><span class=\"line\">    private ResponseCodeEnum statusCode;</span><br><span class=\"line\">    </span><br><span class=\"line\">    private String errorMsg;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public CustomValidatorException (ResponseCodeEnum statusCode, String errorMsg) &#123;</span><br><span class=\"line\">\tthis.statusCode = statusCode;</span><br><span class=\"line\">\tthis.errorMsg = errorMsg;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public ResponseCodeEnum getStatusCode() &#123;</span><br><span class=\"line\">        return statusCode;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public String getErrorMsg() &#123;</span><br><span class=\"line\">        return errorMsg;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"验证器接口\"><a href=\"#验证器接口\" class=\"headerlink\" title=\"验证器接口\"></a>验证器接口</h1><p>该接口作为验证器注解必须实现的接口,负责真正的验证<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface IAnnotationsValidator &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void doValidator(Object object, Annotation annotation) throws CustomValidatorException ;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"验证器注解\"><a href=\"#验证器注解\" class=\"headerlink\" title=\"验证器注解\"></a>验证器注解</h1><p>验证器相关注解定义,首先得有几个基础注解</p>\n<h2 id=\"基础注解\"><a href=\"#基础注解\" class=\"headerlink\" title=\"基础注解\"></a>基础注解</h2><h5 id=\"EnableValidator-负责开启验证-使用了该注解的参数Bean才会被验证\"><a href=\"#EnableValidator-负责开启验证-使用了该注解的参数Bean才会被验证\" class=\"headerlink\" title=\"EnableValidator  负责开启验证,使用了该注解的参数Bean才会被验证\"></a>EnableValidator  负责开启验证,使用了该注解的参数Bean才会被验证</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Retention(RetentionPolicy.RUNTIME)</span><br><span class=\"line\">@Target(&#123;ElementType.TYPE&#125;)</span><br><span class=\"line\">@Documented</span><br><span class=\"line\">public @interface EnableValidator &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"CustomValidator-该注解作用于注解-该注解只能被其他注解使用-不能被非注解的类使用-使用了该注解的注解才被做为验证器注解\"><a href=\"#CustomValidator-该注解作用于注解-该注解只能被其他注解使用-不能被非注解的类使用-使用了该注解的注解才被做为验证器注解\" class=\"headerlink\" title=\"CustomValidator 该注解作用于注解(该注解只能被其他注解使用,不能被非注解的类使用),使用了该注解的注解才被做为验证器注解\"></a>CustomValidator 该注解作用于注解(该注解只能被其他注解使用,不能被非注解的类使用),使用了该注解的注解才被做为验证器注解</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Retention(RetentionPolicy.RUNTIME)</span><br><span class=\"line\">@Target(&#123;ElementType.ANNOTATION_TYPE&#125;)</span><br><span class=\"line\">@Documented</span><br><span class=\"line\">public @interface CustomValidator &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"验证器注解-1\"><a href=\"#验证器注解-1\" class=\"headerlink\" title=\"验证器注解\"></a>验证器注解</h2><p>这里先只写2个注解吧,其他的可以由其他开发人员开发</p>\n<h5 id=\"Required-必传参数注解-只有这个注解验证参数是否有值-其他注解有值才验证-没值直接通过\"><a href=\"#Required-必传参数注解-只有这个注解验证参数是否有值-其他注解有值才验证-没值直接通过\" class=\"headerlink\" title=\"Required 必传参数注解,只有这个注解验证参数是否有值,其他注解有值才验证,没值直接通过\"></a>Required 必传参数注解,只有这个注解验证参数是否有值,其他注解有值才验证,没值直接通过</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Retention(RetentionPolicy.RUNTIME)</span><br><span class=\"line\">@Target(&#123;ElementType.FIELD&#125;)</span><br><span class=\"line\">@Documented</span><br><span class=\"line\">@Inherited  // 子类可以继承父类的注解</span><br><span class=\"line\">@CustomValidator</span><br><span class=\"line\">public @interface Required &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * @Title: responseCode</span><br><span class=\"line\">     * @Description: 验证失败(不通过)的code</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    ResponseCodeEnum responseCode();</span><br><span class=\"line\">    </span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * @Title: validatFailMessage</span><br><span class=\"line\">     * @Description: 验证失败(不通过)的文字消息,可为空,默认使用ResponseCodeEnum对应的消息</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    String validatFailMessage() default &quot;&quot;;</span><br><span class=\"line\">    </span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * @Fields validatorSpringBeanName : 此注解对应的验证器的springBean名称,该名称在定义注解的时候写死</span><br><span class=\"line\">     */</span><br><span class=\"line\">    final String validatorSpringBeanName = &quot;requiredValidator&quot;;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Required  注解中的几个属性是所有验证器注解都必须有的,大家可能注意到了validatorSpringBeanName , 没错,切面就是根据这个在spring容器中拿验证器实现的</p>\n<h5 id=\"NotEmpty-用于验证字符串-List-集合-数组-Map等不能为空-这里的空不包括null-是null以外的空\"><a href=\"#NotEmpty-用于验证字符串-List-集合-数组-Map等不能为空-这里的空不包括null-是null以外的空\" class=\"headerlink\" title=\"NotEmpty 用于验证字符串,List,集合,数组,Map等不能为空,这里的空不包括null,是null以外的空\"></a>NotEmpty 用于验证字符串,List,集合,数组,Map等不能为空,这里的空不包括null,是null以外的空</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Retention(RetentionPolicy.RUNTIME)</span><br><span class=\"line\">@Target(&#123;ElementType.FIELD&#125;)</span><br><span class=\"line\">@Documented</span><br><span class=\"line\">@Inherited  // 子类可以继承父类的注解</span><br><span class=\"line\">@CustomValidator</span><br><span class=\"line\">public @interface NotEmpty &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * @Title: responseCode</span><br><span class=\"line\">     * @Description: 验证失败(不通过)的code</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    ResponseCodeEnum responseCode();</span><br><span class=\"line\">    </span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * @Title: validatFailMessage</span><br><span class=\"line\">     * @Description: 验证失败(不通过)的文字消息,可为空,默认使用ResponseStatusCodeEnum对应的消息</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    String validatFailMessage() default &quot;&quot;;</span><br><span class=\"line\">    </span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * @Fields validatorSpringBeanName : 此注解对应的验证器的springBean名称,该名称在定义注解的时候写死</span><br><span class=\"line\">     */</span><br><span class=\"line\">    final String validatorSpringBeanName = &quot;notEmptyValidator&quot;;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>除了上面两个验证器中的3个必须有的属性,还可以定义其他的属性,比如验证字符串长度的验证器,可以加一个长度的属性. 这些属性可以在验证器实现中获取</p>\n<h2 id=\"验证器-注解-实现\"><a href=\"#验证器-注解-实现\" class=\"headerlink\" title=\"验证器(注解)实现\"></a>验证器(注解)实现</h2><h5 id=\"RequiredImpl-Required-的实现\"><a href=\"#RequiredImpl-Required-的实现\" class=\"headerlink\" title=\"RequiredImpl: Required 的实现\"></a>RequiredImpl: Required 的实现</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Component(&quot;requiredValidator&quot;)</span><br><span class=\"line\">public class RequiredImpl implements IAnnotationsValidator &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void doValidator(Object object, Annotation annotation) throws CustomValidatorException &#123;</span><br><span class=\"line\">        Required notEmpty = (Required) annotation;</span><br><span class=\"line\">        ResponseStatusCodeEnum statusCode = notEmpty.responseStatusCode();</span><br><span class=\"line\">        String message = notEmpty.validatFailMessage();</span><br><span class=\"line\">        // TODO 获取验证器注解中的其他属性</span><br><span class=\"line\">        // TODO 验证,如果验证不通过,抛出 CustomValidatorException </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"NotEmptyImpl-NotEmpty-的实现-具体参考-Required-的实现\"><a href=\"#NotEmptyImpl-NotEmpty-的实现-具体参考-Required-的实现\" class=\"headerlink\" title=\"NotEmptyImpl: NotEmpty 的实现,具体参考 Required 的实现\"></a>NotEmptyImpl: NotEmpty 的实现,具体参考 Required 的实现</h5><h1 id=\"AOP\"><a href=\"#AOP\" class=\"headerlink\" title=\"AOP\"></a>AOP</h1><p>自定义验证器的核心实现,没有它,上面的东西全是白费<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class ValidatorAdvise &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    private static Logger logger = LoggerFactory.getLogger(ValidatorAdvise .class);</span><br><span class=\"line\"></span><br><span class=\"line\">    public Object validator(ProceedingJoinPoint pjp) &#123;</span><br><span class=\"line\">\t// 获取被拦截的方法的参数</span><br><span class=\"line\">\tObject[] args = pjp.getArgs();</span><br><span class=\"line\">\t// 遍历该方法的所有参数</span><br><span class=\"line\">\tif (args != null &amp;&amp; args.length &gt; 0) &#123;</span><br><span class=\"line\">\t    for (Object arg : args) &#123;</span><br><span class=\"line\">\t\tClass&lt;?&gt; argClassz = arg.getClass();</span><br><span class=\"line\">\t\tif (argClassz.getAnnotation(EnableValidator.class) != null) &#123; // 只有当该参数有EnableValidator注解,也就是开启了验证才处理</span><br><span class=\"line\">\t\t    List&lt;Field&gt; fieldList = getAllFields(null, argClassz); // 获取所有字段</span><br><span class=\"line\">\t\t    // 遍历所有字段,并找出有注解的</span><br><span class=\"line\">\t\t    for (Field field : fieldList) &#123;</span><br><span class=\"line\">\t\t\t// 检查每个字段的注解,有注解的才处理</span><br><span class=\"line\">\t\t\tAnnotation[] fieldAnns = field.getAnnotations();</span><br><span class=\"line\">\t\t\tif (fieldAnns != null &amp;&amp; fieldAnns.length &gt; 0) &#123;</span><br><span class=\"line\">\t\t\t    // 遍历该字段的注解,找到验证器的注解</span><br><span class=\"line\">\t\t\t    for (Annotation fieldAnn : fieldAnns) &#123;</span><br><span class=\"line\">\t\t\t\ttry &#123;</span><br><span class=\"line\">\t\t\t\t    // 检查该注解是否有@CustomValidator,有就说明是验证器</span><br><span class=\"line\">\t\t\t\t    if (fieldAnn.annotationType().getAnnotation(CustomValidator.class) != null) &#123;</span><br><span class=\"line\">\t\t\t\t\t// 通过反射拿验证器的springBeanName字段,不为null才处理</span><br><span class=\"line\">\t\t\t\t\tField validatorSpringBeanNameFiled = fieldAnn.annotationType().getDeclaredField(&quot;validatorSpringBeanName&quot;);</span><br><span class=\"line\">\t\t\t\t\tif (validatorSpringBeanNameFiled != null) &#123;</span><br><span class=\"line\">\t\t\t\t\t    // 通过spring拿到验证器进行验证,先拿验证器的springBeanName</span><br><span class=\"line\">\t\t\t\t\t    Object validatorSpringBeanName = validatorSpringBeanNameFiled.get(fieldAnn);</span><br><span class=\"line\">\t\t\t\t\t    if(StringUtil.isNotNull(validatorSpringBeanName)) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t// 名字有值,从spring容器中拿对应的验证器</span><br><span class=\"line\">\t\t\t\t\t\tIAnnotationsValidator annotationsValidator = SystemApplicationContext.SPRING_CONTEXT.getBean((String)validatorSpringBeanName, IAnnotationsValidator.class);</span><br><span class=\"line\">\t\t\t\t\t\tif(annotationsValidator != null) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t    // 验证器不为空,调用验证器</span><br><span class=\"line\">\t\t\t\t\t\t    field.setAccessible(true);</span><br><span class=\"line\">\t\t\t\t\t\t    try &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\tannotationsValidator.doValidator(field.get(arg), fieldAnn);</span><br><span class=\"line\">\t\t\t\t\t\t    &#125; catch (CustomValidatorException ex) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\tString errMsg = null;</span><br><span class=\"line\">\t\t\t\t\t\t\tif(StringUtil.isNull(ex.getErrorMsg())) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t    errMsg = ex.getStatusCode().getDefaultMessage();</span><br><span class=\"line\">\t\t\t\t\t\t\t&#125; else &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t    errMsg = ex.getErrorMsg();</span><br><span class=\"line\">\t\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t\t        return makeResponse(ex.getStatusCode(), errMsg);</span><br><span class=\"line\">\t\t\t\t\t\t    &#125; catch (Exception ex) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\tlogger.error(&quot;验证器【&#123;&#125;】里抛出了 CustomValidatorException 以外的异常,请验证器开发人员注意!!!&quot;, ex, fieldAnn.annotationType());</span><br><span class=\"line\">\t\t\t\t\t\t        return makeResponse(ResponseCodeEnum._500, &quot;服务器内部错误:====&quot; + ex.getMessage());</span><br><span class=\"line\">\t\t\t\t\t\t    &#125;</span><br><span class=\"line\">\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t    &#125;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t    &#125;</span><br><span class=\"line\">\t\t\t\t&#125; catch (NoSuchFieldException | SecurityException | IllegalArgumentException | IllegalAccessException e) &#123;</span><br><span class=\"line\">\t\t\t\t    logger.error(&quot;验证器处理切面出了点问题&quot;, e);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t    &#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t    &#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tObject ret = null;</span><br><span class=\"line\">\ttry &#123;</span><br><span class=\"line\">\t    ret = pjp.proceed();</span><br><span class=\"line\">\t&#125; catch (Throwable e) &#123;</span><br><span class=\"line\">\t    throw new RuntimeException(&quot;AOP Point Cut ValidatorAdvise Throw Exception :&quot;, e);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * @Title: getAllFields</span><br><span class=\"line\">     * @Description: 递归获取该类的所有属性包括父类的爷爷类的...祖宗类的</span><br><span class=\"line\">     * @param fieldList</span><br><span class=\"line\">     * @param classz</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private List&lt;Field&gt; getAllFields(List&lt;Field&gt; fieldList, Class&lt;?&gt; classz) &#123;</span><br><span class=\"line\">\tif(classz == null) &#123;</span><br><span class=\"line\">\t    return fieldList;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tif(fieldList == null) &#123;</span><br><span class=\"line\">\t    fieldList = Arrays.asList(classz.getDeclaredFields());  // 获得该类的所有字段,但不包括父类的</span><br><span class=\"line\">\t&#125; else &#123;</span><br><span class=\"line\">\t    Collections.addAll(fieldList, classz.getDeclaredFields());  // 获得该类的所有字段,但不包括父类的</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn getAllFields(fieldList, classz.getSuperclass());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * @Title: makeResponse</span><br><span class=\"line\">     * @Description: 生成统一 Response</span><br><span class=\"line\">     * @param statusCode</span><br><span class=\"line\">     * @param statusMessage</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private AppApiResponse&lt;?&gt; makeResponse(ResponseCodeEnum statusCode, String statusMessage) &#123;</span><br><span class=\"line\">\tAppApiResponse&lt;Object&gt; response = new AppApiResponse&lt;&gt;(new Object());</span><br><span class=\"line\">\tAppApiResponseHeader respHeader = new AppApiResponseHeader();</span><br><span class=\"line\">        response.setHeader(respHeader);</span><br><span class=\"line\">        respHeader.setStatusCode(statusCode);</span><br><span class=\"line\">        respHeader.setStatusMessage(statusMessage);</span><br><span class=\"line\">        return response;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"捕获异常-生成统一格式响应\"><a href=\"#捕获异常-生成统一格式响应\" class=\"headerlink\" title=\"捕获异常,生成统一格式响应\"></a>捕获异常,生成统一格式响应</h1><p>利用springMVC的@ControllerAdvice捕获所有来自 Controller 的异常<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@ControllerAdvice(basePackages = &quot;org.test.appApi.actions&quot;)</span><br><span class=\"line\">public class ErrorHandlingControllerAdvice &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static Logger logger = LoggerFactory.getLogger(ErrorHandlingControllerAdvice.class);</span><br><span class=\"line\">    </span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * @Title: handleValidationError</span><br><span class=\"line\">     * @Description: 处理表单验证,业务异常</span><br><span class=\"line\">     * @param ex</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @ExceptionHandler(CustomValidatorException.class)</span><br><span class=\"line\">    @ResponseStatus(HttpStatus.OK)</span><br><span class=\"line\">    @ResponseBody</span><br><span class=\"line\">    public AppApiResponse&lt;?&gt; handleValidationError(CustomValidatorException ex) &#123;</span><br><span class=\"line\">\tString errMsg = null;</span><br><span class=\"line\">\tif(StringUtil.isNull(ex.getErrorMsg())) &#123;</span><br><span class=\"line\">\t    errMsg = ex.getStatusCode().getDefaultMessage();</span><br><span class=\"line\">\t&#125; else &#123;</span><br><span class=\"line\">\t    errMsg = ex.getErrorMsg();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">        return makeResponse(ex.getStatusCode(), errMsg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * @Title: handleValidationError</span><br><span class=\"line\">     * @Description: 处理其他异常</span><br><span class=\"line\">     * @param ex</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @ExceptionHandler(Exception.class)</span><br><span class=\"line\">    @ResponseStatus(HttpStatus.OK)</span><br><span class=\"line\">    @ResponseBody</span><br><span class=\"line\">    public AppApiResponse&lt;?&gt; handleValidationError(Exception ex) &#123;</span><br><span class=\"line\">\tlogger.error(&quot;服务器内部错误:====&quot;, ex);</span><br><span class=\"line\">        return makeResponse(ResponseCodeEnum._500, &quot;服务器内部错误:====&quot; + ex.getMessage());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    private AppApiResponse&lt;?&gt; makeResponse(ResponseCodeEnum statusCode, String statusMessage) &#123;</span><br><span class=\"line\">\tAppApiResponse&lt;Object&gt; response = new AppApiResponse&lt;&gt;(new Object());</span><br><span class=\"line\">\tAppApiResponseHeader respHeader = new AppApiResponseHeader();</span><br><span class=\"line\">        response.setHeader(respHeader);</span><br><span class=\"line\">        respHeader.setStatusCode(statusCode);</span><br><span class=\"line\">        respHeader.setStatusMessage(statusMessage);</span><br><span class=\"line\">        return response;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"配制自定义验证器切面\"><a href=\"#配制自定义验证器切面\" class=\"headerlink\" title=\"配制自定义验证器切面\"></a>配制自定义验证器切面</h1><p>springMVC的配制文件中增加<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;bean id=&quot;validatorAdvise&quot; class=&quot;org.test.appApi.actions.validator.advises.ValidatorAdvise&quot; /&gt;</span><br><span class=\"line\">\t&lt;aop:config&gt;</span><br><span class=\"line\">\t\t&lt;aop:aspect id=&quot;validatorAop&quot; ref=&quot;validatorAdvise&quot;&gt;</span><br><span class=\"line\">\t\t\t&lt;aop:pointcut id=&quot;validator&quot; expression=&quot;execution(* org.test.appApi.actions..*Action.*(..)) </span><br><span class=\"line\">\t\t\tand !execution(* org.test.appApi.actions..*Action.initBinder(..)) </span><br><span class=\"line\">\t\t\tand !execution(* org.test.appApi.actions..*Action.set*(..)) </span><br><span class=\"line\">\t\t\tand !execution(* org.test.appApi.actions..*Action.get*(..))&quot; /&gt;</span><br><span class=\"line\">\t\t\t&lt;aop:around pointcut-ref=&quot;validator&quot; method=&quot;validator&quot; /&gt;</span><br><span class=\"line\">\t\t&lt;/aop:aspect&gt;</span><br><span class=\"line\">\t&lt;/aop:config&gt;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"使用注解\"><a href=\"#使用注解\" class=\"headerlink\" title=\"使用注解\"></a>使用注解</h1><p>使用注解很简单,springMVC的控制器中的方法可以定义任意类型的参数,把各种参数放到一个java bean中,并在该bean使用类注解 @EnableValidator开启验证,并在需要验证的类属性上使用对应的验证器注解就行,验证器注解可以多个混合使用</p>\n<h1 id=\"写在结束\"><a href=\"#写在结束\" class=\"headerlink\" title=\"写在结束\"></a>写在结束</h1><p>到这里,自定义验证器的开发就完成了.也许大家有更好的办法,欢迎讨论.也许spring MVC可以有办法实现我想做的但我不知道,也欢迎大家指出.</p>\n","site":{"data":{}},"excerpt":"<p><excerpt in=\"\" index=\"\" |=\"\" 首页摘要=\"\"> </excerpt></p>\n<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>大家可能会问,spring MVC支持验证注解,如常用的hibernate-validator,为什么要自己实现一套呢?<br>最近做一个APP的服务端接口,项目中有自己的业务返回码.spring MVC支持的注解验证器无法设置验证不通过的时候的返回码,各种不方便,所以思前想后还是自己实现了一套.废话不多说,开始正文.<br>+","more":"</p>\n<p><the rest=\"\" of=\"\" contents=\"\" |=\"\" 余下全文=\"\"></the></p>\n<h1 id=\"状态码枚举\"><a href=\"#状态码枚举\" class=\"headerlink\" title=\"状态码枚举\"></a>状态码枚举</h1><p>状态码枚举中有两个属性: 状态码 和 对应的默认消息<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public enum ResponseCodeEnum &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    _001(&quot;001&quot;, &quot;用户未登录&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * @Fields code : 状态码</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private String code;</span><br><span class=\"line\">    </span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * @Fields defaultMessage : 默认消息</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private String defaultMessage;</span><br><span class=\"line\">    </span><br><span class=\"line\">    private ResponseCodeEnum (String code, String defaultMessage) &#123;</span><br><span class=\"line\">\tthis.code = code;</span><br><span class=\"line\">\tthis.defaultMessage = defaultMessage;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @JsonValue  // com.fasterxml.jackson.annotation.JsonValue, 项目中用了 jackson 做为 </span><br><span class=\"line\">                          // springMVC的JSON转换器,该注解表式这个方法的返回值生成到JSON中,其他忽略</span><br><span class=\"line\">    public String getCode() &#123;</span><br><span class=\"line\">        return code;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public String getDefaultMessage() &#123;</span><br><span class=\"line\">        return defaultMessage;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"自定义业务异常\"><a href=\"#自定义业务异常\" class=\"headerlink\" title=\"自定义业务异常\"></a>自定义业务异常</h1><p>业务数据(客户端提交的)验证不过等各种业务处理中的不通过,统一使用该异常,该异常被捕获后会生成统一格式的消息返回到客户端<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class CustomValidatorException extends RuntimeException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static final long serialVersionUID = 5968495544349929856L;</span><br><span class=\"line\">    </span><br><span class=\"line\">    private ResponseCodeEnum statusCode;</span><br><span class=\"line\">    </span><br><span class=\"line\">    private String errorMsg;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public CustomValidatorException (ResponseCodeEnum statusCode, String errorMsg) &#123;</span><br><span class=\"line\">\tthis.statusCode = statusCode;</span><br><span class=\"line\">\tthis.errorMsg = errorMsg;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public ResponseCodeEnum getStatusCode() &#123;</span><br><span class=\"line\">        return statusCode;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public String getErrorMsg() &#123;</span><br><span class=\"line\">        return errorMsg;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"验证器接口\"><a href=\"#验证器接口\" class=\"headerlink\" title=\"验证器接口\"></a>验证器接口</h1><p>该接口作为验证器注解必须实现的接口,负责真正的验证<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface IAnnotationsValidator &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void doValidator(Object object, Annotation annotation) throws CustomValidatorException ;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"验证器注解\"><a href=\"#验证器注解\" class=\"headerlink\" title=\"验证器注解\"></a>验证器注解</h1><p>验证器相关注解定义,首先得有几个基础注解</p>\n<h2 id=\"基础注解\"><a href=\"#基础注解\" class=\"headerlink\" title=\"基础注解\"></a>基础注解</h2><h5 id=\"EnableValidator-负责开启验证-使用了该注解的参数Bean才会被验证\"><a href=\"#EnableValidator-负责开启验证-使用了该注解的参数Bean才会被验证\" class=\"headerlink\" title=\"EnableValidator  负责开启验证,使用了该注解的参数Bean才会被验证\"></a>EnableValidator  负责开启验证,使用了该注解的参数Bean才会被验证</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Retention(RetentionPolicy.RUNTIME)</span><br><span class=\"line\">@Target(&#123;ElementType.TYPE&#125;)</span><br><span class=\"line\">@Documented</span><br><span class=\"line\">public @interface EnableValidator &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"CustomValidator-该注解作用于注解-该注解只能被其他注解使用-不能被非注解的类使用-使用了该注解的注解才被做为验证器注解\"><a href=\"#CustomValidator-该注解作用于注解-该注解只能被其他注解使用-不能被非注解的类使用-使用了该注解的注解才被做为验证器注解\" class=\"headerlink\" title=\"CustomValidator 该注解作用于注解(该注解只能被其他注解使用,不能被非注解的类使用),使用了该注解的注解才被做为验证器注解\"></a>CustomValidator 该注解作用于注解(该注解只能被其他注解使用,不能被非注解的类使用),使用了该注解的注解才被做为验证器注解</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Retention(RetentionPolicy.RUNTIME)</span><br><span class=\"line\">@Target(&#123;ElementType.ANNOTATION_TYPE&#125;)</span><br><span class=\"line\">@Documented</span><br><span class=\"line\">public @interface CustomValidator &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"验证器注解-1\"><a href=\"#验证器注解-1\" class=\"headerlink\" title=\"验证器注解\"></a>验证器注解</h2><p>这里先只写2个注解吧,其他的可以由其他开发人员开发</p>\n<h5 id=\"Required-必传参数注解-只有这个注解验证参数是否有值-其他注解有值才验证-没值直接通过\"><a href=\"#Required-必传参数注解-只有这个注解验证参数是否有值-其他注解有值才验证-没值直接通过\" class=\"headerlink\" title=\"Required 必传参数注解,只有这个注解验证参数是否有值,其他注解有值才验证,没值直接通过\"></a>Required 必传参数注解,只有这个注解验证参数是否有值,其他注解有值才验证,没值直接通过</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Retention(RetentionPolicy.RUNTIME)</span><br><span class=\"line\">@Target(&#123;ElementType.FIELD&#125;)</span><br><span class=\"line\">@Documented</span><br><span class=\"line\">@Inherited  // 子类可以继承父类的注解</span><br><span class=\"line\">@CustomValidator</span><br><span class=\"line\">public @interface Required &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * @Title: responseCode</span><br><span class=\"line\">     * @Description: 验证失败(不通过)的code</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    ResponseCodeEnum responseCode();</span><br><span class=\"line\">    </span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * @Title: validatFailMessage</span><br><span class=\"line\">     * @Description: 验证失败(不通过)的文字消息,可为空,默认使用ResponseCodeEnum对应的消息</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    String validatFailMessage() default &quot;&quot;;</span><br><span class=\"line\">    </span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * @Fields validatorSpringBeanName : 此注解对应的验证器的springBean名称,该名称在定义注解的时候写死</span><br><span class=\"line\">     */</span><br><span class=\"line\">    final String validatorSpringBeanName = &quot;requiredValidator&quot;;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Required  注解中的几个属性是所有验证器注解都必须有的,大家可能注意到了validatorSpringBeanName , 没错,切面就是根据这个在spring容器中拿验证器实现的</p>\n<h5 id=\"NotEmpty-用于验证字符串-List-集合-数组-Map等不能为空-这里的空不包括null-是null以外的空\"><a href=\"#NotEmpty-用于验证字符串-List-集合-数组-Map等不能为空-这里的空不包括null-是null以外的空\" class=\"headerlink\" title=\"NotEmpty 用于验证字符串,List,集合,数组,Map等不能为空,这里的空不包括null,是null以外的空\"></a>NotEmpty 用于验证字符串,List,集合,数组,Map等不能为空,这里的空不包括null,是null以外的空</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Retention(RetentionPolicy.RUNTIME)</span><br><span class=\"line\">@Target(&#123;ElementType.FIELD&#125;)</span><br><span class=\"line\">@Documented</span><br><span class=\"line\">@Inherited  // 子类可以继承父类的注解</span><br><span class=\"line\">@CustomValidator</span><br><span class=\"line\">public @interface NotEmpty &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * @Title: responseCode</span><br><span class=\"line\">     * @Description: 验证失败(不通过)的code</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    ResponseCodeEnum responseCode();</span><br><span class=\"line\">    </span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * @Title: validatFailMessage</span><br><span class=\"line\">     * @Description: 验证失败(不通过)的文字消息,可为空,默认使用ResponseStatusCodeEnum对应的消息</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    String validatFailMessage() default &quot;&quot;;</span><br><span class=\"line\">    </span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * @Fields validatorSpringBeanName : 此注解对应的验证器的springBean名称,该名称在定义注解的时候写死</span><br><span class=\"line\">     */</span><br><span class=\"line\">    final String validatorSpringBeanName = &quot;notEmptyValidator&quot;;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>除了上面两个验证器中的3个必须有的属性,还可以定义其他的属性,比如验证字符串长度的验证器,可以加一个长度的属性. 这些属性可以在验证器实现中获取</p>\n<h2 id=\"验证器-注解-实现\"><a href=\"#验证器-注解-实现\" class=\"headerlink\" title=\"验证器(注解)实现\"></a>验证器(注解)实现</h2><h5 id=\"RequiredImpl-Required-的实现\"><a href=\"#RequiredImpl-Required-的实现\" class=\"headerlink\" title=\"RequiredImpl: Required 的实现\"></a>RequiredImpl: Required 的实现</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Component(&quot;requiredValidator&quot;)</span><br><span class=\"line\">public class RequiredImpl implements IAnnotationsValidator &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void doValidator(Object object, Annotation annotation) throws CustomValidatorException &#123;</span><br><span class=\"line\">        Required notEmpty = (Required) annotation;</span><br><span class=\"line\">        ResponseStatusCodeEnum statusCode = notEmpty.responseStatusCode();</span><br><span class=\"line\">        String message = notEmpty.validatFailMessage();</span><br><span class=\"line\">        // TODO 获取验证器注解中的其他属性</span><br><span class=\"line\">        // TODO 验证,如果验证不通过,抛出 CustomValidatorException </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"NotEmptyImpl-NotEmpty-的实现-具体参考-Required-的实现\"><a href=\"#NotEmptyImpl-NotEmpty-的实现-具体参考-Required-的实现\" class=\"headerlink\" title=\"NotEmptyImpl: NotEmpty 的实现,具体参考 Required 的实现\"></a>NotEmptyImpl: NotEmpty 的实现,具体参考 Required 的实现</h5><h1 id=\"AOP\"><a href=\"#AOP\" class=\"headerlink\" title=\"AOP\"></a>AOP</h1><p>自定义验证器的核心实现,没有它,上面的东西全是白费<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class ValidatorAdvise &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    private static Logger logger = LoggerFactory.getLogger(ValidatorAdvise .class);</span><br><span class=\"line\"></span><br><span class=\"line\">    public Object validator(ProceedingJoinPoint pjp) &#123;</span><br><span class=\"line\">\t// 获取被拦截的方法的参数</span><br><span class=\"line\">\tObject[] args = pjp.getArgs();</span><br><span class=\"line\">\t// 遍历该方法的所有参数</span><br><span class=\"line\">\tif (args != null &amp;&amp; args.length &gt; 0) &#123;</span><br><span class=\"line\">\t    for (Object arg : args) &#123;</span><br><span class=\"line\">\t\tClass&lt;?&gt; argClassz = arg.getClass();</span><br><span class=\"line\">\t\tif (argClassz.getAnnotation(EnableValidator.class) != null) &#123; // 只有当该参数有EnableValidator注解,也就是开启了验证才处理</span><br><span class=\"line\">\t\t    List&lt;Field&gt; fieldList = getAllFields(null, argClassz); // 获取所有字段</span><br><span class=\"line\">\t\t    // 遍历所有字段,并找出有注解的</span><br><span class=\"line\">\t\t    for (Field field : fieldList) &#123;</span><br><span class=\"line\">\t\t\t// 检查每个字段的注解,有注解的才处理</span><br><span class=\"line\">\t\t\tAnnotation[] fieldAnns = field.getAnnotations();</span><br><span class=\"line\">\t\t\tif (fieldAnns != null &amp;&amp; fieldAnns.length &gt; 0) &#123;</span><br><span class=\"line\">\t\t\t    // 遍历该字段的注解,找到验证器的注解</span><br><span class=\"line\">\t\t\t    for (Annotation fieldAnn : fieldAnns) &#123;</span><br><span class=\"line\">\t\t\t\ttry &#123;</span><br><span class=\"line\">\t\t\t\t    // 检查该注解是否有@CustomValidator,有就说明是验证器</span><br><span class=\"line\">\t\t\t\t    if (fieldAnn.annotationType().getAnnotation(CustomValidator.class) != null) &#123;</span><br><span class=\"line\">\t\t\t\t\t// 通过反射拿验证器的springBeanName字段,不为null才处理</span><br><span class=\"line\">\t\t\t\t\tField validatorSpringBeanNameFiled = fieldAnn.annotationType().getDeclaredField(&quot;validatorSpringBeanName&quot;);</span><br><span class=\"line\">\t\t\t\t\tif (validatorSpringBeanNameFiled != null) &#123;</span><br><span class=\"line\">\t\t\t\t\t    // 通过spring拿到验证器进行验证,先拿验证器的springBeanName</span><br><span class=\"line\">\t\t\t\t\t    Object validatorSpringBeanName = validatorSpringBeanNameFiled.get(fieldAnn);</span><br><span class=\"line\">\t\t\t\t\t    if(StringUtil.isNotNull(validatorSpringBeanName)) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t// 名字有值,从spring容器中拿对应的验证器</span><br><span class=\"line\">\t\t\t\t\t\tIAnnotationsValidator annotationsValidator = SystemApplicationContext.SPRING_CONTEXT.getBean((String)validatorSpringBeanName, IAnnotationsValidator.class);</span><br><span class=\"line\">\t\t\t\t\t\tif(annotationsValidator != null) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t    // 验证器不为空,调用验证器</span><br><span class=\"line\">\t\t\t\t\t\t    field.setAccessible(true);</span><br><span class=\"line\">\t\t\t\t\t\t    try &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\tannotationsValidator.doValidator(field.get(arg), fieldAnn);</span><br><span class=\"line\">\t\t\t\t\t\t    &#125; catch (CustomValidatorException ex) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\tString errMsg = null;</span><br><span class=\"line\">\t\t\t\t\t\t\tif(StringUtil.isNull(ex.getErrorMsg())) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t    errMsg = ex.getStatusCode().getDefaultMessage();</span><br><span class=\"line\">\t\t\t\t\t\t\t&#125; else &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t    errMsg = ex.getErrorMsg();</span><br><span class=\"line\">\t\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t\t        return makeResponse(ex.getStatusCode(), errMsg);</span><br><span class=\"line\">\t\t\t\t\t\t    &#125; catch (Exception ex) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\tlogger.error(&quot;验证器【&#123;&#125;】里抛出了 CustomValidatorException 以外的异常,请验证器开发人员注意!!!&quot;, ex, fieldAnn.annotationType());</span><br><span class=\"line\">\t\t\t\t\t\t        return makeResponse(ResponseCodeEnum._500, &quot;服务器内部错误:====&quot; + ex.getMessage());</span><br><span class=\"line\">\t\t\t\t\t\t    &#125;</span><br><span class=\"line\">\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t    &#125;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t    &#125;</span><br><span class=\"line\">\t\t\t\t&#125; catch (NoSuchFieldException | SecurityException | IllegalArgumentException | IllegalAccessException e) &#123;</span><br><span class=\"line\">\t\t\t\t    logger.error(&quot;验证器处理切面出了点问题&quot;, e);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t    &#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t    &#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tObject ret = null;</span><br><span class=\"line\">\ttry &#123;</span><br><span class=\"line\">\t    ret = pjp.proceed();</span><br><span class=\"line\">\t&#125; catch (Throwable e) &#123;</span><br><span class=\"line\">\t    throw new RuntimeException(&quot;AOP Point Cut ValidatorAdvise Throw Exception :&quot;, e);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * @Title: getAllFields</span><br><span class=\"line\">     * @Description: 递归获取该类的所有属性包括父类的爷爷类的...祖宗类的</span><br><span class=\"line\">     * @param fieldList</span><br><span class=\"line\">     * @param classz</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private List&lt;Field&gt; getAllFields(List&lt;Field&gt; fieldList, Class&lt;?&gt; classz) &#123;</span><br><span class=\"line\">\tif(classz == null) &#123;</span><br><span class=\"line\">\t    return fieldList;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tif(fieldList == null) &#123;</span><br><span class=\"line\">\t    fieldList = Arrays.asList(classz.getDeclaredFields());  // 获得该类的所有字段,但不包括父类的</span><br><span class=\"line\">\t&#125; else &#123;</span><br><span class=\"line\">\t    Collections.addAll(fieldList, classz.getDeclaredFields());  // 获得该类的所有字段,但不包括父类的</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn getAllFields(fieldList, classz.getSuperclass());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * @Title: makeResponse</span><br><span class=\"line\">     * @Description: 生成统一 Response</span><br><span class=\"line\">     * @param statusCode</span><br><span class=\"line\">     * @param statusMessage</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private AppApiResponse&lt;?&gt; makeResponse(ResponseCodeEnum statusCode, String statusMessage) &#123;</span><br><span class=\"line\">\tAppApiResponse&lt;Object&gt; response = new AppApiResponse&lt;&gt;(new Object());</span><br><span class=\"line\">\tAppApiResponseHeader respHeader = new AppApiResponseHeader();</span><br><span class=\"line\">        response.setHeader(respHeader);</span><br><span class=\"line\">        respHeader.setStatusCode(statusCode);</span><br><span class=\"line\">        respHeader.setStatusMessage(statusMessage);</span><br><span class=\"line\">        return response;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"捕获异常-生成统一格式响应\"><a href=\"#捕获异常-生成统一格式响应\" class=\"headerlink\" title=\"捕获异常,生成统一格式响应\"></a>捕获异常,生成统一格式响应</h1><p>利用springMVC的@ControllerAdvice捕获所有来自 Controller 的异常<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@ControllerAdvice(basePackages = &quot;org.test.appApi.actions&quot;)</span><br><span class=\"line\">public class ErrorHandlingControllerAdvice &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static Logger logger = LoggerFactory.getLogger(ErrorHandlingControllerAdvice.class);</span><br><span class=\"line\">    </span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * @Title: handleValidationError</span><br><span class=\"line\">     * @Description: 处理表单验证,业务异常</span><br><span class=\"line\">     * @param ex</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @ExceptionHandler(CustomValidatorException.class)</span><br><span class=\"line\">    @ResponseStatus(HttpStatus.OK)</span><br><span class=\"line\">    @ResponseBody</span><br><span class=\"line\">    public AppApiResponse&lt;?&gt; handleValidationError(CustomValidatorException ex) &#123;</span><br><span class=\"line\">\tString errMsg = null;</span><br><span class=\"line\">\tif(StringUtil.isNull(ex.getErrorMsg())) &#123;</span><br><span class=\"line\">\t    errMsg = ex.getStatusCode().getDefaultMessage();</span><br><span class=\"line\">\t&#125; else &#123;</span><br><span class=\"line\">\t    errMsg = ex.getErrorMsg();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">        return makeResponse(ex.getStatusCode(), errMsg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * @Title: handleValidationError</span><br><span class=\"line\">     * @Description: 处理其他异常</span><br><span class=\"line\">     * @param ex</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    @ExceptionHandler(Exception.class)</span><br><span class=\"line\">    @ResponseStatus(HttpStatus.OK)</span><br><span class=\"line\">    @ResponseBody</span><br><span class=\"line\">    public AppApiResponse&lt;?&gt; handleValidationError(Exception ex) &#123;</span><br><span class=\"line\">\tlogger.error(&quot;服务器内部错误:====&quot;, ex);</span><br><span class=\"line\">        return makeResponse(ResponseCodeEnum._500, &quot;服务器内部错误:====&quot; + ex.getMessage());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    private AppApiResponse&lt;?&gt; makeResponse(ResponseCodeEnum statusCode, String statusMessage) &#123;</span><br><span class=\"line\">\tAppApiResponse&lt;Object&gt; response = new AppApiResponse&lt;&gt;(new Object());</span><br><span class=\"line\">\tAppApiResponseHeader respHeader = new AppApiResponseHeader();</span><br><span class=\"line\">        response.setHeader(respHeader);</span><br><span class=\"line\">        respHeader.setStatusCode(statusCode);</span><br><span class=\"line\">        respHeader.setStatusMessage(statusMessage);</span><br><span class=\"line\">        return response;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"配制自定义验证器切面\"><a href=\"#配制自定义验证器切面\" class=\"headerlink\" title=\"配制自定义验证器切面\"></a>配制自定义验证器切面</h1><p>springMVC的配制文件中增加<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;bean id=&quot;validatorAdvise&quot; class=&quot;org.test.appApi.actions.validator.advises.ValidatorAdvise&quot; /&gt;</span><br><span class=\"line\">\t&lt;aop:config&gt;</span><br><span class=\"line\">\t\t&lt;aop:aspect id=&quot;validatorAop&quot; ref=&quot;validatorAdvise&quot;&gt;</span><br><span class=\"line\">\t\t\t&lt;aop:pointcut id=&quot;validator&quot; expression=&quot;execution(* org.test.appApi.actions..*Action.*(..)) </span><br><span class=\"line\">\t\t\tand !execution(* org.test.appApi.actions..*Action.initBinder(..)) </span><br><span class=\"line\">\t\t\tand !execution(* org.test.appApi.actions..*Action.set*(..)) </span><br><span class=\"line\">\t\t\tand !execution(* org.test.appApi.actions..*Action.get*(..))&quot; /&gt;</span><br><span class=\"line\">\t\t\t&lt;aop:around pointcut-ref=&quot;validator&quot; method=&quot;validator&quot; /&gt;</span><br><span class=\"line\">\t\t&lt;/aop:aspect&gt;</span><br><span class=\"line\">\t&lt;/aop:config&gt;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"使用注解\"><a href=\"#使用注解\" class=\"headerlink\" title=\"使用注解\"></a>使用注解</h1><p>使用注解很简单,springMVC的控制器中的方法可以定义任意类型的参数,把各种参数放到一个java bean中,并在该bean使用类注解 @EnableValidator开启验证,并在需要验证的类属性上使用对应的验证器注解就行,验证器注解可以多个混合使用</p>\n<h1 id=\"写在结束\"><a href=\"#写在结束\" class=\"headerlink\" title=\"写在结束\"></a>写在结束</h1><p>到这里,自定义验证器的开发就完成了.也许大家有更好的办法,欢迎讨论.也许spring MVC可以有办法实现我想做的但我不知道,也欢迎大家指出.</p>"},{"title":"将你自己的项目发布到maven中央仓库","date":"2018-04-21T15:21:59.000Z","_content":"<Excerpt in index | 首页摘要> \n# 为什么写这篇文章\n\n现在OkHttp很火,研究学习了一下,铺天盖地的教程和通用工具都是Android用的,封装了很多Android的组件在里边.但是OkHttp不是一个安卓库啊,它是java库,所有基于JVM的语言都可以用.\n所以自己写了个OkHttp通用简单封装并放到了github,这是本人第一个开源项目,有点小兴奋呢.但是只是开源,别人想使用也麻烦,还要下载下来自己编译,然后就想到了把它提交到maven中央仓库.但是没有提交过啊,各种搜索折腾了一天,终于成功了.\n这篇文章大概介绍一下如何将自己的项目发布到maven中央仓库及我滚过的坑(可能大家会觉得可笑,想笑就笑吧,反正我也看不见o(∩_∩)o )\n\n+<!-- more -->\n<The rest of contents | 余下全文>\n\n# 什么是maven中央仓库\n\n偷个懒,下面的内容摘抄自 [发布项目到maven中央仓库](http://www.cnblogs.com/songjialin2016/p/8624019.html)\n\n>maven是java世界最流行的构建工具，构建内容囊括了一个java项目的整个生命周期。其中最重要的功能就是依赖管理，maven通过一个类似云的ftp站点统一管理所有java 的jar文件，同时给每个文件的每个版本一个统一的唯一坐标。开发人员通过检索配置这些坐标，选择自己需要的构件搭建自己的项目环境。因此，通过一个叫做pom的描述文件，我们就可以在任何平台搭建好项目运行所需要的环境。方便了协作和分享代码。\n\n>而那个类似云的ftp站点就是maven中央仓库。由于一些不可抗拒因素，我们对于中央仓库的访问速度比较慢。因此在平时工作环境中，我们往往都是使用一些镜像站点，如阿里云和开源中国的仓库镜像。同时由于公司里的商业代码不可发布到公开站点，我们也会在局域网内搭建私服。但是无论是镜像还是私服，都像是缓存，虽然提高了下载速度，但是最终，所有的jar都来自中央仓库。因此，如果我们将项目发布到了maven 中央仓库中，那么在所有基于maven或者gradle等的项目里都可以依赖下载你的构件。真正做到了一次发布，处处可用。\n\n# 发布到中央仓库的好处\n\n偷个懒,下面的内容摘抄自 [发布项目到maven中央仓库](http://www.cnblogs.com/songjialin2016/p/8624019.html)\n>首先，作为一个java从业者，对于天天都在用的东西，做一个深入的了解，发布一个项目到中央仓库可以自我满足。作为我来讲，我发布了一个自己的项目，开始有了利用下班时间好好写点开源代码学习和装逼的冲动。\n\n>再者，作为一个经验丰富的java开发工程师，我们在日常工作中总会积攒下自己使用得很顺手的一些轮子或者一些通用的基础类。如果我们整理好，并持续维护，发布到了中央仓库之后，就可以避免很多重复性的工作。而且也避免了很多冲突：我现在的公司里，每个项目的dubbo调用接口都会自己定义一个Response和Request类。同一类型的重复定义，跟cpp的多根继承一样烦。这样的结果导致了没法统一处理各个系统的调用返回值。既不够优雅，也显得重复。如果我们把这些基础的东西发布到了中央仓库，就只需要引用一下了。当然这种情况一般是发布到私服比较好，我只是举个例子。具体的大家自行体会。\n\n# 发布过程\n在发布前,您需要有自己的项目主页并开源的代码,您可以使用GitHub或者码云,下面的内容以GitHub为例\n\n#### 注册 sonatype的Jira 帐号\n注册地址: [https://issues.sonatype.org/secure/Signup!default.jspa](https://issues.sonatype.org/secure/Signup!default.jspa)\n注册很简单,重要的是邮箱地址一定要正确,issue有任何变动都会通过邮件通知.\n>这里要着重说明一下,也是我滚过的坑: Username 字段一定要使用英文+数字,一定不要使用中文!!!否则官方无法分配权限给你,或者会让你另行注册.\n>因为这个Username会成为这个Jira和提交maven项目的OSS的帐号,虽然用中文登录啥的没问题,但提交的时候就有问题了,我折腾了N个小时,最后又求助官方人员才解决.\n>我当时发了一个issue,就叫 issues1吧,当时官方人员让我修改GroupId,修改后我回复修改完成,等了好多个小时都没回应.然后我又提交了一个issue2,内容与issue1一毛一样,很快就有官方人员说OK了.\n>没过几分钟issue1也有官方人员回复了(不是一个人),说我的帐号XX(中文) 不行,让我重新注册一个帐号再回复,他帮我弄.\n>由于当时issue2已经有官方人员回复OK了,我就在issue1里回复说我在另一个issue里已经解决.然后我就很欢喜的去提交,折腾了好久都没提交上,一直说没有权限...但是当时我用那个帐号登录OSS是可以登录的,就是提交不了.\n>折腾了几个小时之后,很无奈的去issue2里求助官方人员,然后在issue1里让我重新注册的兄弟在issue2里说是因为我的帐号是中文,无法分配权限,让我重新注册一个再在issue2里回复,他帮我配权限...\n> 重新注册了一个帐号之后,用新的帐号提交,OK了...\n\n#### 登录Jira\n注册完成后就登录: [https://issues.sonatype.org/login.jsp](https://issues.sonatype.org/login.jsp)\n\n#### 创建一个 Issue\n创建地址: [https://issues.sonatype.org/secure/CreateIssue.jspa?issuetype=21&pid=10134](https://issues.sonatype.org/secure/CreateIssue.jspa?issuetype=21&pid=10134)\n>这个地址已经选择好了项目和类型,直接填就行,当然,如果你要通过【Create】按钮创建\n>Project选择【Community Support - Open Source Project Repository Hosting (OSSRH)】\n>Issue Type：选择【New Project】\nSummary和Description ：自己填,注意要用E文\nGroup Id:：这个必须要注意,如果你用的是GitHub, 一定要是 com.github.你的github用户名, 例如我的项目地址是: https://github.com/KeRan213539/CommonOkHttp, 那我的 groupId就是com.github.KeRan213539,当然也可以使用 GitHub的Page的域名 io.github.你的github用户名. 如果你有自己的域名和项目地址也可以,官方人员会询问你是否有这个域名的所有权.在你项目的pom里一定要使用这个groupId,最好包路径也使用\nProject URL: 是你的项目地址\nSCM url: 是你的项目git地址\nUsername(s): 可以不用填,这是能辅助你提交项目的合作人的帐号,前提是他也得在这个Jira注册\n其他使用默认值就行了\n\n创建好Issue后就等待官方回复吧.通常如果在晚上22点23点的话回复会比较快,运气好几分钟就有回复了\n当看到回复类似 com.github.xxx has been prepared, now user(s) xxx can:Deploy snapshot artifacts into repository ... 说明OK了,可以提交了\n\n#### 使用 GPG 生成密钥对 \n在等待Issue的时候可以先把密钥搞好\nWindows 系统，可以下载 Gpg4win 软件来生成密钥对。下载地址：[https://www.gpg4win.org/download.html](https://www.gpg4win.org/download.html)\n下载的时候有个坑,会弹出一个捐助页面,然后没有下载的地方,也没有自动开始下载.感觉好像不捐助就不能下载一样.其实在下载页面下面有个All Downloads,里面有个连接 [files.gpg4win.org](https://files.gpg4win.org/),在这里找到与下载页面上的最新版相同的版本号下载即可\n安装过程中在选择组件的时候,除了默认必须安装的,其他取消即可\n安装完成后,打开CMD\n>查看是否安装成功\ngpg --version\n\n---\n>生成密钥对\n>gpg --gen-key\n>Real name: 名字(E文)\n>Email address: 邮箱\n>You selected this USER-ID:\n>    \"xxx<xxx@qq.com>\"\n>Change (N)ame, (E)mail, or (O)kay/(Q)uit? o\n>之后往下，会让你输入用户名和邮箱，还有一个Passphase（输入两次），相当于密钥库密码，不要忘记。\n---\n>查看公钥\n>gpg --list-keys\n>pub   rsa2048 2017-12-16 [SC] [expires: 2019-12-16]\n>      9DF36BF5DFB87B6F04DBCE3D63EC6544BEE6682D\n>uid           [ultimate] xxx<xxx@qq.com>\n>sub   rsa2048 2017-12-16 [E] [expires: 2019-12-16]\n\n>其中 9DF36BF5DFB87B6F04DBCE3D63EC6544BEE6682D 就是公钥\n---\n>将公钥发布到 PGP 密钥服务器\ngpg --keyserver hkp://pool.sks-keyservers.net --send-keys 你的公钥\n---\n>查询公钥是否发布成功\ngpg --keyserver hkp://pool.sks-keyservers.net --recv-keys  你的公钥\n\n#### 修改Maven配制\n如果你的Issue通过了,那么可以开始提交项目了.\n>修改maven全局配制文件 settings.xml,在maven安装目录的conf文件夹下\n---\n```\n<servers>\n    <server>\n        <id>oss</id>\n        <username>用户名</username>\n        <password>密码</password>\n    </server>\n</servers>\n```\n这里的 id 是要在 pom.xml 里面使用的，用户名和密码就是Jira的帐号密码\n---\n>pom.xml\n```\n<project>\n    ...\n    <name>dexcoder-assistant</name>\n    <description>dexcoder-assistant is a rapid development kit.</description>\n    <url>http://www.dexcoder.com/</url>\n    <licenses>\n        <license>\n            <name>The Apache Software License, Version 2.0</naurl\n            <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>\n        </license>\n    </licenses>\n    <developers>\n        <developer>\n            <name>selfly</name>\n            <email>selfly@foxmail.com</email>\n        </developer>\n    </developers>\n    <scm>\n        <connection>scm:git:git@github.com:selfly/dexcoder-assistant.git</connection>\n        <developerConnection>scm:git:git@github.com:selfly/dexcoder-assistant.git</developerConnection>\n        <url>git@github.com:selfly/dexcoder-assistant.git</url>\n    </scm>\n    \n    <profiles>\n        <profile>\n            <id>release</id>\n            <build>\n                <plugins>\n                    <!-- Source -->\n                    <plugin>\n                        <groupId>org.apache.maven.plugins</groupId>\n                        <artifactId>maven-source-plugin</artifactId>\n                        <version>2.2.1</version>\n                        <executions>\n                            <execution>\n                                <phase>package</phase>\n                                <goals>\n                                    <goal>jar-no-fork</goal>\n                                </goals>\n                            </execution>\n                        </executions>\n                    </plugin>\n                    <!-- Javadoc -->\n                    <plugin>\n                        <groupId>org.apache.maven.plugins</groupId>\n                        <artifactId>maven-javadoc-plugin</artifactId>\n                        <version>2.9.1</version>\n                        <configuration>\n                        \t<show>private</show>\n                        \t<nohelp>true</nohelp>\n                                    <charset>UTF-8</charset>\n\t\t\t\t<encoding>UTF-8</encoding>\n\t\t\t\t<docencoding>UTF-8</docencoding>\n\t\t\t\t<additionalparam>-Xdoclint:none</additionalparam>  <!-- TODO 临时解决不规范的javadoc生成报错,后面要规范化后把这行去掉 -->\n\t\t\t</configuration>\n                        <executions>\n                            <execution>\n                                <phase>package</phase>\n                                <goals>\n                                    <goal>jar</goal>\n                                </goals>\n                            </execution>\n                        </executions>\n                    </plugin>\n                    <!-- GPG -->\n                    <plugin>\n                        <groupId>org.apache.maven.plugins</groupId>\n                        <artifactId>maven-gpg-plugin</artifactId>\n                        <version>1.5</version>\n                        <executions>\n                            <execution>\n                                <phase>verify</phase>\n                                <goals>\n                                    <goal>sign</goal>\n                                </goals>\n                            </execution>\n                        </executions>\n                    </plugin>\n                </plugins>\n            </build>\n            <distributionManagement>\n                <snapshotRepository>\n                    <id>oss</id>\n                    <url>https://oss.sonatype.org/content/repositories/snapshots/</url>\n                </snapshotRepository>\n                <repository>\n                    <id>oss</id>\n                    <url>https://oss.sonatype.org/service/local/staging/deploy/maven2/</url>\n                </repository>\n            </distributionManagement>\n        </profile>\n    </profiles>\n    ...\n</project>\n```\n>pom.xml 中必须包括：name、description、url、licenses、developers、scm 等基本信息，使用了 Maven 的 profile 功能，只有在 release 的时候，创建源码包、文档包、使用 GPG 进行数字签名。\n此外，snapshotRepository 与 repository 中的 id 一定要与 setting.xml 中 server 的 id 保持一致。\n如果是多模块项目的话，只需要在父 pom.xml 中声明这些，子 pom.xml 中只需要修改相应的一些信息，如 name 标签。\n由于我使用的是jdk8,对doc的格式要求更严,不标准的doc注释会报错,这时候可以通过在doc插件中配制additionalparam参数,上面代码里已经配过了.但这只是临时解决方案,还是尽量使用标准的doc注释吧.\n\n#### 提交项目到OSS\nmaven配制修改完成后,就可以提交项目了,使用命令:\n```\nmvn clean deploy -P release\n```\n>当执行以上 Maven 命令时，会自动弹出一个对话框，需要输入上面提到的 Passphase，它就是刚才设置的 GPG 密钥库的密码。\n>注意：此时上传的构件并未正式发布到中央仓库中，只是部署到 OSS 中了，下面才是真正的发布。\n---\n>执行上面的命令的过程中,可能会找不到gpg.exe, 检查环境变量,发现环境变量中已经配制了gpg.exe所在的路径,但是还是报错... 如何解决? setting.xml中加入:\n```\n<profile>\n      <id>release</id>\n      <properties>\n        <gpg.executable>D:/Program Files (x86)/GnuPG/bin/gpg.exe</gpg.executable>\n        <gpg.passphrase>上面提到的 Passphase</gpg.passphrase>\n      </properties>\n    </profile>\n```\n>注意 ID要与pom.xml里的发布的 profile 的ID对应\n其中<gpg.executable>为你的gpg.exe的完整路径\n<gpg.passphrase> 为上面提到的 Passphase,这样就不用在每次发布的时候都输入密码了,但是我发现即便有这个,有时候(只是有时,不是每次)还是要让输入密码,暂时不清楚是什么问题.\n上面这2个配制也可以配制到pom.xml的gpg插件的<configuration>中,去掉<gpg.>就行,当然密码最好还是不要放在pom.xml里,因为如果你的代码开源的话,密码也一起开源了...\n---\n>如何发布快照版本?\n在pom.xml中的项目版本号后面加上  -SNAPSHOT 就行\n快照版到这里就发布好了，不需要执行下面的关闭、发布构建步骤，构建列表里也找不到快照版的构建，快照版发布后就可以直接引用了\n\n#### 在 OSS中发布\n>使用 Jira 账号登录 [https://oss.sonatype.org](https://oss.sonatype.org)，在 Staging Repositories 中查看刚才已上传的构件。\n一般发布的构件不多,可以直接滚动条拉到最后就能看到自己的构件,或者更改时间排序,也可进行模糊查询定位到自己的构件\n找到自己的构建后选中,并点击上方的 【Close】按钮关闭构建,这个过程有点慢,稍等几分钟\n刷新页面,发现关闭成功后,再次选中自己的构建,点击上方的【Release】发布构建.\n\n#### 通知Sonatype 已经成功发布\n>在Issue中通过审核的官方回复中,通常会让你在发布成功后再次回复告知他们,在刚才那个Issue中回复已经成功发布,官方会回复你大概需要等多久才能在中央仓库中找到你的项目(10分钟左右)以及要多久才能在搜索中搜到(2个小时左右)\n\n#### 以后的提交过程\n>第一次提交才这么麻烦,以后提交只用重复maven发布,OSS中Close,Release的过程就可以了,当然需要等待的时间还是10分钟和2小时.\n如果要发布新的项目,在使用相同GroupId的情况下,与上面的过程一样.只有使用不同的GroupId的时候,才会需要再去提交Issue申请.\n当然如果你没有换电脑的话 GPG 的过程只需要一次就行\n\n####  结束\n到此发布过程就结束了.本文参考了以下文章,特别感谢这些文章的作者:\n[Maven 发布自己的项目到 Maven 中央仓库](https://www.cnblogs.com/binarylei/p/8628245.html)\n[[干货]--发布项目到maven中央仓库](https://www.cnblogs.com/songjialin2016/p/8624019.html)\n[将项目发布到Maven中央库](https://blog.csdn.net/lanmo555/article/details/52456751)","source":"_posts/将你自己的项目发布到maven中央仓库.md","raw":"---\ntitle: 将你自己的项目发布到maven中央仓库\ndate: 2018-04-21 23:21:59\ntags: maven中央仓库\n---\n<Excerpt in index | 首页摘要> \n# 为什么写这篇文章\n\n现在OkHttp很火,研究学习了一下,铺天盖地的教程和通用工具都是Android用的,封装了很多Android的组件在里边.但是OkHttp不是一个安卓库啊,它是java库,所有基于JVM的语言都可以用.\n所以自己写了个OkHttp通用简单封装并放到了github,这是本人第一个开源项目,有点小兴奋呢.但是只是开源,别人想使用也麻烦,还要下载下来自己编译,然后就想到了把它提交到maven中央仓库.但是没有提交过啊,各种搜索折腾了一天,终于成功了.\n这篇文章大概介绍一下如何将自己的项目发布到maven中央仓库及我滚过的坑(可能大家会觉得可笑,想笑就笑吧,反正我也看不见o(∩_∩)o )\n\n+<!-- more -->\n<The rest of contents | 余下全文>\n\n# 什么是maven中央仓库\n\n偷个懒,下面的内容摘抄自 [发布项目到maven中央仓库](http://www.cnblogs.com/songjialin2016/p/8624019.html)\n\n>maven是java世界最流行的构建工具，构建内容囊括了一个java项目的整个生命周期。其中最重要的功能就是依赖管理，maven通过一个类似云的ftp站点统一管理所有java 的jar文件，同时给每个文件的每个版本一个统一的唯一坐标。开发人员通过检索配置这些坐标，选择自己需要的构件搭建自己的项目环境。因此，通过一个叫做pom的描述文件，我们就可以在任何平台搭建好项目运行所需要的环境。方便了协作和分享代码。\n\n>而那个类似云的ftp站点就是maven中央仓库。由于一些不可抗拒因素，我们对于中央仓库的访问速度比较慢。因此在平时工作环境中，我们往往都是使用一些镜像站点，如阿里云和开源中国的仓库镜像。同时由于公司里的商业代码不可发布到公开站点，我们也会在局域网内搭建私服。但是无论是镜像还是私服，都像是缓存，虽然提高了下载速度，但是最终，所有的jar都来自中央仓库。因此，如果我们将项目发布到了maven 中央仓库中，那么在所有基于maven或者gradle等的项目里都可以依赖下载你的构件。真正做到了一次发布，处处可用。\n\n# 发布到中央仓库的好处\n\n偷个懒,下面的内容摘抄自 [发布项目到maven中央仓库](http://www.cnblogs.com/songjialin2016/p/8624019.html)\n>首先，作为一个java从业者，对于天天都在用的东西，做一个深入的了解，发布一个项目到中央仓库可以自我满足。作为我来讲，我发布了一个自己的项目，开始有了利用下班时间好好写点开源代码学习和装逼的冲动。\n\n>再者，作为一个经验丰富的java开发工程师，我们在日常工作中总会积攒下自己使用得很顺手的一些轮子或者一些通用的基础类。如果我们整理好，并持续维护，发布到了中央仓库之后，就可以避免很多重复性的工作。而且也避免了很多冲突：我现在的公司里，每个项目的dubbo调用接口都会自己定义一个Response和Request类。同一类型的重复定义，跟cpp的多根继承一样烦。这样的结果导致了没法统一处理各个系统的调用返回值。既不够优雅，也显得重复。如果我们把这些基础的东西发布到了中央仓库，就只需要引用一下了。当然这种情况一般是发布到私服比较好，我只是举个例子。具体的大家自行体会。\n\n# 发布过程\n在发布前,您需要有自己的项目主页并开源的代码,您可以使用GitHub或者码云,下面的内容以GitHub为例\n\n#### 注册 sonatype的Jira 帐号\n注册地址: [https://issues.sonatype.org/secure/Signup!default.jspa](https://issues.sonatype.org/secure/Signup!default.jspa)\n注册很简单,重要的是邮箱地址一定要正确,issue有任何变动都会通过邮件通知.\n>这里要着重说明一下,也是我滚过的坑: Username 字段一定要使用英文+数字,一定不要使用中文!!!否则官方无法分配权限给你,或者会让你另行注册.\n>因为这个Username会成为这个Jira和提交maven项目的OSS的帐号,虽然用中文登录啥的没问题,但提交的时候就有问题了,我折腾了N个小时,最后又求助官方人员才解决.\n>我当时发了一个issue,就叫 issues1吧,当时官方人员让我修改GroupId,修改后我回复修改完成,等了好多个小时都没回应.然后我又提交了一个issue2,内容与issue1一毛一样,很快就有官方人员说OK了.\n>没过几分钟issue1也有官方人员回复了(不是一个人),说我的帐号XX(中文) 不行,让我重新注册一个帐号再回复,他帮我弄.\n>由于当时issue2已经有官方人员回复OK了,我就在issue1里回复说我在另一个issue里已经解决.然后我就很欢喜的去提交,折腾了好久都没提交上,一直说没有权限...但是当时我用那个帐号登录OSS是可以登录的,就是提交不了.\n>折腾了几个小时之后,很无奈的去issue2里求助官方人员,然后在issue1里让我重新注册的兄弟在issue2里说是因为我的帐号是中文,无法分配权限,让我重新注册一个再在issue2里回复,他帮我配权限...\n> 重新注册了一个帐号之后,用新的帐号提交,OK了...\n\n#### 登录Jira\n注册完成后就登录: [https://issues.sonatype.org/login.jsp](https://issues.sonatype.org/login.jsp)\n\n#### 创建一个 Issue\n创建地址: [https://issues.sonatype.org/secure/CreateIssue.jspa?issuetype=21&pid=10134](https://issues.sonatype.org/secure/CreateIssue.jspa?issuetype=21&pid=10134)\n>这个地址已经选择好了项目和类型,直接填就行,当然,如果你要通过【Create】按钮创建\n>Project选择【Community Support - Open Source Project Repository Hosting (OSSRH)】\n>Issue Type：选择【New Project】\nSummary和Description ：自己填,注意要用E文\nGroup Id:：这个必须要注意,如果你用的是GitHub, 一定要是 com.github.你的github用户名, 例如我的项目地址是: https://github.com/KeRan213539/CommonOkHttp, 那我的 groupId就是com.github.KeRan213539,当然也可以使用 GitHub的Page的域名 io.github.你的github用户名. 如果你有自己的域名和项目地址也可以,官方人员会询问你是否有这个域名的所有权.在你项目的pom里一定要使用这个groupId,最好包路径也使用\nProject URL: 是你的项目地址\nSCM url: 是你的项目git地址\nUsername(s): 可以不用填,这是能辅助你提交项目的合作人的帐号,前提是他也得在这个Jira注册\n其他使用默认值就行了\n\n创建好Issue后就等待官方回复吧.通常如果在晚上22点23点的话回复会比较快,运气好几分钟就有回复了\n当看到回复类似 com.github.xxx has been prepared, now user(s) xxx can:Deploy snapshot artifacts into repository ... 说明OK了,可以提交了\n\n#### 使用 GPG 生成密钥对 \n在等待Issue的时候可以先把密钥搞好\nWindows 系统，可以下载 Gpg4win 软件来生成密钥对。下载地址：[https://www.gpg4win.org/download.html](https://www.gpg4win.org/download.html)\n下载的时候有个坑,会弹出一个捐助页面,然后没有下载的地方,也没有自动开始下载.感觉好像不捐助就不能下载一样.其实在下载页面下面有个All Downloads,里面有个连接 [files.gpg4win.org](https://files.gpg4win.org/),在这里找到与下载页面上的最新版相同的版本号下载即可\n安装过程中在选择组件的时候,除了默认必须安装的,其他取消即可\n安装完成后,打开CMD\n>查看是否安装成功\ngpg --version\n\n---\n>生成密钥对\n>gpg --gen-key\n>Real name: 名字(E文)\n>Email address: 邮箱\n>You selected this USER-ID:\n>    \"xxx<xxx@qq.com>\"\n>Change (N)ame, (E)mail, or (O)kay/(Q)uit? o\n>之后往下，会让你输入用户名和邮箱，还有一个Passphase（输入两次），相当于密钥库密码，不要忘记。\n---\n>查看公钥\n>gpg --list-keys\n>pub   rsa2048 2017-12-16 [SC] [expires: 2019-12-16]\n>      9DF36BF5DFB87B6F04DBCE3D63EC6544BEE6682D\n>uid           [ultimate] xxx<xxx@qq.com>\n>sub   rsa2048 2017-12-16 [E] [expires: 2019-12-16]\n\n>其中 9DF36BF5DFB87B6F04DBCE3D63EC6544BEE6682D 就是公钥\n---\n>将公钥发布到 PGP 密钥服务器\ngpg --keyserver hkp://pool.sks-keyservers.net --send-keys 你的公钥\n---\n>查询公钥是否发布成功\ngpg --keyserver hkp://pool.sks-keyservers.net --recv-keys  你的公钥\n\n#### 修改Maven配制\n如果你的Issue通过了,那么可以开始提交项目了.\n>修改maven全局配制文件 settings.xml,在maven安装目录的conf文件夹下\n---\n```\n<servers>\n    <server>\n        <id>oss</id>\n        <username>用户名</username>\n        <password>密码</password>\n    </server>\n</servers>\n```\n这里的 id 是要在 pom.xml 里面使用的，用户名和密码就是Jira的帐号密码\n---\n>pom.xml\n```\n<project>\n    ...\n    <name>dexcoder-assistant</name>\n    <description>dexcoder-assistant is a rapid development kit.</description>\n    <url>http://www.dexcoder.com/</url>\n    <licenses>\n        <license>\n            <name>The Apache Software License, Version 2.0</naurl\n            <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>\n        </license>\n    </licenses>\n    <developers>\n        <developer>\n            <name>selfly</name>\n            <email>selfly@foxmail.com</email>\n        </developer>\n    </developers>\n    <scm>\n        <connection>scm:git:git@github.com:selfly/dexcoder-assistant.git</connection>\n        <developerConnection>scm:git:git@github.com:selfly/dexcoder-assistant.git</developerConnection>\n        <url>git@github.com:selfly/dexcoder-assistant.git</url>\n    </scm>\n    \n    <profiles>\n        <profile>\n            <id>release</id>\n            <build>\n                <plugins>\n                    <!-- Source -->\n                    <plugin>\n                        <groupId>org.apache.maven.plugins</groupId>\n                        <artifactId>maven-source-plugin</artifactId>\n                        <version>2.2.1</version>\n                        <executions>\n                            <execution>\n                                <phase>package</phase>\n                                <goals>\n                                    <goal>jar-no-fork</goal>\n                                </goals>\n                            </execution>\n                        </executions>\n                    </plugin>\n                    <!-- Javadoc -->\n                    <plugin>\n                        <groupId>org.apache.maven.plugins</groupId>\n                        <artifactId>maven-javadoc-plugin</artifactId>\n                        <version>2.9.1</version>\n                        <configuration>\n                        \t<show>private</show>\n                        \t<nohelp>true</nohelp>\n                                    <charset>UTF-8</charset>\n\t\t\t\t<encoding>UTF-8</encoding>\n\t\t\t\t<docencoding>UTF-8</docencoding>\n\t\t\t\t<additionalparam>-Xdoclint:none</additionalparam>  <!-- TODO 临时解决不规范的javadoc生成报错,后面要规范化后把这行去掉 -->\n\t\t\t</configuration>\n                        <executions>\n                            <execution>\n                                <phase>package</phase>\n                                <goals>\n                                    <goal>jar</goal>\n                                </goals>\n                            </execution>\n                        </executions>\n                    </plugin>\n                    <!-- GPG -->\n                    <plugin>\n                        <groupId>org.apache.maven.plugins</groupId>\n                        <artifactId>maven-gpg-plugin</artifactId>\n                        <version>1.5</version>\n                        <executions>\n                            <execution>\n                                <phase>verify</phase>\n                                <goals>\n                                    <goal>sign</goal>\n                                </goals>\n                            </execution>\n                        </executions>\n                    </plugin>\n                </plugins>\n            </build>\n            <distributionManagement>\n                <snapshotRepository>\n                    <id>oss</id>\n                    <url>https://oss.sonatype.org/content/repositories/snapshots/</url>\n                </snapshotRepository>\n                <repository>\n                    <id>oss</id>\n                    <url>https://oss.sonatype.org/service/local/staging/deploy/maven2/</url>\n                </repository>\n            </distributionManagement>\n        </profile>\n    </profiles>\n    ...\n</project>\n```\n>pom.xml 中必须包括：name、description、url、licenses、developers、scm 等基本信息，使用了 Maven 的 profile 功能，只有在 release 的时候，创建源码包、文档包、使用 GPG 进行数字签名。\n此外，snapshotRepository 与 repository 中的 id 一定要与 setting.xml 中 server 的 id 保持一致。\n如果是多模块项目的话，只需要在父 pom.xml 中声明这些，子 pom.xml 中只需要修改相应的一些信息，如 name 标签。\n由于我使用的是jdk8,对doc的格式要求更严,不标准的doc注释会报错,这时候可以通过在doc插件中配制additionalparam参数,上面代码里已经配过了.但这只是临时解决方案,还是尽量使用标准的doc注释吧.\n\n#### 提交项目到OSS\nmaven配制修改完成后,就可以提交项目了,使用命令:\n```\nmvn clean deploy -P release\n```\n>当执行以上 Maven 命令时，会自动弹出一个对话框，需要输入上面提到的 Passphase，它就是刚才设置的 GPG 密钥库的密码。\n>注意：此时上传的构件并未正式发布到中央仓库中，只是部署到 OSS 中了，下面才是真正的发布。\n---\n>执行上面的命令的过程中,可能会找不到gpg.exe, 检查环境变量,发现环境变量中已经配制了gpg.exe所在的路径,但是还是报错... 如何解决? setting.xml中加入:\n```\n<profile>\n      <id>release</id>\n      <properties>\n        <gpg.executable>D:/Program Files (x86)/GnuPG/bin/gpg.exe</gpg.executable>\n        <gpg.passphrase>上面提到的 Passphase</gpg.passphrase>\n      </properties>\n    </profile>\n```\n>注意 ID要与pom.xml里的发布的 profile 的ID对应\n其中<gpg.executable>为你的gpg.exe的完整路径\n<gpg.passphrase> 为上面提到的 Passphase,这样就不用在每次发布的时候都输入密码了,但是我发现即便有这个,有时候(只是有时,不是每次)还是要让输入密码,暂时不清楚是什么问题.\n上面这2个配制也可以配制到pom.xml的gpg插件的<configuration>中,去掉<gpg.>就行,当然密码最好还是不要放在pom.xml里,因为如果你的代码开源的话,密码也一起开源了...\n---\n>如何发布快照版本?\n在pom.xml中的项目版本号后面加上  -SNAPSHOT 就行\n快照版到这里就发布好了，不需要执行下面的关闭、发布构建步骤，构建列表里也找不到快照版的构建，快照版发布后就可以直接引用了\n\n#### 在 OSS中发布\n>使用 Jira 账号登录 [https://oss.sonatype.org](https://oss.sonatype.org)，在 Staging Repositories 中查看刚才已上传的构件。\n一般发布的构件不多,可以直接滚动条拉到最后就能看到自己的构件,或者更改时间排序,也可进行模糊查询定位到自己的构件\n找到自己的构建后选中,并点击上方的 【Close】按钮关闭构建,这个过程有点慢,稍等几分钟\n刷新页面,发现关闭成功后,再次选中自己的构建,点击上方的【Release】发布构建.\n\n#### 通知Sonatype 已经成功发布\n>在Issue中通过审核的官方回复中,通常会让你在发布成功后再次回复告知他们,在刚才那个Issue中回复已经成功发布,官方会回复你大概需要等多久才能在中央仓库中找到你的项目(10分钟左右)以及要多久才能在搜索中搜到(2个小时左右)\n\n#### 以后的提交过程\n>第一次提交才这么麻烦,以后提交只用重复maven发布,OSS中Close,Release的过程就可以了,当然需要等待的时间还是10分钟和2小时.\n如果要发布新的项目,在使用相同GroupId的情况下,与上面的过程一样.只有使用不同的GroupId的时候,才会需要再去提交Issue申请.\n当然如果你没有换电脑的话 GPG 的过程只需要一次就行\n\n####  结束\n到此发布过程就结束了.本文参考了以下文章,特别感谢这些文章的作者:\n[Maven 发布自己的项目到 Maven 中央仓库](https://www.cnblogs.com/binarylei/p/8628245.html)\n[[干货]--发布项目到maven中央仓库](https://www.cnblogs.com/songjialin2016/p/8624019.html)\n[将项目发布到Maven中央库](https://blog.csdn.net/lanmo555/article/details/52456751)","slug":"将你自己的项目发布到maven中央仓库","published":1,"updated":"2018-04-23T01:27:00.477Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrkl4hb0003mkunewmgou27","content":"<p><excerpt in=\"\" index=\"\" |=\"\" 首页摘要=\"\"> </excerpt></p>\n<h1 id=\"为什么写这篇文章\"><a href=\"#为什么写这篇文章\" class=\"headerlink\" title=\"为什么写这篇文章\"></a>为什么写这篇文章</h1><p>现在OkHttp很火,研究学习了一下,铺天盖地的教程和通用工具都是Android用的,封装了很多Android的组件在里边.但是OkHttp不是一个安卓库啊,它是java库,所有基于JVM的语言都可以用.<br>所以自己写了个OkHttp通用简单封装并放到了github,这是本人第一个开源项目,有点小兴奋呢.但是只是开源,别人想使用也麻烦,还要下载下来自己编译,然后就想到了把它提交到maven中央仓库.但是没有提交过啊,各种搜索折腾了一天,终于成功了.<br>这篇文章大概介绍一下如何将自己的项目发布到maven中央仓库及我滚过的坑(可能大家会觉得可笑,想笑就笑吧,反正我也看不见o(∩_∩)o )</p>\n<p>+<a id=\"more\"></a></p>\n<the rest=\"\" of=\"\" contents=\"\" |=\"\" 余下全文=\"\">\n\n<h1 id=\"什么是maven中央仓库\"><a href=\"#什么是maven中央仓库\" class=\"headerlink\" title=\"什么是maven中央仓库\"></a>什么是maven中央仓库</h1><p>偷个懒,下面的内容摘抄自 <a href=\"http://www.cnblogs.com/songjialin2016/p/8624019.html\" target=\"_blank\" rel=\"noopener\">发布项目到maven中央仓库</a></p>\n<blockquote>\n<p>maven是java世界最流行的构建工具，构建内容囊括了一个java项目的整个生命周期。其中最重要的功能就是依赖管理，maven通过一个类似云的ftp站点统一管理所有java 的jar文件，同时给每个文件的每个版本一个统一的唯一坐标。开发人员通过检索配置这些坐标，选择自己需要的构件搭建自己的项目环境。因此，通过一个叫做pom的描述文件，我们就可以在任何平台搭建好项目运行所需要的环境。方便了协作和分享代码。</p>\n</blockquote>\n<blockquote>\n<p>而那个类似云的ftp站点就是maven中央仓库。由于一些不可抗拒因素，我们对于中央仓库的访问速度比较慢。因此在平时工作环境中，我们往往都是使用一些镜像站点，如阿里云和开源中国的仓库镜像。同时由于公司里的商业代码不可发布到公开站点，我们也会在局域网内搭建私服。但是无论是镜像还是私服，都像是缓存，虽然提高了下载速度，但是最终，所有的jar都来自中央仓库。因此，如果我们将项目发布到了maven 中央仓库中，那么在所有基于maven或者gradle等的项目里都可以依赖下载你的构件。真正做到了一次发布，处处可用。</p>\n</blockquote>\n<h1 id=\"发布到中央仓库的好处\"><a href=\"#发布到中央仓库的好处\" class=\"headerlink\" title=\"发布到中央仓库的好处\"></a>发布到中央仓库的好处</h1><p>偷个懒,下面的内容摘抄自 <a href=\"http://www.cnblogs.com/songjialin2016/p/8624019.html\" target=\"_blank\" rel=\"noopener\">发布项目到maven中央仓库</a></p>\n<blockquote>\n<p>首先，作为一个java从业者，对于天天都在用的东西，做一个深入的了解，发布一个项目到中央仓库可以自我满足。作为我来讲，我发布了一个自己的项目，开始有了利用下班时间好好写点开源代码学习和装逼的冲动。</p>\n</blockquote>\n<blockquote>\n<p>再者，作为一个经验丰富的java开发工程师，我们在日常工作中总会积攒下自己使用得很顺手的一些轮子或者一些通用的基础类。如果我们整理好，并持续维护，发布到了中央仓库之后，就可以避免很多重复性的工作。而且也避免了很多冲突：我现在的公司里，每个项目的dubbo调用接口都会自己定义一个Response和Request类。同一类型的重复定义，跟cpp的多根继承一样烦。这样的结果导致了没法统一处理各个系统的调用返回值。既不够优雅，也显得重复。如果我们把这些基础的东西发布到了中央仓库，就只需要引用一下了。当然这种情况一般是发布到私服比较好，我只是举个例子。具体的大家自行体会。</p>\n</blockquote>\n<h1 id=\"发布过程\"><a href=\"#发布过程\" class=\"headerlink\" title=\"发布过程\"></a>发布过程</h1><p>在发布前,您需要有自己的项目主页并开源的代码,您可以使用GitHub或者码云,下面的内容以GitHub为例</p>\n<h4 id=\"注册-sonatype的Jira-帐号\"><a href=\"#注册-sonatype的Jira-帐号\" class=\"headerlink\" title=\"注册 sonatype的Jira 帐号\"></a>注册 sonatype的Jira 帐号</h4><p>注册地址: <a href=\"https://issues.sonatype.org/secure/Signup!default.jspa\" target=\"_blank\" rel=\"noopener\">https://issues.sonatype.org/secure/Signup!default.jspa</a><br>注册很简单,重要的是邮箱地址一定要正确,issue有任何变动都会通过邮件通知.</p>\n<blockquote>\n<p>这里要着重说明一下,也是我滚过的坑: Username 字段一定要使用英文+数字,一定不要使用中文!!!否则官方无法分配权限给你,或者会让你另行注册.<br>因为这个Username会成为这个Jira和提交maven项目的OSS的帐号,虽然用中文登录啥的没问题,但提交的时候就有问题了,我折腾了N个小时,最后又求助官方人员才解决.<br>我当时发了一个issue,就叫 issues1吧,当时官方人员让我修改GroupId,修改后我回复修改完成,等了好多个小时都没回应.然后我又提交了一个issue2,内容与issue1一毛一样,很快就有官方人员说OK了.<br>没过几分钟issue1也有官方人员回复了(不是一个人),说我的帐号XX(中文) 不行,让我重新注册一个帐号再回复,他帮我弄.<br>由于当时issue2已经有官方人员回复OK了,我就在issue1里回复说我在另一个issue里已经解决.然后我就很欢喜的去提交,折腾了好久都没提交上,一直说没有权限…但是当时我用那个帐号登录OSS是可以登录的,就是提交不了.<br>折腾了几个小时之后,很无奈的去issue2里求助官方人员,然后在issue1里让我重新注册的兄弟在issue2里说是因为我的帐号是中文,无法分配权限,让我重新注册一个再在issue2里回复,他帮我配权限…<br>重新注册了一个帐号之后,用新的帐号提交,OK了…</p>\n</blockquote>\n<h4 id=\"登录Jira\"><a href=\"#登录Jira\" class=\"headerlink\" title=\"登录Jira\"></a>登录Jira</h4><p>注册完成后就登录: <a href=\"https://issues.sonatype.org/login.jsp\" target=\"_blank\" rel=\"noopener\">https://issues.sonatype.org/login.jsp</a></p>\n<h4 id=\"创建一个-Issue\"><a href=\"#创建一个-Issue\" class=\"headerlink\" title=\"创建一个 Issue\"></a>创建一个 Issue</h4><p>创建地址: <a href=\"https://issues.sonatype.org/secure/CreateIssue.jspa?issuetype=21&amp;pid=10134\" target=\"_blank\" rel=\"noopener\">https://issues.sonatype.org/secure/CreateIssue.jspa?issuetype=21&amp;pid=10134</a></p>\n<blockquote>\n<p>这个地址已经选择好了项目和类型,直接填就行,当然,如果你要通过【Create】按钮创建<br>Project选择【Community Support - Open Source Project Repository Hosting (OSSRH)】<br>Issue Type：选择【New Project】<br>Summary和Description ：自己填,注意要用E文<br>Group Id:：这个必须要注意,如果你用的是GitHub, 一定要是 com.github.你的github用户名, 例如我的项目地址是: <a href=\"https://github.com/KeRan213539/CommonOkHttp\" target=\"_blank\" rel=\"noopener\">https://github.com/KeRan213539/CommonOkHttp</a>, 那我的 groupId就是com.github.KeRan213539,当然也可以使用 GitHub的Page的域名 io.github.你的github用户名. 如果你有自己的域名和项目地址也可以,官方人员会询问你是否有这个域名的所有权.在你项目的pom里一定要使用这个groupId,最好包路径也使用<br>Project URL: 是你的项目地址<br>SCM url: 是你的项目git地址<br>Username(s): 可以不用填,这是能辅助你提交项目的合作人的帐号,前提是他也得在这个Jira注册<br>其他使用默认值就行了</p>\n</blockquote>\n<p>创建好Issue后就等待官方回复吧.通常如果在晚上22点23点的话回复会比较快,运气好几分钟就有回复了<br>当看到回复类似 com.github.xxx has been prepared, now user(s) xxx can:Deploy snapshot artifacts into repository … 说明OK了,可以提交了</p>\n<h4 id=\"使用-GPG-生成密钥对\"><a href=\"#使用-GPG-生成密钥对\" class=\"headerlink\" title=\"使用 GPG 生成密钥对\"></a>使用 GPG 生成密钥对</h4><p>在等待Issue的时候可以先把密钥搞好<br>Windows 系统，可以下载 Gpg4win 软件来生成密钥对。下载地址：<a href=\"https://www.gpg4win.org/download.html\" target=\"_blank\" rel=\"noopener\">https://www.gpg4win.org/download.html</a><br>下载的时候有个坑,会弹出一个捐助页面,然后没有下载的地方,也没有自动开始下载.感觉好像不捐助就不能下载一样.其实在下载页面下面有个All Downloads,里面有个连接 <a href=\"https://files.gpg4win.org/\" target=\"_blank\" rel=\"noopener\">files.gpg4win.org</a>,在这里找到与下载页面上的最新版相同的版本号下载即可<br>安装过程中在选择组件的时候,除了默认必须安装的,其他取消即可<br>安装完成后,打开CMD</p>\n<blockquote>\n<p>查看是否安装成功<br>gpg –version</p>\n</blockquote>\n<hr>\n<blockquote>\n<p>生成密钥对<br>gpg –gen-key<br>Real name: 名字(E文)<br>Email address: 邮箱<br>You selected this USER-ID:<br>   “xxx<a href=\"mailto:&#x78;&#x78;&#x78;&#x40;&#x71;&#113;&#46;&#x63;&#111;&#109;\" target=\"_blank\" rel=\"noopener\">&#x78;&#x78;&#x78;&#x40;&#x71;&#113;&#46;&#x63;&#111;&#109;</a>“<br>Change (N)ame, (E)mail, or (O)kay/(Q)uit? o<br>之后往下，会让你输入用户名和邮箱，还有一个Passphase（输入两次），相当于密钥库密码，不要忘记。</p>\n</blockquote>\n<hr>\n<blockquote>\n<p>查看公钥<br>gpg –list-keys<br>pub   rsa2048 2017-12-16 [SC] [expires: 2019-12-16]<br>     9DF36BF5DFB87B6F04DBCE3D63EC6544BEE6682D<br>uid           [ultimate] xxx<a href=\"mailto:&#120;&#120;&#x78;&#x40;&#x71;&#113;&#46;&#x63;&#x6f;&#109;\" target=\"_blank\" rel=\"noopener\">&#120;&#120;&#x78;&#x40;&#x71;&#113;&#46;&#x63;&#x6f;&#109;</a><br>sub   rsa2048 2017-12-16 [E] [expires: 2019-12-16]</p>\n</blockquote>\n<blockquote>\n<p>其中 9DF36BF5DFB87B6F04DBCE3D63EC6544BEE6682D 就是公钥</p>\n</blockquote>\n<hr>\n<blockquote>\n<p>将公钥发布到 PGP 密钥服务器</p>\n</blockquote>\n<h2 id=\"gpg-–keyserver-hkp-pool-sks-keyservers-net-–send-keys-你的公钥\"><a href=\"#gpg-–keyserver-hkp-pool-sks-keyservers-net-–send-keys-你的公钥\" class=\"headerlink\" title=\"gpg –keyserver hkp://pool.sks-keyservers.net –send-keys 你的公钥\"></a>gpg –keyserver hkp://pool.sks-keyservers.net –send-keys 你的公钥</h2><blockquote>\n<p>查询公钥是否发布成功<br>gpg –keyserver hkp://pool.sks-keyservers.net –recv-keys  你的公钥</p>\n</blockquote>\n<h4 id=\"修改Maven配制\"><a href=\"#修改Maven配制\" class=\"headerlink\" title=\"修改Maven配制\"></a>修改Maven配制</h4><p>如果你的Issue通过了,那么可以开始提交项目了.</p>\n<blockquote>\n<p>修改maven全局配制文件 settings.xml,在maven安装目录的conf文件夹下</p>\n</blockquote>\n<hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;servers&gt;</span><br><span class=\"line\">    &lt;server&gt;</span><br><span class=\"line\">        &lt;id&gt;oss&lt;/id&gt;</span><br><span class=\"line\">        &lt;username&gt;用户名&lt;/username&gt;</span><br><span class=\"line\">        &lt;password&gt;密码&lt;/password&gt;</span><br><span class=\"line\">    &lt;/server&gt;</span><br><span class=\"line\">&lt;/servers&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"这里的-id-是要在-pom-xml-里面使用的，用户名和密码就是Jira的帐号密码\"><a href=\"#这里的-id-是要在-pom-xml-里面使用的，用户名和密码就是Jira的帐号密码\" class=\"headerlink\" title=\"这里的 id 是要在 pom.xml 里面使用的，用户名和密码就是Jira的帐号密码\"></a>这里的 id 是要在 pom.xml 里面使用的，用户名和密码就是Jira的帐号密码</h2><blockquote>\n<p>pom.xml<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;project&gt;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    &lt;name&gt;dexcoder-assistant&lt;/name&gt;</span><br><span class=\"line\">    &lt;description&gt;dexcoder-assistant is a rapid development kit.&lt;/description&gt;</span><br><span class=\"line\">    &lt;url&gt;http://www.dexcoder.com/&lt;/url&gt;</span><br><span class=\"line\">    &lt;licenses&gt;</span><br><span class=\"line\">        &lt;license&gt;</span><br><span class=\"line\">            &lt;name&gt;The Apache Software License, Version 2.0&lt;/naurl</span><br><span class=\"line\">            &lt;url&gt;http://www.apache.org/licenses/LICENSE-2.0.txt&lt;/url&gt;</span><br><span class=\"line\">        &lt;/license&gt;</span><br><span class=\"line\">    &lt;/licenses&gt;</span><br><span class=\"line\">    &lt;developers&gt;</span><br><span class=\"line\">        &lt;developer&gt;</span><br><span class=\"line\">            &lt;name&gt;selfly&lt;/name&gt;</span><br><span class=\"line\">            &lt;email&gt;selfly@foxmail.com&lt;/email&gt;</span><br><span class=\"line\">        &lt;/developer&gt;</span><br><span class=\"line\">    &lt;/developers&gt;</span><br><span class=\"line\">    &lt;scm&gt;</span><br><span class=\"line\">        &lt;connection&gt;scm:git:git@github.com:selfly/dexcoder-assistant.git&lt;/connection&gt;</span><br><span class=\"line\">        &lt;developerConnection&gt;scm:git:git@github.com:selfly/dexcoder-assistant.git&lt;/developerConnection&gt;</span><br><span class=\"line\">        &lt;url&gt;git@github.com:selfly/dexcoder-assistant.git&lt;/url&gt;</span><br><span class=\"line\">    &lt;/scm&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &lt;profiles&gt;</span><br><span class=\"line\">        &lt;profile&gt;</span><br><span class=\"line\">            &lt;id&gt;release&lt;/id&gt;</span><br><span class=\"line\">            &lt;build&gt;</span><br><span class=\"line\">                &lt;plugins&gt;</span><br><span class=\"line\">                    &lt;!-- Source --&gt;</span><br><span class=\"line\">                    &lt;plugin&gt;</span><br><span class=\"line\">                        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class=\"line\">                        &lt;artifactId&gt;maven-source-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">                        &lt;version&gt;2.2.1&lt;/version&gt;</span><br><span class=\"line\">                        &lt;executions&gt;</span><br><span class=\"line\">                            &lt;execution&gt;</span><br><span class=\"line\">                                &lt;phase&gt;package&lt;/phase&gt;</span><br><span class=\"line\">                                &lt;goals&gt;</span><br><span class=\"line\">                                    &lt;goal&gt;jar-no-fork&lt;/goal&gt;</span><br><span class=\"line\">                                &lt;/goals&gt;</span><br><span class=\"line\">                            &lt;/execution&gt;</span><br><span class=\"line\">                        &lt;/executions&gt;</span><br><span class=\"line\">                    &lt;/plugin&gt;</span><br><span class=\"line\">                    &lt;!-- Javadoc --&gt;</span><br><span class=\"line\">                    &lt;plugin&gt;</span><br><span class=\"line\">                        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class=\"line\">                        &lt;artifactId&gt;maven-javadoc-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">                        &lt;version&gt;2.9.1&lt;/version&gt;</span><br><span class=\"line\">                        &lt;configuration&gt;</span><br><span class=\"line\">                        \t&lt;show&gt;private&lt;/show&gt;</span><br><span class=\"line\">                        \t&lt;nohelp&gt;true&lt;/nohelp&gt;</span><br><span class=\"line\">                                    &lt;charset&gt;UTF-8&lt;/charset&gt;</span><br><span class=\"line\">\t\t\t\t&lt;encoding&gt;UTF-8&lt;/encoding&gt;</span><br><span class=\"line\">\t\t\t\t&lt;docencoding&gt;UTF-8&lt;/docencoding&gt;</span><br><span class=\"line\">\t\t\t\t&lt;additionalparam&gt;-Xdoclint:none&lt;/additionalparam&gt;  &lt;!-- TODO 临时解决不规范的javadoc生成报错,后面要规范化后把这行去掉 --&gt;</span><br><span class=\"line\">\t\t\t&lt;/configuration&gt;</span><br><span class=\"line\">                        &lt;executions&gt;</span><br><span class=\"line\">                            &lt;execution&gt;</span><br><span class=\"line\">                                &lt;phase&gt;package&lt;/phase&gt;</span><br><span class=\"line\">                                &lt;goals&gt;</span><br><span class=\"line\">                                    &lt;goal&gt;jar&lt;/goal&gt;</span><br><span class=\"line\">                                &lt;/goals&gt;</span><br><span class=\"line\">                            &lt;/execution&gt;</span><br><span class=\"line\">                        &lt;/executions&gt;</span><br><span class=\"line\">                    &lt;/plugin&gt;</span><br><span class=\"line\">                    &lt;!-- GPG --&gt;</span><br><span class=\"line\">                    &lt;plugin&gt;</span><br><span class=\"line\">                        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class=\"line\">                        &lt;artifactId&gt;maven-gpg-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">                        &lt;version&gt;1.5&lt;/version&gt;</span><br><span class=\"line\">                        &lt;executions&gt;</span><br><span class=\"line\">                            &lt;execution&gt;</span><br><span class=\"line\">                                &lt;phase&gt;verify&lt;/phase&gt;</span><br><span class=\"line\">                                &lt;goals&gt;</span><br><span class=\"line\">                                    &lt;goal&gt;sign&lt;/goal&gt;</span><br><span class=\"line\">                                &lt;/goals&gt;</span><br><span class=\"line\">                            &lt;/execution&gt;</span><br><span class=\"line\">                        &lt;/executions&gt;</span><br><span class=\"line\">                    &lt;/plugin&gt;</span><br><span class=\"line\">                &lt;/plugins&gt;</span><br><span class=\"line\">            &lt;/build&gt;</span><br><span class=\"line\">            &lt;distributionManagement&gt;</span><br><span class=\"line\">                &lt;snapshotRepository&gt;</span><br><span class=\"line\">                    &lt;id&gt;oss&lt;/id&gt;</span><br><span class=\"line\">                    &lt;url&gt;https://oss.sonatype.org/content/repositories/snapshots/&lt;/url&gt;</span><br><span class=\"line\">                &lt;/snapshotRepository&gt;</span><br><span class=\"line\">                &lt;repository&gt;</span><br><span class=\"line\">                    &lt;id&gt;oss&lt;/id&gt;</span><br><span class=\"line\">                    &lt;url&gt;https://oss.sonatype.org/service/local/staging/deploy/maven2/&lt;/url&gt;</span><br><span class=\"line\">                &lt;/repository&gt;</span><br><span class=\"line\">            &lt;/distributionManagement&gt;</span><br><span class=\"line\">        &lt;/profile&gt;</span><br><span class=\"line\">    &lt;/profiles&gt;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&lt;/project&gt;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<blockquote>\n<p>pom.xml 中必须包括：name、description、url、licenses、developers、scm 等基本信息，使用了 Maven 的 profile 功能，只有在 release 的时候，创建源码包、文档包、使用 GPG 进行数字签名。<br>此外，snapshotRepository 与 repository 中的 id 一定要与 setting.xml 中 server 的 id 保持一致。<br>如果是多模块项目的话，只需要在父 pom.xml 中声明这些，子 pom.xml 中只需要修改相应的一些信息，如 name 标签。<br>由于我使用的是jdk8,对doc的格式要求更严,不标准的doc注释会报错,这时候可以通过在doc插件中配制additionalparam参数,上面代码里已经配过了.但这只是临时解决方案,还是尽量使用标准的doc注释吧.</p>\n</blockquote>\n<h4 id=\"提交项目到OSS\"><a href=\"#提交项目到OSS\" class=\"headerlink\" title=\"提交项目到OSS\"></a>提交项目到OSS</h4><p>maven配制修改完成后,就可以提交项目了,使用命令:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn clean deploy -P release</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>当执行以上 Maven 命令时，会自动弹出一个对话框，需要输入上面提到的 Passphase，它就是刚才设置的 GPG 密钥库的密码。<br>注意：此时上传的构件并未正式发布到中央仓库中，只是部署到 OSS 中了，下面才是真正的发布。</p>\n</blockquote>\n<hr>\n<blockquote>\n<p>执行上面的命令的过程中,可能会找不到gpg.exe, 检查环境变量,发现环境变量中已经配制了gpg.exe所在的路径,但是还是报错… 如何解决? setting.xml中加入:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;profile&gt;</span><br><span class=\"line\">      &lt;id&gt;release&lt;/id&gt;</span><br><span class=\"line\">      &lt;properties&gt;</span><br><span class=\"line\">        &lt;gpg.executable&gt;D:/Program Files (x86)/GnuPG/bin/gpg.exe&lt;/gpg.executable&gt;</span><br><span class=\"line\">        &lt;gpg.passphrase&gt;上面提到的 Passphase&lt;/gpg.passphrase&gt;</span><br><span class=\"line\">      &lt;/properties&gt;</span><br><span class=\"line\">    &lt;/profile&gt;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<blockquote>\n<p>注意 ID要与pom.xml里的发布的 profile 的ID对应<br>其中&lt;gpg.executable&gt;为你的gpg.exe的完整路径</p>\n</blockquote>\n<p>&lt;gpg.passphrase&gt; 为上面提到的 Passphase,这样就不用在每次发布的时候都输入密码了,但是我发现即便有这个,有时候(只是有时,不是每次)还是要让输入密码,暂时不清楚是什么问题.</p>\n<h2 id=\"上面这2个配制也可以配制到pom-xml的gpg插件的中-去掉-lt-gpg-gt-就行-当然密码最好还是不要放在pom-xml里-因为如果你的代码开源的话-密码也一起开源了…\"><a href=\"#上面这2个配制也可以配制到pom-xml的gpg插件的中-去掉-lt-gpg-gt-就行-当然密码最好还是不要放在pom-xml里-因为如果你的代码开源的话-密码也一起开源了…\" class=\"headerlink\" title=\"上面这2个配制也可以配制到pom.xml的gpg插件的中,去掉&lt;gpg.&gt;就行,当然密码最好还是不要放在pom.xml里,因为如果你的代码开源的话,密码也一起开源了…\"></a>上面这2个配制也可以配制到pom.xml的gpg插件的<configuration>中,去掉&lt;gpg.&gt;就行,当然密码最好还是不要放在pom.xml里,因为如果你的代码开源的话,密码也一起开源了…</configuration></h2><blockquote>\n<p>如何发布快照版本?<br>在pom.xml中的项目版本号后面加上  -SNAPSHOT 就行<br>快照版到这里就发布好了，不需要执行下面的关闭、发布构建步骤，构建列表里也找不到快照版的构建，快照版发布后就可以直接引用了</p>\n</blockquote>\n<h4 id=\"在-OSS中发布\"><a href=\"#在-OSS中发布\" class=\"headerlink\" title=\"在 OSS中发布\"></a>在 OSS中发布</h4><blockquote>\n<p>使用 Jira 账号登录 <a href=\"https://oss.sonatype.org\" target=\"_blank\" rel=\"noopener\">https://oss.sonatype.org</a>，在 Staging Repositories 中查看刚才已上传的构件。<br>一般发布的构件不多,可以直接滚动条拉到最后就能看到自己的构件,或者更改时间排序,也可进行模糊查询定位到自己的构件<br>找到自己的构建后选中,并点击上方的 【Close】按钮关闭构建,这个过程有点慢,稍等几分钟<br>刷新页面,发现关闭成功后,再次选中自己的构建,点击上方的【Release】发布构建.</p>\n</blockquote>\n<h4 id=\"通知Sonatype-已经成功发布\"><a href=\"#通知Sonatype-已经成功发布\" class=\"headerlink\" title=\"通知Sonatype 已经成功发布\"></a>通知Sonatype 已经成功发布</h4><blockquote>\n<p>在Issue中通过审核的官方回复中,通常会让你在发布成功后再次回复告知他们,在刚才那个Issue中回复已经成功发布,官方会回复你大概需要等多久才能在中央仓库中找到你的项目(10分钟左右)以及要多久才能在搜索中搜到(2个小时左右)</p>\n</blockquote>\n<h4 id=\"以后的提交过程\"><a href=\"#以后的提交过程\" class=\"headerlink\" title=\"以后的提交过程\"></a>以后的提交过程</h4><blockquote>\n<p>第一次提交才这么麻烦,以后提交只用重复maven发布,OSS中Close,Release的过程就可以了,当然需要等待的时间还是10分钟和2小时.<br>如果要发布新的项目,在使用相同GroupId的情况下,与上面的过程一样.只有使用不同的GroupId的时候,才会需要再去提交Issue申请.<br>当然如果你没有换电脑的话 GPG 的过程只需要一次就行</p>\n</blockquote>\n<h4 id=\"结束\"><a href=\"#结束\" class=\"headerlink\" title=\"结束\"></a>结束</h4><p>到此发布过程就结束了.本文参考了以下文章,特别感谢这些文章的作者:<br><a href=\"https://www.cnblogs.com/binarylei/p/8628245.html\" target=\"_blank\" rel=\"noopener\">Maven 发布自己的项目到 Maven 中央仓库</a><br><a href=\"https://www.cnblogs.com/songjialin2016/p/8624019.html\" target=\"_blank\" rel=\"noopener\">[干货]–发布项目到maven中央仓库</a><br><a href=\"https://blog.csdn.net/lanmo555/article/details/52456751\" target=\"_blank\" rel=\"noopener\">将项目发布到Maven中央库</a></p>\n</the>","site":{"data":{}},"excerpt":"<p><excerpt in=\"\" index=\"\" |=\"\" 首页摘要=\"\"> </excerpt></p>\n<h1 id=\"为什么写这篇文章\"><a href=\"#为什么写这篇文章\" class=\"headerlink\" title=\"为什么写这篇文章\"></a>为什么写这篇文章</h1><p>现在OkHttp很火,研究学习了一下,铺天盖地的教程和通用工具都是Android用的,封装了很多Android的组件在里边.但是OkHttp不是一个安卓库啊,它是java库,所有基于JVM的语言都可以用.<br>所以自己写了个OkHttp通用简单封装并放到了github,这是本人第一个开源项目,有点小兴奋呢.但是只是开源,别人想使用也麻烦,还要下载下来自己编译,然后就想到了把它提交到maven中央仓库.但是没有提交过啊,各种搜索折腾了一天,终于成功了.<br>这篇文章大概介绍一下如何将自己的项目发布到maven中央仓库及我滚过的坑(可能大家会觉得可笑,想笑就笑吧,反正我也看不见o(∩_∩)o )</p>\n<p>+","more":"</p>\n<the rest=\"\" of=\"\" contents=\"\" |=\"\" 余下全文=\"\">\n\n<h1 id=\"什么是maven中央仓库\"><a href=\"#什么是maven中央仓库\" class=\"headerlink\" title=\"什么是maven中央仓库\"></a>什么是maven中央仓库</h1><p>偷个懒,下面的内容摘抄自 <a href=\"http://www.cnblogs.com/songjialin2016/p/8624019.html\" target=\"_blank\" rel=\"noopener\">发布项目到maven中央仓库</a></p>\n<blockquote>\n<p>maven是java世界最流行的构建工具，构建内容囊括了一个java项目的整个生命周期。其中最重要的功能就是依赖管理，maven通过一个类似云的ftp站点统一管理所有java 的jar文件，同时给每个文件的每个版本一个统一的唯一坐标。开发人员通过检索配置这些坐标，选择自己需要的构件搭建自己的项目环境。因此，通过一个叫做pom的描述文件，我们就可以在任何平台搭建好项目运行所需要的环境。方便了协作和分享代码。</p>\n</blockquote>\n<blockquote>\n<p>而那个类似云的ftp站点就是maven中央仓库。由于一些不可抗拒因素，我们对于中央仓库的访问速度比较慢。因此在平时工作环境中，我们往往都是使用一些镜像站点，如阿里云和开源中国的仓库镜像。同时由于公司里的商业代码不可发布到公开站点，我们也会在局域网内搭建私服。但是无论是镜像还是私服，都像是缓存，虽然提高了下载速度，但是最终，所有的jar都来自中央仓库。因此，如果我们将项目发布到了maven 中央仓库中，那么在所有基于maven或者gradle等的项目里都可以依赖下载你的构件。真正做到了一次发布，处处可用。</p>\n</blockquote>\n<h1 id=\"发布到中央仓库的好处\"><a href=\"#发布到中央仓库的好处\" class=\"headerlink\" title=\"发布到中央仓库的好处\"></a>发布到中央仓库的好处</h1><p>偷个懒,下面的内容摘抄自 <a href=\"http://www.cnblogs.com/songjialin2016/p/8624019.html\" target=\"_blank\" rel=\"noopener\">发布项目到maven中央仓库</a></p>\n<blockquote>\n<p>首先，作为一个java从业者，对于天天都在用的东西，做一个深入的了解，发布一个项目到中央仓库可以自我满足。作为我来讲，我发布了一个自己的项目，开始有了利用下班时间好好写点开源代码学习和装逼的冲动。</p>\n</blockquote>\n<blockquote>\n<p>再者，作为一个经验丰富的java开发工程师，我们在日常工作中总会积攒下自己使用得很顺手的一些轮子或者一些通用的基础类。如果我们整理好，并持续维护，发布到了中央仓库之后，就可以避免很多重复性的工作。而且也避免了很多冲突：我现在的公司里，每个项目的dubbo调用接口都会自己定义一个Response和Request类。同一类型的重复定义，跟cpp的多根继承一样烦。这样的结果导致了没法统一处理各个系统的调用返回值。既不够优雅，也显得重复。如果我们把这些基础的东西发布到了中央仓库，就只需要引用一下了。当然这种情况一般是发布到私服比较好，我只是举个例子。具体的大家自行体会。</p>\n</blockquote>\n<h1 id=\"发布过程\"><a href=\"#发布过程\" class=\"headerlink\" title=\"发布过程\"></a>发布过程</h1><p>在发布前,您需要有自己的项目主页并开源的代码,您可以使用GitHub或者码云,下面的内容以GitHub为例</p>\n<h4 id=\"注册-sonatype的Jira-帐号\"><a href=\"#注册-sonatype的Jira-帐号\" class=\"headerlink\" title=\"注册 sonatype的Jira 帐号\"></a>注册 sonatype的Jira 帐号</h4><p>注册地址: <a href=\"https://issues.sonatype.org/secure/Signup!default.jspa\" target=\"_blank\" rel=\"noopener\">https://issues.sonatype.org/secure/Signup!default.jspa</a><br>注册很简单,重要的是邮箱地址一定要正确,issue有任何变动都会通过邮件通知.</p>\n<blockquote>\n<p>这里要着重说明一下,也是我滚过的坑: Username 字段一定要使用英文+数字,一定不要使用中文!!!否则官方无法分配权限给你,或者会让你另行注册.<br>因为这个Username会成为这个Jira和提交maven项目的OSS的帐号,虽然用中文登录啥的没问题,但提交的时候就有问题了,我折腾了N个小时,最后又求助官方人员才解决.<br>我当时发了一个issue,就叫 issues1吧,当时官方人员让我修改GroupId,修改后我回复修改完成,等了好多个小时都没回应.然后我又提交了一个issue2,内容与issue1一毛一样,很快就有官方人员说OK了.<br>没过几分钟issue1也有官方人员回复了(不是一个人),说我的帐号XX(中文) 不行,让我重新注册一个帐号再回复,他帮我弄.<br>由于当时issue2已经有官方人员回复OK了,我就在issue1里回复说我在另一个issue里已经解决.然后我就很欢喜的去提交,折腾了好久都没提交上,一直说没有权限…但是当时我用那个帐号登录OSS是可以登录的,就是提交不了.<br>折腾了几个小时之后,很无奈的去issue2里求助官方人员,然后在issue1里让我重新注册的兄弟在issue2里说是因为我的帐号是中文,无法分配权限,让我重新注册一个再在issue2里回复,他帮我配权限…<br>重新注册了一个帐号之后,用新的帐号提交,OK了…</p>\n</blockquote>\n<h4 id=\"登录Jira\"><a href=\"#登录Jira\" class=\"headerlink\" title=\"登录Jira\"></a>登录Jira</h4><p>注册完成后就登录: <a href=\"https://issues.sonatype.org/login.jsp\" target=\"_blank\" rel=\"noopener\">https://issues.sonatype.org/login.jsp</a></p>\n<h4 id=\"创建一个-Issue\"><a href=\"#创建一个-Issue\" class=\"headerlink\" title=\"创建一个 Issue\"></a>创建一个 Issue</h4><p>创建地址: <a href=\"https://issues.sonatype.org/secure/CreateIssue.jspa?issuetype=21&amp;pid=10134\" target=\"_blank\" rel=\"noopener\">https://issues.sonatype.org/secure/CreateIssue.jspa?issuetype=21&amp;pid=10134</a></p>\n<blockquote>\n<p>这个地址已经选择好了项目和类型,直接填就行,当然,如果你要通过【Create】按钮创建<br>Project选择【Community Support - Open Source Project Repository Hosting (OSSRH)】<br>Issue Type：选择【New Project】<br>Summary和Description ：自己填,注意要用E文<br>Group Id:：这个必须要注意,如果你用的是GitHub, 一定要是 com.github.你的github用户名, 例如我的项目地址是: <a href=\"https://github.com/KeRan213539/CommonOkHttp\" target=\"_blank\" rel=\"noopener\">https://github.com/KeRan213539/CommonOkHttp</a>, 那我的 groupId就是com.github.KeRan213539,当然也可以使用 GitHub的Page的域名 io.github.你的github用户名. 如果你有自己的域名和项目地址也可以,官方人员会询问你是否有这个域名的所有权.在你项目的pom里一定要使用这个groupId,最好包路径也使用<br>Project URL: 是你的项目地址<br>SCM url: 是你的项目git地址<br>Username(s): 可以不用填,这是能辅助你提交项目的合作人的帐号,前提是他也得在这个Jira注册<br>其他使用默认值就行了</p>\n</blockquote>\n<p>创建好Issue后就等待官方回复吧.通常如果在晚上22点23点的话回复会比较快,运气好几分钟就有回复了<br>当看到回复类似 com.github.xxx has been prepared, now user(s) xxx can:Deploy snapshot artifacts into repository … 说明OK了,可以提交了</p>\n<h4 id=\"使用-GPG-生成密钥对\"><a href=\"#使用-GPG-生成密钥对\" class=\"headerlink\" title=\"使用 GPG 生成密钥对\"></a>使用 GPG 生成密钥对</h4><p>在等待Issue的时候可以先把密钥搞好<br>Windows 系统，可以下载 Gpg4win 软件来生成密钥对。下载地址：<a href=\"https://www.gpg4win.org/download.html\" target=\"_blank\" rel=\"noopener\">https://www.gpg4win.org/download.html</a><br>下载的时候有个坑,会弹出一个捐助页面,然后没有下载的地方,也没有自动开始下载.感觉好像不捐助就不能下载一样.其实在下载页面下面有个All Downloads,里面有个连接 <a href=\"https://files.gpg4win.org/\" target=\"_blank\" rel=\"noopener\">files.gpg4win.org</a>,在这里找到与下载页面上的最新版相同的版本号下载即可<br>安装过程中在选择组件的时候,除了默认必须安装的,其他取消即可<br>安装完成后,打开CMD</p>\n<blockquote>\n<p>查看是否安装成功<br>gpg –version</p>\n</blockquote>\n<hr>\n<blockquote>\n<p>生成密钥对<br>gpg –gen-key<br>Real name: 名字(E文)<br>Email address: 邮箱<br>You selected this USER-ID:<br>   “xxx<a href=\"mailto:&#x78;&#x78;&#x78;&#x40;&#x71;&#113;&#46;&#x63;&#111;&#109;\" target=\"_blank\" rel=\"noopener\">&#x78;&#x78;&#x78;&#x40;&#x71;&#113;&#46;&#x63;&#111;&#109;</a>“<br>Change (N)ame, (E)mail, or (O)kay/(Q)uit? o<br>之后往下，会让你输入用户名和邮箱，还有一个Passphase（输入两次），相当于密钥库密码，不要忘记。</p>\n</blockquote>\n<hr>\n<blockquote>\n<p>查看公钥<br>gpg –list-keys<br>pub   rsa2048 2017-12-16 [SC] [expires: 2019-12-16]<br>     9DF36BF5DFB87B6F04DBCE3D63EC6544BEE6682D<br>uid           [ultimate] xxx<a href=\"mailto:&#120;&#120;&#x78;&#x40;&#x71;&#113;&#46;&#x63;&#x6f;&#109;\" target=\"_blank\" rel=\"noopener\">&#120;&#120;&#x78;&#x40;&#x71;&#113;&#46;&#x63;&#x6f;&#109;</a><br>sub   rsa2048 2017-12-16 [E] [expires: 2019-12-16]</p>\n</blockquote>\n<blockquote>\n<p>其中 9DF36BF5DFB87B6F04DBCE3D63EC6544BEE6682D 就是公钥</p>\n</blockquote>\n<hr>\n<blockquote>\n<p>将公钥发布到 PGP 密钥服务器</p>\n</blockquote>\n<h2 id=\"gpg-–keyserver-hkp-pool-sks-keyservers-net-–send-keys-你的公钥\"><a href=\"#gpg-–keyserver-hkp-pool-sks-keyservers-net-–send-keys-你的公钥\" class=\"headerlink\" title=\"gpg –keyserver hkp://pool.sks-keyservers.net –send-keys 你的公钥\"></a>gpg –keyserver hkp://pool.sks-keyservers.net –send-keys 你的公钥</h2><blockquote>\n<p>查询公钥是否发布成功<br>gpg –keyserver hkp://pool.sks-keyservers.net –recv-keys  你的公钥</p>\n</blockquote>\n<h4 id=\"修改Maven配制\"><a href=\"#修改Maven配制\" class=\"headerlink\" title=\"修改Maven配制\"></a>修改Maven配制</h4><p>如果你的Issue通过了,那么可以开始提交项目了.</p>\n<blockquote>\n<p>修改maven全局配制文件 settings.xml,在maven安装目录的conf文件夹下</p>\n</blockquote>\n<hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;servers&gt;</span><br><span class=\"line\">    &lt;server&gt;</span><br><span class=\"line\">        &lt;id&gt;oss&lt;/id&gt;</span><br><span class=\"line\">        &lt;username&gt;用户名&lt;/username&gt;</span><br><span class=\"line\">        &lt;password&gt;密码&lt;/password&gt;</span><br><span class=\"line\">    &lt;/server&gt;</span><br><span class=\"line\">&lt;/servers&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"这里的-id-是要在-pom-xml-里面使用的，用户名和密码就是Jira的帐号密码\"><a href=\"#这里的-id-是要在-pom-xml-里面使用的，用户名和密码就是Jira的帐号密码\" class=\"headerlink\" title=\"这里的 id 是要在 pom.xml 里面使用的，用户名和密码就是Jira的帐号密码\"></a>这里的 id 是要在 pom.xml 里面使用的，用户名和密码就是Jira的帐号密码</h2><blockquote>\n<p>pom.xml<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;project&gt;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    &lt;name&gt;dexcoder-assistant&lt;/name&gt;</span><br><span class=\"line\">    &lt;description&gt;dexcoder-assistant is a rapid development kit.&lt;/description&gt;</span><br><span class=\"line\">    &lt;url&gt;http://www.dexcoder.com/&lt;/url&gt;</span><br><span class=\"line\">    &lt;licenses&gt;</span><br><span class=\"line\">        &lt;license&gt;</span><br><span class=\"line\">            &lt;name&gt;The Apache Software License, Version 2.0&lt;/naurl</span><br><span class=\"line\">            &lt;url&gt;http://www.apache.org/licenses/LICENSE-2.0.txt&lt;/url&gt;</span><br><span class=\"line\">        &lt;/license&gt;</span><br><span class=\"line\">    &lt;/licenses&gt;</span><br><span class=\"line\">    &lt;developers&gt;</span><br><span class=\"line\">        &lt;developer&gt;</span><br><span class=\"line\">            &lt;name&gt;selfly&lt;/name&gt;</span><br><span class=\"line\">            &lt;email&gt;selfly@foxmail.com&lt;/email&gt;</span><br><span class=\"line\">        &lt;/developer&gt;</span><br><span class=\"line\">    &lt;/developers&gt;</span><br><span class=\"line\">    &lt;scm&gt;</span><br><span class=\"line\">        &lt;connection&gt;scm:git:git@github.com:selfly/dexcoder-assistant.git&lt;/connection&gt;</span><br><span class=\"line\">        &lt;developerConnection&gt;scm:git:git@github.com:selfly/dexcoder-assistant.git&lt;/developerConnection&gt;</span><br><span class=\"line\">        &lt;url&gt;git@github.com:selfly/dexcoder-assistant.git&lt;/url&gt;</span><br><span class=\"line\">    &lt;/scm&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &lt;profiles&gt;</span><br><span class=\"line\">        &lt;profile&gt;</span><br><span class=\"line\">            &lt;id&gt;release&lt;/id&gt;</span><br><span class=\"line\">            &lt;build&gt;</span><br><span class=\"line\">                &lt;plugins&gt;</span><br><span class=\"line\">                    &lt;!-- Source --&gt;</span><br><span class=\"line\">                    &lt;plugin&gt;</span><br><span class=\"line\">                        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class=\"line\">                        &lt;artifactId&gt;maven-source-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">                        &lt;version&gt;2.2.1&lt;/version&gt;</span><br><span class=\"line\">                        &lt;executions&gt;</span><br><span class=\"line\">                            &lt;execution&gt;</span><br><span class=\"line\">                                &lt;phase&gt;package&lt;/phase&gt;</span><br><span class=\"line\">                                &lt;goals&gt;</span><br><span class=\"line\">                                    &lt;goal&gt;jar-no-fork&lt;/goal&gt;</span><br><span class=\"line\">                                &lt;/goals&gt;</span><br><span class=\"line\">                            &lt;/execution&gt;</span><br><span class=\"line\">                        &lt;/executions&gt;</span><br><span class=\"line\">                    &lt;/plugin&gt;</span><br><span class=\"line\">                    &lt;!-- Javadoc --&gt;</span><br><span class=\"line\">                    &lt;plugin&gt;</span><br><span class=\"line\">                        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class=\"line\">                        &lt;artifactId&gt;maven-javadoc-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">                        &lt;version&gt;2.9.1&lt;/version&gt;</span><br><span class=\"line\">                        &lt;configuration&gt;</span><br><span class=\"line\">                        \t&lt;show&gt;private&lt;/show&gt;</span><br><span class=\"line\">                        \t&lt;nohelp&gt;true&lt;/nohelp&gt;</span><br><span class=\"line\">                                    &lt;charset&gt;UTF-8&lt;/charset&gt;</span><br><span class=\"line\">\t\t\t\t&lt;encoding&gt;UTF-8&lt;/encoding&gt;</span><br><span class=\"line\">\t\t\t\t&lt;docencoding&gt;UTF-8&lt;/docencoding&gt;</span><br><span class=\"line\">\t\t\t\t&lt;additionalparam&gt;-Xdoclint:none&lt;/additionalparam&gt;  &lt;!-- TODO 临时解决不规范的javadoc生成报错,后面要规范化后把这行去掉 --&gt;</span><br><span class=\"line\">\t\t\t&lt;/configuration&gt;</span><br><span class=\"line\">                        &lt;executions&gt;</span><br><span class=\"line\">                            &lt;execution&gt;</span><br><span class=\"line\">                                &lt;phase&gt;package&lt;/phase&gt;</span><br><span class=\"line\">                                &lt;goals&gt;</span><br><span class=\"line\">                                    &lt;goal&gt;jar&lt;/goal&gt;</span><br><span class=\"line\">                                &lt;/goals&gt;</span><br><span class=\"line\">                            &lt;/execution&gt;</span><br><span class=\"line\">                        &lt;/executions&gt;</span><br><span class=\"line\">                    &lt;/plugin&gt;</span><br><span class=\"line\">                    &lt;!-- GPG --&gt;</span><br><span class=\"line\">                    &lt;plugin&gt;</span><br><span class=\"line\">                        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class=\"line\">                        &lt;artifactId&gt;maven-gpg-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">                        &lt;version&gt;1.5&lt;/version&gt;</span><br><span class=\"line\">                        &lt;executions&gt;</span><br><span class=\"line\">                            &lt;execution&gt;</span><br><span class=\"line\">                                &lt;phase&gt;verify&lt;/phase&gt;</span><br><span class=\"line\">                                &lt;goals&gt;</span><br><span class=\"line\">                                    &lt;goal&gt;sign&lt;/goal&gt;</span><br><span class=\"line\">                                &lt;/goals&gt;</span><br><span class=\"line\">                            &lt;/execution&gt;</span><br><span class=\"line\">                        &lt;/executions&gt;</span><br><span class=\"line\">                    &lt;/plugin&gt;</span><br><span class=\"line\">                &lt;/plugins&gt;</span><br><span class=\"line\">            &lt;/build&gt;</span><br><span class=\"line\">            &lt;distributionManagement&gt;</span><br><span class=\"line\">                &lt;snapshotRepository&gt;</span><br><span class=\"line\">                    &lt;id&gt;oss&lt;/id&gt;</span><br><span class=\"line\">                    &lt;url&gt;https://oss.sonatype.org/content/repositories/snapshots/&lt;/url&gt;</span><br><span class=\"line\">                &lt;/snapshotRepository&gt;</span><br><span class=\"line\">                &lt;repository&gt;</span><br><span class=\"line\">                    &lt;id&gt;oss&lt;/id&gt;</span><br><span class=\"line\">                    &lt;url&gt;https://oss.sonatype.org/service/local/staging/deploy/maven2/&lt;/url&gt;</span><br><span class=\"line\">                &lt;/repository&gt;</span><br><span class=\"line\">            &lt;/distributionManagement&gt;</span><br><span class=\"line\">        &lt;/profile&gt;</span><br><span class=\"line\">    &lt;/profiles&gt;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&lt;/project&gt;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<blockquote>\n<p>pom.xml 中必须包括：name、description、url、licenses、developers、scm 等基本信息，使用了 Maven 的 profile 功能，只有在 release 的时候，创建源码包、文档包、使用 GPG 进行数字签名。<br>此外，snapshotRepository 与 repository 中的 id 一定要与 setting.xml 中 server 的 id 保持一致。<br>如果是多模块项目的话，只需要在父 pom.xml 中声明这些，子 pom.xml 中只需要修改相应的一些信息，如 name 标签。<br>由于我使用的是jdk8,对doc的格式要求更严,不标准的doc注释会报错,这时候可以通过在doc插件中配制additionalparam参数,上面代码里已经配过了.但这只是临时解决方案,还是尽量使用标准的doc注释吧.</p>\n</blockquote>\n<h4 id=\"提交项目到OSS\"><a href=\"#提交项目到OSS\" class=\"headerlink\" title=\"提交项目到OSS\"></a>提交项目到OSS</h4><p>maven配制修改完成后,就可以提交项目了,使用命令:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn clean deploy -P release</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>当执行以上 Maven 命令时，会自动弹出一个对话框，需要输入上面提到的 Passphase，它就是刚才设置的 GPG 密钥库的密码。<br>注意：此时上传的构件并未正式发布到中央仓库中，只是部署到 OSS 中了，下面才是真正的发布。</p>\n</blockquote>\n<hr>\n<blockquote>\n<p>执行上面的命令的过程中,可能会找不到gpg.exe, 检查环境变量,发现环境变量中已经配制了gpg.exe所在的路径,但是还是报错… 如何解决? setting.xml中加入:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;profile&gt;</span><br><span class=\"line\">      &lt;id&gt;release&lt;/id&gt;</span><br><span class=\"line\">      &lt;properties&gt;</span><br><span class=\"line\">        &lt;gpg.executable&gt;D:/Program Files (x86)/GnuPG/bin/gpg.exe&lt;/gpg.executable&gt;</span><br><span class=\"line\">        &lt;gpg.passphrase&gt;上面提到的 Passphase&lt;/gpg.passphrase&gt;</span><br><span class=\"line\">      &lt;/properties&gt;</span><br><span class=\"line\">    &lt;/profile&gt;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<blockquote>\n<p>注意 ID要与pom.xml里的发布的 profile 的ID对应<br>其中&lt;gpg.executable&gt;为你的gpg.exe的完整路径</p>\n</blockquote>\n<p>&lt;gpg.passphrase&gt; 为上面提到的 Passphase,这样就不用在每次发布的时候都输入密码了,但是我发现即便有这个,有时候(只是有时,不是每次)还是要让输入密码,暂时不清楚是什么问题.</p>\n<h2 id=\"上面这2个配制也可以配制到pom-xml的gpg插件的中-去掉-lt-gpg-gt-就行-当然密码最好还是不要放在pom-xml里-因为如果你的代码开源的话-密码也一起开源了…\"><a href=\"#上面这2个配制也可以配制到pom-xml的gpg插件的中-去掉-lt-gpg-gt-就行-当然密码最好还是不要放在pom-xml里-因为如果你的代码开源的话-密码也一起开源了…\" class=\"headerlink\" title=\"上面这2个配制也可以配制到pom.xml的gpg插件的中,去掉&lt;gpg.&gt;就行,当然密码最好还是不要放在pom.xml里,因为如果你的代码开源的话,密码也一起开源了…\"></a>上面这2个配制也可以配制到pom.xml的gpg插件的<configuration>中,去掉&lt;gpg.&gt;就行,当然密码最好还是不要放在pom.xml里,因为如果你的代码开源的话,密码也一起开源了…</configuration></h2><blockquote>\n<p>如何发布快照版本?<br>在pom.xml中的项目版本号后面加上  -SNAPSHOT 就行<br>快照版到这里就发布好了，不需要执行下面的关闭、发布构建步骤，构建列表里也找不到快照版的构建，快照版发布后就可以直接引用了</p>\n</blockquote>\n<h4 id=\"在-OSS中发布\"><a href=\"#在-OSS中发布\" class=\"headerlink\" title=\"在 OSS中发布\"></a>在 OSS中发布</h4><blockquote>\n<p>使用 Jira 账号登录 <a href=\"https://oss.sonatype.org\" target=\"_blank\" rel=\"noopener\">https://oss.sonatype.org</a>，在 Staging Repositories 中查看刚才已上传的构件。<br>一般发布的构件不多,可以直接滚动条拉到最后就能看到自己的构件,或者更改时间排序,也可进行模糊查询定位到自己的构件<br>找到自己的构建后选中,并点击上方的 【Close】按钮关闭构建,这个过程有点慢,稍等几分钟<br>刷新页面,发现关闭成功后,再次选中自己的构建,点击上方的【Release】发布构建.</p>\n</blockquote>\n<h4 id=\"通知Sonatype-已经成功发布\"><a href=\"#通知Sonatype-已经成功发布\" class=\"headerlink\" title=\"通知Sonatype 已经成功发布\"></a>通知Sonatype 已经成功发布</h4><blockquote>\n<p>在Issue中通过审核的官方回复中,通常会让你在发布成功后再次回复告知他们,在刚才那个Issue中回复已经成功发布,官方会回复你大概需要等多久才能在中央仓库中找到你的项目(10分钟左右)以及要多久才能在搜索中搜到(2个小时左右)</p>\n</blockquote>\n<h4 id=\"以后的提交过程\"><a href=\"#以后的提交过程\" class=\"headerlink\" title=\"以后的提交过程\"></a>以后的提交过程</h4><blockquote>\n<p>第一次提交才这么麻烦,以后提交只用重复maven发布,OSS中Close,Release的过程就可以了,当然需要等待的时间还是10分钟和2小时.<br>如果要发布新的项目,在使用相同GroupId的情况下,与上面的过程一样.只有使用不同的GroupId的时候,才会需要再去提交Issue申请.<br>当然如果你没有换电脑的话 GPG 的过程只需要一次就行</p>\n</blockquote>\n<h4 id=\"结束\"><a href=\"#结束\" class=\"headerlink\" title=\"结束\"></a>结束</h4><p>到此发布过程就结束了.本文参考了以下文章,特别感谢这些文章的作者:<br><a href=\"https://www.cnblogs.com/binarylei/p/8628245.html\" target=\"_blank\" rel=\"noopener\">Maven 发布自己的项目到 Maven 中央仓库</a><br><a href=\"https://www.cnblogs.com/songjialin2016/p/8624019.html\" target=\"_blank\" rel=\"noopener\">[干货]–发布项目到maven中央仓库</a><br><a href=\"https://blog.csdn.net/lanmo555/article/details/52456751\" target=\"_blank\" rel=\"noopener\">将项目发布到Maven中央库</a></p>\n</the>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjgrkl4h00001mkunzyr39vec","tag_id":"cjgrkl4he0004mkuntvvuedqp","_id":"cjgrkl4hh0006mkun34p30t7i"},{"post_id":"cjgrkl4hb0003mkunewmgou27","tag_id":"cjgrkl4hg0005mkunl0upya0v","_id":"cjgrkl4hj0007mkun1ylegiyb"}],"Tag":[{"name":"SpringMVC 自定义注解验证器","_id":"cjgrkl4he0004mkuntvvuedqp"},{"name":"maven中央仓库","_id":"cjgrkl4hg0005mkunl0upya0v"}]}}